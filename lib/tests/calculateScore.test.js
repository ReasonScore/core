"use strict";

var _calculateScore = require("../calculateScore");

var _Score = require("../dataModels/Score");

var _Id = require("../dataModels/Id");

var _ScoreAndClaimEdge = require("../dataModels/ScoreAndClaimEdge");

var _ClaimEdge = require("../dataModels/ClaimEdge");

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    id       | expScore  | expRel   | reversable | affects1        | polarity1 | confidence1 | relevance1 | affects2        | polarity2 | confidence2 | relevance2\n    ", " | ", "  | ", " | ", "   | ", " | ", "  | ", "    | ", "   | ", " | ", "  | ", "    | ", "\n    ", " | ", "  | ", " | ", "   | ", " | ", "  | ", "    | ", "   | ", " | ", "  | ", "    | ", " \n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    id       | expScore  | expRel   | polarity | reversable | affects1        | confidence1 | relevance1\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", "  | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "    | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "   \n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "    | ", " | ", "    | ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

test('claim without any edges should have score of 1', function () {
  expect((0, _calculateScore.calculateScore)().confidence).toBe(1);
});
describe.each(_templateObject(), '__1', +1.00, +1.00, 'pro', false, 'confidence', +1.00, +1.00, '__2', +1.00, +2.00, 'pro', false, 'relevance', +1.00, +1.00, '__3', +0.50, +1.00, 'pro', false, 'confidence', +0.50, +1.00, '__4', +0.00, +1.00, 'pro', false, 'confidence', +0.00, +1.00, '__5', +0.00, +1.00, 'pro', false, 'confidence', -1.00, +1.00, '__6', -1.00, +1.00, 'pro', true, 'confidence', -1.00, +1.00, '__7', +0.00, +1.00, 'con', false, 'confidence', +1.00, +1.00, '__8', +0.00, +1.00, 'con', false, 'confidence', +0.50, +1.00, '__9', +0.00, +1.00, 'con', false, 'confidence', +0.00, +1.00, '_10', +1.00, +1.00, 'con', false, 'confidence', -1.00, +1.00, '_11', +1.00, +1.00, 'con', true, 'confidence', -1.00, +1.00)('', function (_ref) {
  var id = _ref.id,
      expScore = _ref.expScore,
      expRel = _ref.expRel,
      polarity = _ref.polarity,
      reversable = _ref.reversable,
      affects1 = _ref.affects1,
      confidence1 = _ref.confidence1,
      relevance1 = _ref.relevance1;
  var scoreAndClaimEdges = [new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(confidence1, relevance1, id, (0, _Id.ID)(""), undefined), new _ClaimEdge.ClaimEdge(undefined, undefined, undefined, affects1, polarity === "pro" ? true : false))];
  var result = (0, _calculateScore.calculateScore)(scoreAndClaimEdges, reversable);
  test("".concat(id, " ").concat(polarity, " ").concat((confidence1 < 0 ? "" : "+") + confidence1.toFixed(1), " ").concat((relevance1 < 0 ? "" : " ") + relevance1.toFixed(1), " ").concat(affects1 ? "true " : "false", " ").concat(affects1.padEnd(10), ",     score = ").concat((expScore < 0 ? "" : " ") + expScore.toFixed(1)), function () {
    expect(result.confidence).toBe(expScore);
  });
  test("".concat(id, " ").concat(polarity, " ").concat((confidence1 < 0 ? "" : "+") + confidence1.toFixed(1), " ").concat((relevance1 < 0 ? "" : " ") + relevance1.toFixed(1), " ").concat(affects1 ? "true " : "false", " ").concat(affects1.padEnd(10), ", relevance = ").concat((expRel < 0 ? "" : " ") + expRel.toFixed(1)), function () {
    expect(result.relevance).toBe(expRel);
  });
});
describe.each(_templateObject2(), '_12', +1.00, +1.00, false, 'confidence', 'pro', +1.00, +1.00, 'confidence', 'pro', +1.00, +1.00, '_13', +0.00, +1.00, false, 'confidence', 'pro', +1.00, +1.00, 'confidence', 'pro', -1.00, +1.00)('', function (_ref2) {
  var id = _ref2.id,
      expScore = _ref2.expScore,
      expRel = _ref2.expRel,
      reversable = _ref2.reversable,
      affects1 = _ref2.affects1,
      polarity1 = _ref2.polarity1,
      confidence1 = _ref2.confidence1,
      relevance1 = _ref2.relevance1,
      affects2 = _ref2.affects2,
      polarity2 = _ref2.polarity2,
      confidence2 = _ref2.confidence2,
      relevance2 = _ref2.relevance2;
  var scoreAndClaimEdges = [new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(confidence1, relevance1, id, (0, _Id.ID)(""), undefined), new _ClaimEdge.ClaimEdge(undefined, undefined, undefined, affects1, polarity1 === "pro" ? true : false)), new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(confidence2, relevance2, id, (0, _Id.ID)(""), undefined), new _ClaimEdge.ClaimEdge(undefined, undefined, undefined, affects2, polarity2 === "pro" ? true : false))];
  var result = (0, _calculateScore.calculateScore)(scoreAndClaimEdges, reversable);
  test("".concat(id, " confidence"), function () {
    expect(result.confidence).toBe(expScore);
  });
  test("".concat(id, " relevance"), function () {
    expect(result.relevance).toBe(expRel);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9jYWxjdWxhdGVTY29yZS50ZXN0LnRzIl0sIm5hbWVzIjpbInRlc3QiLCJleHBlY3QiLCJjb25maWRlbmNlIiwidG9CZSIsImRlc2NyaWJlIiwiZWFjaCIsImlkIiwiZXhwU2NvcmUiLCJleHBSZWwiLCJwb2xhcml0eSIsInJldmVyc2FibGUiLCJhZmZlY3RzMSIsImNvbmZpZGVuY2UxIiwicmVsZXZhbmNlMSIsInNjb3JlQW5kQ2xhaW1FZGdlcyIsIlNjb3JlQW5kQ2xhaW1FZGdlIiwiU2NvcmUiLCJ1bmRlZmluZWQiLCJDbGFpbUVkZ2UiLCJyZXN1bHQiLCJ0b0ZpeGVkIiwicGFkRW5kIiwicmVsZXZhbmNlIiwicG9sYXJpdHkxIiwiYWZmZWN0czIiLCJwb2xhcml0eTIiLCJjb25maWRlbmNlMiIsInJlbGV2YW5jZTIiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBQSxJQUFJLENBQUMsZ0RBQUQsRUFBbUQsWUFBTTtBQUN6REMsRUFBQUEsTUFBTSxDQUFDLHNDQUFpQkMsVUFBbEIsQ0FBTixDQUFvQ0MsSUFBcEMsQ0FBeUMsQ0FBekM7QUFDSCxDQUZHLENBQUo7QUFJQUMsUUFBUSxDQUFDQyxJQUFULG9CQUVNLEtBRk4sRUFFaUIsQ0FBQyxJQUZsQixFQUU2QixDQUFDLElBRjlCLEVBRXdDLEtBRnhDLEVBRW1ELEtBRm5ELEVBRWdFLFlBRmhFLEVBRWtGLENBQUMsSUFGbkYsRUFFZ0csQ0FBQyxJQUZqRyxFQUdNLEtBSE4sRUFHaUIsQ0FBQyxJQUhsQixFQUc2QixDQUFDLElBSDlCLEVBR3dDLEtBSHhDLEVBR21ELEtBSG5ELEVBR2dFLFdBSGhFLEVBR2tGLENBQUMsSUFIbkYsRUFHZ0csQ0FBQyxJQUhqRyxFQUlNLEtBSk4sRUFJaUIsQ0FBQyxJQUpsQixFQUk2QixDQUFDLElBSjlCLEVBSXdDLEtBSnhDLEVBSW1ELEtBSm5ELEVBSWdFLFlB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LEVBQW5DLEVBQXVDLFlBQUcsRUFBSCxDQUF2QyxFQUErQ1csU0FBL0MsQ0FESixFQUVJLElBQUlDLG9CQUFKLENBQWNELFNBQWQsRUFBeUJBLFNBQXpCLEVBQW9DQSxTQUFwQyxFQUNJTyxRQURKLEVBRUlDLFNBQVMsS0FBSyxLQUFkLEdBQXNCLElBQXRCLEdBQTZCLEtBRmpDLENBRkosQ0FQdUIsQ0FBM0I7QUFjQSxNQUFNTixNQUFNLEdBQUcsb0NBQ1hMLGtCQURXLEVBQ1NKLFVBRFQsQ0FBZjtBQUdBVixFQUFBQSxJQUFJLFdBQUlNLEVBQUosa0JBQXFCLFlBQU07QUFBRUwsSUFBQUEsTUFBTSxDQUFDa0IsTUFBTSxDQUFDakIsVUFBUixDQUFOLENBQTBCQyxJQUExQixDQUErQkksUUFBL0I7QUFBMkMsR0FBeEUsQ0FBSjtBQUNBUCxFQUFBQSxJQUFJLFdBQUlNLEVBQUosaUJBQW9CLFlBQU07QUFBRUwsSUFBQUEsTUFBTSxDQUFDa0IsTUFBTSxDQUFDRyxTQUFSLENBQU4sQ0FBeUJuQixJQUF6QixDQUE4QkssTUFBOUI7QUFBd0MsR0FBcEUsQ0FBSjtBQUNILENBeEJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FsY3VsYXRlU2NvcmUgfSBmcm9tIFwiLi4vY2FsY3VsYXRlU2NvcmVcIjtcbmltcG9ydCB7IFNjb3JlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvU2NvcmVcIjtcbmltcG9ydCB7IElEIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvSWRcIjtcbmltcG9ydCB7IFNjb3JlQW5kQ2xhaW1FZGdlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvU2NvcmVBbmRDbGFpbUVkZ2VcIjtcbmltcG9ydCB7IENsYWltRWRnZSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0NsYWltRWRnZVwiO1xuXG50ZXN0KCdjbGFpbSB3aXRob3V0IGFueSBlZGdlcyBzaG91bGQgaGF2ZSBzY29yZSBvZiAxJywgKCkgPT4ge1xuICAgIGV4cGVjdChjYWxjdWxhdGVTY29yZSgpLmNvbmZpZGVuY2UpLnRvQmUoMSk7XG59KTtcblxuZGVzY3JpYmUuZWFjaGBcbiAgICBpZCAgICAgICB8IGV4cFNjb3JlICB8IGV4cFJlbCAgIHwgcG9sYXJpdHkgfCByZXZlcnNhYmxlIHwgYWZmZWN0czEgICAgICAgIHwgY29uZmlkZW5jZTEgfCByZWxldmFuY2UxXG4gICAgJHsnX18xJ30gfCAkeysxLjAwfSAgfCAkeysxLjAwfSB8ICR7J3Bybyd9IHwgJHtmYWxzZX0gICB8ICR7J2NvbmZpZGVuY2UnfSB8ICR7KzEuMDB9ICAgIHwgJHsrMS4wMH1cbiAgICAkeydfXzInfSB8ICR7KzEuMDB9ICB8ICR7KzIuMDB9IHwgJHsncHJvJ30gfCAke2ZhbHNlfSAgIHwgJHsncmVsZXZhbmNlJ30gIHwgJHsrMS4wMH0gICAgfCAkeysxLjAwfVxuICAgICR7J19fMyd9IHwgJHsrMC41MH0gIHwgJHsrMS4wMH0gfCAkeydwcm8nfSB8ICR7ZmFsc2V9ICAgfCAkeydjb25maWRlbmNlJ30gfCAkeyswLjUwfSAgICB8ICR7KzEuMDB9XG4gICAgJHsnX180J30gfCAkeyswLjAwfSAgfCAkeysxLjAwfSB8ICR7J3Bybyd9IHwgJHtmYWxzZX0gICB8ICR7J2NvbmZpZGVuY2UnfSB8ICR7KzAuMDB9ICAgIHwgJHsrMS4wMH1cbiAgICAkeydfXzUnfSB8ICR7KzAuMDB9ICB8ICR7KzEuMDB9IHwgJHsncHJvJ30gfCAke2ZhbHNlfSAgIHwgJHsnY29uZmlkZW5jZSd9IHwgJHstMS4wMH0gICAgfCAkeysxLjAwfVxuICAgICR7J19fNid9IHwgJHstMS4wMH0gIHwgJHsrMS4wMH0gfCAkeydwcm8nfSB8ICR7dHJ1ZX0gICAgfCAkeydjb25maWRlbmNlJ30gfCAkey0xLjAwfSAgICB8ICR7KzEuMDB9XG4gICAgJHsnX183J30gfCAkeyswLjAwfSAgfCAkeysxLjAwfSB8ICR7J2Nvbid9IHwgJHtmYWxzZX0gICB8ICR7J2NvbmZpZGVuY2UnfSB8ICR7KzEuMDB9ICAgIHwgJHsrMS4wMH1cbiAgICAkeydfXzgnfSB8ICR7KzAuMDB9ICB8ICR7KzEuMDB9IHwgJHsnY29uJ30gfCAke2ZhbHNlfSAgIHwgJHsnY29uZmlkZW5jZSd9IHwgJHsrMC41MH0gICAgfCAkeysxLjAwfVxuICAgICR7J19fOSd9IHwgJHsrMC4wMH0gIHwgJHsrMS4wMH0gfCAkeydjb24nfSB8ICR7ZmFsc2V9ICAgfCAkeydjb25maWRlbmNlJ30gfCAkeyswLjAwfSAgICB8ICR7KzEuMDB9ICAgXG4gICAgJHsnXzEwJ30gfCAkeysxLjAwfSAgfCAkeysxLjAwfSB8ICR7J2Nvbid9IHwgJHtmYWxzZX0gICB8ICR7J2NvbmZpZGVuY2UnfSB8ICR7LTEuMDB9ICAgIHwgJHsrMS4wMH1cbiAgICAkeydfMTEnfSB8ICR7KzEuMDB9ICB8ICR7KzEuMDB9IHwgJHsnY29uJ30gfCAke3RydWV9ICAgIHwgJHsnY29uZmlkZW5jZSd9IHwgJHstMS4wMH0gICAgfCAkeysxLjAwfVxuYCgnJywgKHsgaWQsIGV4cFNjb3JlLCBleHBSZWwsIHBvbGFyaXR5LCByZXZlcnNhYmxlLCBhZmZlY3RzMSwgY29uZmlkZW5jZTEsIHJlbGV2YW5jZTEgfSkgPT4ge1xuICAgIGNvbnN0IHNjb3JlQW5kQ2xhaW1FZGdlcyA9IFtcbiAgICAgICAgbmV3IFNjb3JlQW5kQ2xhaW1FZGdlKFxuICAgICAgICAgICAgbmV3IFNjb3JlKGNvbmZpZGVuY2UxLCByZWxldmFuY2UxLCBpZCwgSUQoXCJcIiksIHVuZGVmaW5lZCksXG4gICAgICAgICAgICBuZXcgQ2xhaW1FZGdlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgYWZmZWN0czEsXG4gICAgICAgICAgICAgICAgcG9sYXJpdHkgPT09IFwicHJvXCIgPyB0cnVlIDogZmFsc2UpXG4gICAgICAgICldO1xuICAgIGNvbnN0IHJlc3VsdCA9IGNhbGN1bGF0ZVNjb3JlKFxuICAgICAgICBzY29yZUFuZENsYWltRWRnZXMsIHJldmVyc2FibGVcbiAgICApXG4gICAgdGVzdChgJHtpZH0gJHtwb2xhcml0eX0gJHsoY29uZmlkZW5jZTEgPCAwID8gXCJcIiA6IFwiK1wiKSArIGNvbmZpZGVuY2UxLnRvRml4ZWQoMSl9ICR7KHJlbGV2YW5jZTEgPCAwID8gXCJcIiA6IFwiIFwiKSArIHJlbGV2YW5jZTEudG9GaXhlZCgxKX0gJHthZmZlY3RzMSA/IFwidHJ1ZSBcIiA6IFwiZmFsc2VcIn0gJHthZmZlY3RzMS5wYWRFbmQoMTApfSwgICAgIHNjb3JlID0gJHsoZXhwU2NvcmUgPCAwID8gXCJcIiA6IFwiIFwiKSArIGV4cFNjb3JlLnRvRml4ZWQoMSl9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmNvbmZpZGVuY2UpLnRvQmUoZXhwU2NvcmUpO1xuICAgIH0pO1xuICAgIHRlc3QoYCR7aWR9ICR7cG9sYXJpdHl9ICR7KGNvbmZpZGVuY2UxIDwgMCA/IFwiXCIgOiBcIitcIikgKyBjb25maWRlbmNlMS50b0ZpeGVkKDEpfSAkeyhyZWxldmFuY2UxIDwgMCA/IFwiXCIgOiBcIiBcIikgKyByZWxldmFuY2UxLnRvRml4ZWQoMSl9ICR7YWZmZWN0czEgPyBcInRydWUgXCIgOiBcImZhbHNlXCJ9ICR7YWZmZWN0czEucGFkRW5kKDEwKX0sIHJlbGV2YW5jZSA9ICR7KGV4cFJlbCA8IDAgPyBcIlwiIDogXCIgXCIpICsgZXhwUmVsLnRvRml4ZWQoMSl9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LnJlbGV2YW5jZSkudG9CZShleHBSZWwpO1xuICAgIH0pO1xufSk7XG5cbmRlc2NyaWJlLmVhY2hgXG4gICAgaWQgICAgICAgfCBleHBTY29yZSAgfCBleHBSZWwgICB8IHJldmVyc2FibGUgfCBhZmZlY3RzMSAgICAgICAgfCBwb2xhcml0eTEgfCBjb25maWRlbmNlMSB8IHJlbGV2YW5jZTEgfCBhZmZlY3RzMiAgICAgICAgfCBwb2xhcml0eTIgfCBjb25maWRlbmNlMiB8IHJlbGV2YW5jZTJcbiAgICAkeydfMTInfSB8ICR7KzEuMDB9ICB8ICR7KzEuMDB9IHwgJHtmYWxzZX0gICB8ICR7J2NvbmZpZGVuY2UnfSB8ICR7J3Bybyd9ICB8ICR7KzEuMDB9ICAgIHwgJHsrMS4wMH0gICB8ICR7J2NvbmZpZGVuY2UnfSB8ICR7J3Bybyd9ICB8ICR7KzEuMDB9ICAgIHwgJHsrMS4wMH1cbiAgICAkeydfMTMnfSB8ICR7KzAuMDB9ICB8ICR7KzEuMDB9IHwgJHtmYWxzZX0gICB8ICR7J2NvbmZpZGVuY2UnfSB8ICR7J3Bybyd9ICB8ICR7KzEuMDB9ICAgIHwgJHsrMS4wMH0gICB8ICR7J2NvbmZpZGVuY2UnfSB8ICR7J3Bybyd9ICB8ICR7LTEuMDB9ICAgIHwgJHsrMS4wMH0gXG5gKCcnLCAoeyBpZCwgZXhwU2NvcmUsIGV4cFJlbCwgcmV2ZXJzYWJsZSwgYWZmZWN0czEsIHBvbGFyaXR5MSwgY29uZmlkZW5jZTEsIHJlbGV2YW5jZTEsIGFmZmVjdHMyLCBwb2xhcml0eTIsIGNvbmZpZGVuY2UyLCByZWxldmFuY2UyIH0pID0+IHtcbiAgICBjb25zdCBzY29yZUFuZENsYWltRWRnZXMgPSBbXG4gICAgICAgIG5ldyBTY29yZUFuZENsYWltRWRnZShcbiAgICAgICAgICAgIG5ldyBTY29yZShjb25maWRlbmNlMSwgcmVsZXZhbmNlMSwgaWQsIElEKFwiXCIpLCB1bmRlZmluZWQpLFxuICAgICAgICAgICAgbmV3IENsYWltRWRnZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGFmZmVjdHMxLFxuICAgICAgICAgICAgICAgIHBvbGFyaXR5MSA9PT0gXCJwcm9cIiA/IHRydWUgOiBmYWxzZSlcbiAgICAgICAgKSxcbiAgICAgICAgbmV3IFNjb3JlQW5kQ2xhaW1FZGdlKFxuICAgICAgICAgICAgbmV3IFNjb3JlKGNvbmZpZGVuY2UyLCByZWxldmFuY2UyLCBpZCwgSUQoXCJcIiksIHVuZGVmaW5lZCksXG4gICAgICAgICAgICBuZXcgQ2xhaW1FZGdlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgYWZmZWN0czIsXG4gICAgICAgICAgICAgICAgcG9sYXJpdHkyID09PSBcInByb1wiID8gdHJ1ZSA6IGZhbHNlKVxuICAgICAgICApXG4gICAgXTtcbiAgICBjb25zdCByZXN1bHQgPSBjYWxjdWxhdGVTY29yZShcbiAgICAgICAgc2NvcmVBbmRDbGFpbUVkZ2VzLCByZXZlcnNhYmxlXG4gICAgKVxuICAgIHRlc3QoYCR7aWR9IGNvbmZpZGVuY2VgLCAoKSA9PiB7IGV4cGVjdChyZXN1bHQuY29uZmlkZW5jZSkudG9CZShleHBTY29yZSk7IH0pO1xuICAgIHRlc3QoYCR7aWR9IHJlbGV2YW5jZWAsICgpID0+IHsgZXhwZWN0KHJlc3VsdC5yZWxldmFuY2UpLnRvQmUoZXhwUmVsKTsgfSk7XG59KTtcbiJdfQ==
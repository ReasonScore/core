"use strict";

var _calculateScore = require("../calculateScore");

var _Score = require("../dataModels/Score");

var _ScoreAndClaimEdge = require("../dataModels/ScoreAndClaimEdge");

var _ClaimEdge = require("../dataModels/ClaimEdge");

var _ = require("..");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TestData = function TestData() {
  var testDescription = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Test";
  var scoreAndClaimEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var expectedScore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _Score.Score();
  var reversable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  _classCallCheck(this, TestData);

  this.testDescription = testDescription;
  this.scoreAndClaimEdges = scoreAndClaimEdges;
  this.expectedScore = expectedScore;
  this.reversable = reversable;
};

var testData = [new TestData("_12", [new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(1, 1), new _ClaimEdge.ClaimEdge(undefined, undefined, _.Affects.Confidence, true)), new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(1, 1), new _ClaimEdge.ClaimEdge(undefined, undefined, _.Affects.Confidence, true))], new _Score.Score(1)), new TestData("_13", [new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(1, 1), new _ClaimEdge.ClaimEdge(undefined, undefined, _.Affects.Confidence, true)), new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(-1, 1), new _ClaimEdge.ClaimEdge(undefined, undefined, _.Affects.Confidence, true))], new _Score.Score(0)), new TestData("_14", [new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(1, 1), new _ClaimEdge.ClaimEdge(undefined, undefined, _.Affects.Confidence, true)), new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(0, 1), new _ClaimEdge.ClaimEdge(undefined, undefined, _.Affects.Confidence, false))], new _Score.Score(1))];
var JsonTestData = [];

for (var _i = 0, _testData = testData; _i < _testData.length; _i++) {
  var data = _testData[_i];
  JsonTestData.push(JSON.stringify(data));
}

describe.each(JsonTestData)('Tests', function (testJson) {
  var t = JSON.parse(testJson);
  test(t.testDescription + ' Confidence', function () {
    var result = (0, _calculateScore.calculateScore)({
      scoreAndClaimEdges: t.scoreAndClaimEdges,
      reversable: t.reversable
    });
    expect(result.confidence).toBe(t.expectedScore.confidence);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9jYWxjdWxhdGVTY29yZS50ZXN0LnRzIl0sIm5hbWVzIjpbIlRlc3REYXRhIiwidGVzdERlc2NyaXB0aW9uIiwic2NvcmVBbmRDbGFpbUVkZ2VzIiwiZXhwZWN0ZWRTY29yZSIsIlNjb3JlIiwicmV2ZXJzYWJsZSIsInRlc3REYXRhIiwiU2NvcmVBbmRDbGFpbUVkZ2UiLCJDbGFpbUVkZ2UiLCJ1bmRlZmluZWQiLCJBZmZlY3RzIiwiQ29uZmlkZW5jZSIsIkpzb25UZXN0RGF0YSIsImRhdGEiLCJwdXNoIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlc2NyaWJlIiwiZWFjaCIsInRlc3RKc29uIiwidCIsInBhcnNlIiwidGVzdCIsInJlc3VsdCIsImV4cGVjdCIsImNvbmZpZGVuY2UiLCJ0b0JlIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7O0lBRU1BLFEsR0FDRixvQkFLRTtBQUFBLE1BSlNDLGVBSVQsdUVBSm1DLE1BSW5DO0FBQUEsTUFIU0Msa0JBR1QsdUVBSG1ELEVBR25EO0FBQUEsTUFGU0MsYUFFVCx1RUFGZ0MsSUFBSUMsWUFBSixFQUVoQztBQUFBLE1BRFNDLFVBQ1QsdUVBRCtCLEtBQy9COztBQUFBOztBQUFBLE9BSlNKLGVBSVQsR0FKU0EsZUFJVDtBQUFBLE9BSFNDLGtCQUdULEdBSFNBLGtCQUdUO0FBQUEsT0FGU0MsYUFFVCxHQUZTQSxhQUVUO0FBQUEsT0FEU0UsVUFDVCxHQURTQSxVQUNUO0FBQ0QsQzs7QUFHTCxJQUFNQyxRQUFRLEdBQUcsQ0FDYixJQUFJTixRQUFKLENBQWEsS0FBYixFQUFvQixDQUNoQixJQUFJTyxvQ0FBSixDQUFzQixJQUFJSCxZQUFKLENBQVUsQ0FBVixFQUFhLENBQWIsQ0FBdEIsRUFBdUMsSUFBSUksb0JBQUosQ0FBY0MsU0FBZCxFQUF5QkEsU0FBekIsRUFBb0NDLFVBQVFDLFVBQTVDLEVBQXdELElBQXhELENBQXZDLENBRGdCLEVBRWhCLElBQUlKLG9DQUFKLENBQXNCLElBQUlILFlBQUosQ0FBVSxDQUFWLEVBQWEsQ0FBYixDQUF0QixFQUF1QyxJQUFJSSxvQkFBSixDQUFjQyxTQUFkLEVBQXlCQSxTQUF6QixFQUFvQ0MsVUFBUUMsVUFBNUMsRUFBd0QsSUFBeEQsQ0FBdkMsQ0FGZ0IsQ0FBcEIsRUFHRyxJQUFJUCxZQUFKLENBQVUsQ0FBVixDQUhILENBRGEsRUFLYixJQUFJSixRQUFKLENBQWEsS0FBYixFQUFvQixDQUNoQixJQUFJTyxvQ0FBSixDQUFzQixJQUFJSCxZQUFKLENBQVUsQ0FBVixFQUFhLENBQWIsQ0FBdEIsRUFBdUMsSUFBSUksb0JBQUosQ0FBY0MsU0FBZCxFQUF5QkEsU0FBekIsRUFBb0NDLFVBQVFDLFVBQTVDLEVBQXdELElBQXhELENBQXZDLENBRGdCLEVBRWhCLElBQUlKLG9DQUFKLENBQXNCLElBQUlILFlBQUosQ0FBVSxDQUFDLENBQVgsRUFBYyxDQUFkLENBQXRCLEVBQXdDLElBQUlJLG9CQUFKLENBQWNDLFNBQWQsRUFBeUJBLFNBQXpCLEVBQW9DQyxVQUFRQyxVQUE1QyxFQUF3RCxJQUF4RCxDQUF4QyxDQUZnQixDQUFwQixFQUdHLElBQUlQLFlBQUosQ0FBVSxDQUFWLENBSEgsQ0FMYSxFQVNiLElBQUlKLFFBQUosQ0FBYSxLQUFiLEVBQW9CLENBQ2hCLElBQUlPLG9DQUFKLENBQXNCLElBQUlILFlBQUosQ0FBVSxDQUFWLEVBQWEsQ0FBYixDQUF0QixFQUF1QyxJQUFJSSxvQkFBSixDQUFjQyxTQUFkLEVBQXlCQSxTQUF6QixFQUFvQ0MsVUFBUUMsVUFBNUMsRUFBd0QsSUFBeEQsQ0FBdkMsQ0FEZ0IsRUFFaEIsSUFBSUosb0NBQUosQ0FBc0IsSUFBSUgsWUFBSixDQUFVLENBQVYsRUFBYSxDQUFiLENBQXRCLEVBQXVDLElBQUlJLG9CQUFKLENBQWNDLFNBQWQsRUFBeUJBLFNBQXpCLEVBQW9DQyxVQUFRQyxVQUE1QyxFQUF3RCxLQUF4RCxDQUF2QyxDQUZnQixDQUFwQixFQUdHLElBQUlQLFlBQUosQ0FBVSxDQUFWLENBSEgsQ0FUYSxDQUFqQjtBQWVBLElBQU1RLFlBQXNCLEdBQUcsRUFBL0I7O0FBRUEsNkJBQWlCTixRQUFqQiwrQkFBMkI7QUFBdEIsTUFBSU8sSUFBSSxnQkFBUjtBQUNERCxFQUFBQSxZQUFZLENBQUNFLElBQWIsQ0FBa0JDLElBQUksQ0FBQ0MsU0FBTCxDQUFlSCxJQUFmLENBQWxCO0FBQ0g7O0FBRURJLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjTixZQUFkLEVBQ0ksT0FESixFQUVJLFVBQUNPLFFBQUQsRUFBYztBQUNWLE1BQU1DLENBQVcsR0FBR0wsSUFBSSxDQUFDTSxLQUFMLENBQVdGLFFBQVgsQ0FBcEI7QUFDQUcsRUFBQUEsSUFBSSxDQUFDRixDQUFDLENBQUNuQixlQUFGLEdBQW9CLGFBQXJCLEVBQW9DLFlBQU07QUFDMUMsUUFBTXNCLE1BQU0sR0FBRyxvQ0FBZTtBQUFFckIsTUFBQUEsa0JBQWtCLEVBQUVrQixDQUFDLENBQUNsQixrQkFBeEI7QUFBNENHLE1BQUFBLFVBQVUsRUFBRWUsQ0FBQyxDQUFDZjtBQUExRCxLQUFmLENBQWY7QUFDQW1CLElBQUFBLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxVQUFSLENBQU4sQ0FBMEJDLElBQTFCLENBQStCTixDQUFDLENBQUNqQixhQUFGLENBQWdCc0IsVUFBL0M7QUFDSCxHQUhHLENBQUo7QUFLSCxDQVRMIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FsY3VsYXRlU2NvcmUgfSBmcm9tIFwiLi4vY2FsY3VsYXRlU2NvcmVcIjtcclxuaW1wb3J0IHsgU2NvcmUgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9TY29yZVwiO1xyXG5pbXBvcnQgeyBJRCB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0lkXCI7XHJcbmltcG9ydCB7IFNjb3JlQW5kQ2xhaW1FZGdlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvU2NvcmVBbmRDbGFpbUVkZ2VcIjtcclxuaW1wb3J0IHsgQ2xhaW1FZGdlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQ2xhaW1FZGdlXCI7XHJcbmltcG9ydCB7IEFmZmVjdHMgfSBmcm9tIFwiLi5cIjtcclxuXHJcbmNsYXNzIFRlc3REYXRhIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyB0ZXN0RGVzY3JpcHRpb246IHN0cmluZyA9IFwiVGVzdFwiLFxyXG4gICAgICAgIHB1YmxpYyBzY29yZUFuZENsYWltRWRnZXM6IFNjb3JlQW5kQ2xhaW1FZGdlW10gPSBbXSxcclxuICAgICAgICBwdWJsaWMgZXhwZWN0ZWRTY29yZTogU2NvcmUgPSBuZXcgU2NvcmUoKSxcclxuICAgICAgICBwdWJsaWMgcmV2ZXJzYWJsZTogYm9vbGVhbiA9IGZhbHNlLFxyXG4gICAgKSB7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IHRlc3REYXRhID0gW1xyXG4gICAgbmV3IFRlc3REYXRhKFwiXzEyXCIsIFtcclxuICAgICAgICBuZXcgU2NvcmVBbmRDbGFpbUVkZ2UobmV3IFNjb3JlKDEsIDEpLCBuZXcgQ2xhaW1FZGdlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBBZmZlY3RzLkNvbmZpZGVuY2UsIHRydWUpKSxcclxuICAgICAgICBuZXcgU2NvcmVBbmRDbGFpbUVkZ2UobmV3IFNjb3JlKDEsIDEpLCBuZXcgQ2xhaW1FZGdlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBBZmZlY3RzLkNvbmZpZGVuY2UsIHRydWUpKSxcclxuICAgIF0sIG5ldyBTY29yZSgxKSksXHJcbiAgICBuZXcgVGVzdERhdGEoXCJfMTNcIiwgW1xyXG4gICAgICAgIG5ldyBTY29yZUFuZENsYWltRWRnZShuZXcgU2NvcmUoMSwgMSksIG5ldyBDbGFpbUVkZ2UodW5kZWZpbmVkLCB1bmRlZmluZWQsIEFmZmVjdHMuQ29uZmlkZW5jZSwgdHJ1ZSkpLFxyXG4gICAgICAgIG5ldyBTY29yZUFuZENsYWltRWRnZShuZXcgU2NvcmUoLTEsIDEpLCBuZXcgQ2xhaW1FZGdlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBBZmZlY3RzLkNvbmZpZGVuY2UsIHRydWUpKSxcclxuICAgIF0sIG5ldyBTY29yZSgwKSksXHJcbiAgICBuZXcgVGVzdERhdGEoXCJfMTRcIiwgW1xyXG4gICAgICAgIG5ldyBTY29yZUFuZENsYWltRWRnZShuZXcgU2NvcmUoMSwgMSksIG5ldyBDbGFpbUVkZ2UodW5kZWZpbmVkLCB1bmRlZmluZWQsIEFmZmVjdHMuQ29uZmlkZW5jZSwgdHJ1ZSkpLFxyXG4gICAgICAgIG5ldyBTY29yZUFuZENsYWltRWRnZShuZXcgU2NvcmUoMCwgMSksIG5ldyBDbGFpbUVkZ2UodW5kZWZpbmVkLCB1bmRlZmluZWQsIEFmZmVjdHMuQ29uZmlkZW5jZSwgZmFsc2UpKSxcclxuICAgIF0sIG5ldyBTY29yZSgxKSksXHJcbl1cclxuXHJcbmNvbnN0IEpzb25UZXN0RGF0YTogc3RyaW5nW10gPSBbXTtcclxuXHJcbmZvciAobGV0IGRhdGEgb2YgdGVzdERhdGEpIHtcclxuICAgIEpzb25UZXN0RGF0YS5wdXNoKEpTT04uc3RyaW5naWZ5KGRhdGEpKVxyXG59XHJcblxyXG5kZXNjcmliZS5lYWNoKEpzb25UZXN0RGF0YSkoXHJcbiAgICAnVGVzdHMnLFxyXG4gICAgKHRlc3RKc29uKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdDogVGVzdERhdGEgPSBKU09OLnBhcnNlKHRlc3RKc29uKTtcclxuICAgICAgICB0ZXN0KHQudGVzdERlc2NyaXB0aW9uICsgJyBDb25maWRlbmNlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxjdWxhdGVTY29yZSh7IHNjb3JlQW5kQ2xhaW1FZGdlczogdC5zY29yZUFuZENsYWltRWRnZXMsIHJldmVyc2FibGU6IHQucmV2ZXJzYWJsZSB9KTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5jb25maWRlbmNlKS50b0JlKHQuZXhwZWN0ZWRTY29yZS5jb25maWRlbmNlKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0sXHJcbik7XHJcblxyXG4iXX0=
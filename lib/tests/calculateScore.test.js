"use strict";

var _calculateScore = require("../calculateScore");

var _Score = require("../dataModels/Score");

class TestData {
  constructor(testDescription = "Test", expectedScore, scores = [], reversible = false) {
    this.testDescription = testDescription;
    this.expectedScore = expectedScore;
    this.scores = scores;
    this.reversible = reversible;
  }

}

function s(confidence = 1, relevance = 1, pro = true, affects = "confidence") {
  return new _Score.Score("", undefined, undefined, pro, affects, confidence, relevance);
}

function t(testDescription, expectedScore, scores, reversible = false) {
  return new TestData(testDescription, expectedScore, scores, reversible);
}

const pro = true;
const con = false;
const testData = [t("no scores = 1  ", s(1), []), t("1 and 1 = 1    ", s(1), [s(+1), s(+1)]), t("1 and -1 = 0   ", s(0), [s(+1), s(-1)]), t("pro and con = 0", s(0), [s(+1), s(+1, 1, con)])];
const JsonTestData = [];

for (let data of testData) {
  JsonTestData.push(JSON.stringify(data));
}

describe.each(JsonTestData)('Tests', testJson => {
  const t = JSON.parse(testJson);
  test(t.testDescription + ' Confidence', () => {
    const result = (0, _calculateScore.calculateScore)({
      childScores: t.scores,
      reversible: t.reversible
    });
    expect(result.confidence).toBe(t.expectedScore.confidence);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9jYWxjdWxhdGVTY29yZS50ZXN0LnRzIl0sIm5hbWVzIjpbIlRlc3REYXRhIiwiY29uc3RydWN0b3IiLCJ0ZXN0RGVzY3JpcHRpb24iLCJleHBlY3RlZFNjb3JlIiwic2NvcmVzIiwicmV2ZXJzaWJsZSIsInMiLCJjb25maWRlbmNlIiwicmVsZXZhbmNlIiwicHJvIiwiYWZmZWN0cyIsIlNjb3JlIiwidW5kZWZpbmVkIiwidCIsImNvbiIsInRlc3REYXRhIiwiSnNvblRlc3REYXRhIiwiZGF0YSIsInB1c2giLCJKU09OIiwic3RyaW5naWZ5IiwiZGVzY3JpYmUiLCJlYWNoIiwidGVzdEpzb24iLCJwYXJzZSIsInRlc3QiLCJyZXN1bHQiLCJjaGlsZFNjb3JlcyIsImV4cGVjdCIsInRvQmUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBR0EsTUFBTUEsUUFBTixDQUFlO0FBQ1hDLEVBQUFBLFdBQVcsQ0FDQUMsZUFBdUIsR0FBRyxNQUQxQixFQUVBQyxhQUZBLEVBR0FDLE1BQWUsR0FBRyxFQUhsQixFQUlBQyxVQUFtQixHQUFHLEtBSnRCLEVBS1Q7QUFBQSxTQUpTSCxlQUlULEdBSlNBLGVBSVQ7QUFBQSxTQUhTQyxhQUdULEdBSFNBLGFBR1Q7QUFBQSxTQUZTQyxNQUVULEdBRlNBLE1BRVQ7QUFBQSxTQURTQyxVQUNULEdBRFNBLFVBQ1Q7QUFDRDs7QUFQVTs7QUFVZixTQUFTQyxDQUFULENBQVdDLFVBQWtCLEdBQUcsQ0FBaEMsRUFBbUNDLFNBQWlCLEdBQUcsQ0FBdkQsRUFBMERDLEdBQVksR0FBRyxJQUF6RSxFQUErRUMsT0FBZ0IsR0FBRyxZQUFsRyxFQUF1SDtBQUNuSCxTQUFPLElBQUlDLFlBQUosQ0FBVSxFQUFWLEVBQWNDLFNBQWQsRUFBeUJBLFNBQXpCLEVBQW9DSCxHQUFwQyxFQUF5Q0MsT0FBekMsRUFBa0RILFVBQWxELEVBQThEQyxTQUE5RCxDQUFQO0FBQ0g7O0FBRUQsU0FBU0ssQ0FBVCxDQUFXWCxlQUFYLEVBQW9DQyxhQUFwQyxFQUEwREMsTUFBMUQsRUFBMkVDLFVBQW1CLEdBQUcsS0FBakcsRUFBd0c7QUFDcEcsU0FBTyxJQUFJTCxRQUFKLENBQWFFLGVBQWIsRUFBOEJDLGFBQTlCLEVBQTZDQyxNQUE3QyxFQUFxREMsVUFBckQsQ0FBUDtBQUNIOztBQUVELE1BQU1JLEdBQUcsR0FBRyxJQUFaO0FBQ0EsTUFBTUssR0FBRyxHQUFHLEtBQVo7QUFFQSxNQUFNQyxRQUFRLEdBQUcsQ0FDYkYsQ0FBQyxDQUFDLGlCQUFELEVBQW9CUCxDQUFDLENBQUMsQ0FBRCxDQUFyQixFQUEwQixFQUExQixDQURZLEVBRWJPLENBQUMsQ0FBQyxpQkFBRCxFQUFvQlAsQ0FBQyxDQUFDLENBQUQsQ0FBckIsRUFBMEIsQ0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBRixDQUFGLEVBQVFBLENBQUMsQ0FBQyxDQUFDLENBQUYsQ0FBVCxDQUExQixDQUZZLEVBR2JPLENBQUMsQ0FBQyxpQkFBRCxFQUFvQlAsQ0FBQyxDQUFDLENBQUQsQ0FBckIsRUFBMEIsQ0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBRixDQUFGLEVBQVFBLENBQUMsQ0FBQyxDQUFDLENBQUYsQ0FBVCxDQUExQixDQUhZLEVBSWJPLENBQUMsQ0FBQyxpQkFBRCxFQUFvQlAsQ0FBQyxDQUFDLENBQUQsQ0FBckIsRUFBMEIsQ0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBRixDQUFGLEVBQVFBLENBQUMsQ0FBQyxDQUFDLENBQUYsRUFBSyxDQUFMLEVBQVFRLEdBQVIsQ0FBVCxDQUExQixDQUpZLENBQWpCO0FBT0EsTUFBTUUsWUFBc0IsR0FBRyxFQUEvQjs7QUFFQSxLQUFLLElBQUlDLElBQVQsSUFBaUJGLFFBQWpCLEVBQTJCO0FBQ3ZCQyxFQUFBQSxZQUFZLENBQUNFLElBQWIsQ0FBa0JDLElBQUksQ0FBQ0MsU0FBTCxDQUFlSCxJQUFmLENBQWxCO0FBQ0g7O0FBRURJLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjTixZQUFkLEVBQ0ksT0FESixFQUVLTyxRQUFELElBQWM7QUFDVixRQUFNVixDQUFXLEdBQUdNLElBQUksQ0FBQ0ssS0FBTCxDQUFXRCxRQUFYLENBQXBCO0FBQ0FFLEVBQUFBLElBQUksQ0FBQ1osQ0FBQyxDQUFDWCxlQUFGLEdBQW9CLGFBQXJCLEVBQW9DLE1BQU07QUFDMUMsVUFBTXdCLE1BQU0sR0FBRyxvQ0FBZTtBQUFFQyxNQUFBQSxXQUFXLEVBQUVkLENBQUMsQ0FBQ1QsTUFBakI7QUFBeUJDLE1BQUFBLFVBQVUsRUFBRVEsQ0FBQyxDQUFDUjtBQUF2QyxLQUFmLENBQWY7QUFDQXVCLElBQUFBLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDbkIsVUFBUixDQUFOLENBQTBCc0IsSUFBMUIsQ0FBK0JoQixDQUFDLENBQUNWLGFBQUYsQ0FBZ0JJLFVBQS9DO0FBQ0gsR0FIRyxDQUFKO0FBS0gsQ0FUTCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbGN1bGF0ZVNjb3JlIH0gZnJvbSBcIi4uL2NhbGN1bGF0ZVNjb3JlXCI7XHJcbmltcG9ydCB7IFNjb3JlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvU2NvcmVcIjtcclxuaW1wb3J0IHsgQWZmZWN0cyB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0FmZmVjdHNcIjtcclxuXHJcbmNsYXNzIFRlc3REYXRhIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyB0ZXN0RGVzY3JpcHRpb246IHN0cmluZyA9IFwiVGVzdFwiLFxyXG4gICAgICAgIHB1YmxpYyBleHBlY3RlZFNjb3JlOiBTY29yZSxcclxuICAgICAgICBwdWJsaWMgc2NvcmVzOiBTY29yZVtdID0gW10sXHJcbiAgICAgICAgcHVibGljIHJldmVyc2libGU6IGJvb2xlYW4gPSBmYWxzZSxcclxuICAgICkge1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzKGNvbmZpZGVuY2U6IG51bWJlciA9IDEsIHJlbGV2YW5jZTogbnVtYmVyID0gMSwgcHJvOiBib29sZWFuID0gdHJ1ZSwgYWZmZWN0czogQWZmZWN0cyA9IFwiY29uZmlkZW5jZVwiKTogU2NvcmUge1xyXG4gICAgcmV0dXJuIG5ldyBTY29yZShcIlwiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgcHJvLCBhZmZlY3RzLCBjb25maWRlbmNlLCByZWxldmFuY2UpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0KHRlc3REZXNjcmlwdGlvbjogc3RyaW5nLCBleHBlY3RlZFNjb3JlOiBTY29yZSwgc2NvcmVzOiBTY29yZVtdLCByZXZlcnNpYmxlOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgIHJldHVybiBuZXcgVGVzdERhdGEodGVzdERlc2NyaXB0aW9uLCBleHBlY3RlZFNjb3JlLCBzY29yZXMsIHJldmVyc2libGUpXHJcbn1cclxuXHJcbmNvbnN0IHBybyA9IHRydWU7XHJcbmNvbnN0IGNvbiA9IGZhbHNlO1xyXG5cclxuY29uc3QgdGVzdERhdGEgPSBbXHJcbiAgICB0KFwibm8gc2NvcmVzID0gMSAgXCIsIHMoMSksIFtdKSxcclxuICAgIHQoXCIxIGFuZCAxID0gMSAgICBcIiwgcygxKSwgW3MoKzEpLCBzKCsxKV0pLFxyXG4gICAgdChcIjEgYW5kIC0xID0gMCAgIFwiLCBzKDApLCBbcygrMSksIHMoLTEpXSksXHJcbiAgICB0KFwicHJvIGFuZCBjb24gPSAwXCIsIHMoMCksIFtzKCsxKSwgcygrMSwgMSwgY29uKV0pLFxyXG5dXHJcblxyXG5jb25zdCBKc29uVGVzdERhdGE6IHN0cmluZ1tdID0gW107XHJcblxyXG5mb3IgKGxldCBkYXRhIG9mIHRlc3REYXRhKSB7XHJcbiAgICBKc29uVGVzdERhdGEucHVzaChKU09OLnN0cmluZ2lmeShkYXRhKSlcclxufVxyXG5cclxuZGVzY3JpYmUuZWFjaChKc29uVGVzdERhdGEpKFxyXG4gICAgJ1Rlc3RzJyxcclxuICAgICh0ZXN0SnNvbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHQ6IFRlc3REYXRhID0gSlNPTi5wYXJzZSh0ZXN0SnNvbik7XHJcbiAgICAgICAgdGVzdCh0LnRlc3REZXNjcmlwdGlvbiArICcgQ29uZmlkZW5jZScsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FsY3VsYXRlU2NvcmUoeyBjaGlsZFNjb3JlczogdC5zY29yZXMsIHJldmVyc2libGU6IHQucmV2ZXJzaWJsZSB9KTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5jb25maWRlbmNlKS50b0JlKHQuZXhwZWN0ZWRTY29yZS5jb25maWRlbmNlKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0sXHJcbik7XHJcblxyXG4iXX0=
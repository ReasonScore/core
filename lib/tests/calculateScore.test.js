"use strict";

var _calculateScore = require("../calculateScore");

var _Score = require("../dataModels/Score");

class TestData {
  constructor(testDescription = "Test", expectedScore, scores = [], reversible = false) {
    this.testDescription = testDescription;
    this.expectedScore = expectedScore;
    this.scores = scores;
    this.reversible = reversible;
  }

}

function s(confidence = 1, relevance = 1, pro = true, affects = "confidence") {
  return new _Score.Score("", "", "", undefined, undefined, pro, affects, confidence, relevance);
}

function t(testDescription, expectedScore, scores, reversible = false) {
  return new TestData(testDescription, expectedScore, scores, reversible);
}

const pro = true;
const con = false;
const testData = [t("no scores = 1  ", s(1), []), t("1 and 1 = 1    ", s(1), [s(+1), s(+1)]), t("1 and -1 = 0   ", s(0), [s(+1), s(-1)]), t("pro and con = 0", s(0), [s(+1), s(+1, 1, con)]), t("pro and con with relevance", s(0.3333333333333333), [s(+1, 2), s(+1, 1, con)]), t("1 Relevance = 2", s(1, 2), [s(+1, 1, pro, "relevance")])];
const JsonTestData = [];

for (let data of testData) {
  JsonTestData.push(JSON.stringify(data));
}

describe.each(JsonTestData)('Tests', testJson => {
  const t = JSON.parse(testJson);
  test(t.testDescription + ' Confidence', () => {
    const result = (0, _calculateScore.calculateScore)({
      childScores: t.scores,
      reversible: t.reversible
    });
    expect(result.confidence).toBe(t.expectedScore.confidence);

    if (result.relevance != undefined) {
      expect(result.relevance).toBe(t.expectedScore.relevance);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9jYWxjdWxhdGVTY29yZS50ZXN0LnRzIl0sIm5hbWVzIjpbIlRlc3REYXRhIiwiY29uc3RydWN0b3IiLCJ0ZXN0RGVzY3JpcHRpb24iLCJleHBlY3RlZFNjb3JlIiwic2NvcmVzIiwicmV2ZXJzaWJsZSIsInMiLCJjb25maWRlbmNlIiwicmVsZXZhbmNlIiwicHJvIiwiYWZmZWN0cyIsIlNjb3JlIiwidW5kZWZpbmVkIiwidCIsImNvbiIsInRlc3REYXRhIiwiSnNvblRlc3REYXRhIiwiZGF0YSIsInB1c2giLCJKU09OIiwic3RyaW5naWZ5IiwiZGVzY3JpYmUiLCJlYWNoIiwidGVzdEpzb24iLCJwYXJzZSIsInRlc3QiLCJyZXN1bHQiLCJjaGlsZFNjb3JlcyIsImV4cGVjdCIsInRvQmUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBR0EsTUFBTUEsUUFBTixDQUFlO0FBQ1hDLEVBQUFBLFdBQVcsQ0FDQUMsZUFBdUIsR0FBRyxNQUQxQixFQUVBQyxhQUZBLEVBR0FDLE1BQWUsR0FBRyxFQUhsQixFQUlBQyxVQUFtQixHQUFHLEtBSnRCLEVBS1Q7QUFBQSxTQUpTSCxlQUlULEdBSlNBLGVBSVQ7QUFBQSxTQUhTQyxhQUdULEdBSFNBLGFBR1Q7QUFBQSxTQUZTQyxNQUVULEdBRlNBLE1BRVQ7QUFBQSxTQURTQyxVQUNULEdBRFNBLFVBQ1Q7QUFDRDs7QUFQVTs7QUFVZixTQUFTQyxDQUFULENBQVdDLFVBQWtCLEdBQUcsQ0FBaEMsRUFBbUNDLFNBQWlCLEdBQUcsQ0FBdkQsRUFBMERDLEdBQVksR0FBRyxJQUF6RSxFQUErRUMsT0FBZ0IsR0FBRyxZQUFsRyxFQUF1SDtBQUNuSCxTQUFPLElBQUlDLFlBQUosQ0FBVSxFQUFWLEVBQWMsRUFBZCxFQUFrQixFQUFsQixFQUFzQkMsU0FBdEIsRUFBaUNBLFNBQWpDLEVBQTRDSCxHQUE1QyxFQUFpREMsT0FBakQsRUFBMERILFVBQTFELEVBQXNFQyxTQUF0RSxDQUFQO0FBQ0g7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U2NvcmVcIjtcclxuaW1wb3J0IHsgU2NvcmUgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9TY29yZVwiO1xyXG5pbXBvcnQgeyBBZmZlY3RzIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQWZmZWN0c1wiO1xyXG5cclxuY2xhc3MgVGVzdERhdGEge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIHRlc3REZXNjcmlwdGlvbjogc3RyaW5nID0gXCJUZXN0XCIsXHJcbiAgICAgICAgcHVibGljIGV4cGVjdGVkU2NvcmU6IFNjb3JlLFxyXG4gICAgICAgIHB1YmxpYyBzY29yZXM6IFNjb3JlW10gPSBbXSxcclxuICAgICAgICBwdWJsaWMgcmV2ZXJzaWJsZTogYm9vbGVhbiA9IGZhbHNlLFxyXG4gICAgKSB7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHMoY29uZmlkZW5jZTogbnVtYmVyID0gMSwgcmVsZXZhbmNlOiBudW1iZXIgPSAxLCBwcm86IGJvb2xlYW4gPSB0cnVlLCBhZmZlY3RzOiBBZmZlY3RzID0gXCJjb25maWRlbmNlXCIpOiBTY29yZSB7XHJcbiAgICByZXR1cm4gbmV3IFNjb3JlKFwiXCIsIFwiXCIsIFwiXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBwcm8sIGFmZmVjdHMsIGNvbmZpZGVuY2UsIHJlbGV2YW5jZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHQodGVzdERlc2NyaXB0aW9uOiBzdHJpbmcsIGV4cGVjdGVkU2NvcmU6IFNjb3JlLCBzY29yZXM6IFNjb3JlW10sIHJldmVyc2libGU6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgcmV0dXJuIG5ldyBUZXN0RGF0YSh0ZXN0RGVzY3JpcHRpb24sIGV4cGVjdGVkU2NvcmUsIHNjb3JlcywgcmV2ZXJzaWJsZSlcclxufVxyXG5cclxuY29uc3QgcHJvID0gdHJ1ZTtcclxuY29uc3QgY29uID0gZmFsc2U7XHJcblxyXG5jb25zdCB0ZXN0RGF0YSA9IFtcclxuICAgIHQoXCJubyBzY29yZXMgPSAxICBcIiwgcygxKSwgW10pLFxyXG4gICAgdChcIjEgYW5kIDEgPSAxICAgIFwiLCBzKDEpLCBbcygrMSksIHMoKzEpXSksXHJcbiAgICB0KFwiMSBhbmQgLTEgPSAwICAgXCIsIHMoMCksIFtzKCsxKSwgcygtMSldKSxcclxuICAgIHQoXCJwcm8gYW5kIGNvbiA9IDBcIiwgcygwKSwgW3MoKzEpLCBzKCsxLCAxLCBjb24pXSksXHJcbiAgICB0KFwicHJvIGFuZCBjb24gd2l0aCByZWxldmFuY2VcIiwgcygwLjMzMzMzMzMzMzMzMzMzMzMpLCBbcygrMSwgMiksIHMoKzEsIDEsIGNvbildKSxcclxuICAgIHQoXCIxIFJlbGV2YW5jZSA9IDJcIiwgcygxLCAyKSwgW3MoKzEsIDEsIHBybywgXCJyZWxldmFuY2VcIildKSxcclxuXVxyXG5cclxuY29uc3QgSnNvblRlc3REYXRhOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuZm9yIChsZXQgZGF0YSBvZiB0ZXN0RGF0YSkge1xyXG4gICAgSnNvblRlc3REYXRhLnB1c2goSlNPTi5zdHJpbmdpZnkoZGF0YSkpXHJcbn1cclxuXHJcbmRlc2NyaWJlLmVhY2goSnNvblRlc3REYXRhKShcclxuICAgICdUZXN0cycsXHJcbiAgICAodGVzdEpzb24pID0+IHtcclxuICAgICAgICBjb25zdCB0OiBUZXN0RGF0YSA9IEpTT04ucGFyc2UodGVzdEpzb24pO1xyXG4gICAgICAgIHRlc3QodC50ZXN0RGVzY3JpcHRpb24gKyAnIENvbmZpZGVuY2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbGN1bGF0ZVNjb3JlKHsgY2hpbGRTY29yZXM6IHQuc2NvcmVzLCByZXZlcnNpYmxlOiB0LnJldmVyc2libGUgfSk7XHJcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuY29uZmlkZW5jZSkudG9CZSh0LmV4cGVjdGVkU2NvcmUuY29uZmlkZW5jZSlcclxuICAgICAgICAgICAgaWYgKHJlc3VsdC5yZWxldmFuY2UgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBleHBlY3QocmVzdWx0LnJlbGV2YW5jZSkudG9CZSh0LmV4cGVjdGVkU2NvcmUucmVsZXZhbmNlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSxcclxuKTtcclxuXHJcbiJdfQ==
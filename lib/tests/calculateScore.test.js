"use strict";

var _calculateScore = require("../calculateScore");

var _Score = require("../dataModels/Score");

class TestData {
  constructor(testDescription = "Test", expectedScore, scores = [], reversible = false) {
    this.testDescription = testDescription;
    this.expectedScore = expectedScore;
    this.scores = scores;
    this.reversible = reversible;
  }

}

const u = undefined;

function s(confidence = 1, relevance = 1, pro = true, affects = "confidence", reversible = false) {
  return new _Score.Score("", "", "", u, reversible, pro, affects, confidence, relevance);
}

function t(testDescription, expectedScore, scores, reversible = false) {
  return new TestData(testDescription, expectedScore, scores, reversible);
}

const pro = true;
const con = false;
const testData = [t("no scores   =  1  ", s(1), []), t("1 and 1     =  1    ", s(1), [s(+1), s(+1)]), t(" 1 and -1   =  1 ", s(1), [s(+1), s(-1)]), t("-1          =  0 ", s(0), [s(-1)]), t(" 1 and -1r  =  0 ", s(0), [s(+1), s(-1, u, u, u, true)]), t("-1r         = -1 ", s(-1), [s(-1, u, u, u, true)]), t("pro and con =  0", s(0), [s(+1), s(+1, u, con)]), t("1 Relevance =  2", s(1, 2), [s(+1, 1, pro, "relevance")]), t("pro and con with relevance", s(0.3333333333333333), [s(+1, 2), s(+1, 1, con)])];
const JsonTestData = [];

for (let data of testData) {
  JsonTestData.push(JSON.stringify(data));
}

describe.each(JsonTestData)('Tests', testJson => {
  const t = JSON.parse(testJson);
  test(t.testDescription + ' Confidence', () => {
    const result = (0, _calculateScore.calculateScore)({
      childScores: t.scores,
      reversible: t.reversible
    });
    expect(result.confidence).toBe(t.expectedScore.confidence);

    if (result.relevance != undefined) {
      expect(result.relevance).toBe(t.expectedScore.relevance);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9jYWxjdWxhdGVTY29yZS50ZXN0LnRzIl0sIm5hbWVzIjpbIlRlc3REYXRhIiwiY29uc3RydWN0b3IiLCJ0ZXN0RGVzY3JpcHRpb24iLCJleHBlY3RlZFNjb3JlIiwic2NvcmVzIiwicmV2ZXJzaWJsZSIsInUiLCJ1bmRlZmluZWQiLCJzIiwiY29uZmlkZW5jZSIsInJlbGV2YW5jZSIsInBybyIsImFmZmVjdHMiLCJTY29yZSIsInQiLCJjb24iLCJ0ZXN0RGF0YSIsIkpzb25UZXN0RGF0YSIsImRhdGEiLCJwdXNoIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlc2NyaWJlIiwiZWFjaCIsInRlc3RKc29uIiwicGFyc2UiLCJ0ZXN0IiwicmVzdWx0IiwiY2hpbGRTY29yZXMiLCJleHBlY3QiLCJ0b0JlIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUdBLE1BQU1BLFFBQU4sQ0FBZTtBQUNYQyxFQUFBQSxXQUFXLENBQ0FDLGVBQXVCLEdBQUcsTUFEMUIsRUFFQUMsYUFGQSxFQUdBQyxNQUFlLEdBQUcsRUFIbEIsRUFJQUMsVUFBbUIsR0FBRyxLQUp0QixFQUtUO0FBQUEsU0FKU0gsZUFJVCxHQUpTQSxlQUlUO0FBQUEsU0FIU0MsYUFHVCxHQUhTQSxhQUdUO0FBQUEsU0FGU0MsTUFFVCxHQUZTQSxNQUVUO0FBQUEsU0FEU0MsVUFDVCxHQURTQSxVQUNUO0FBQ0Q7O0FBUFU7O0FBU2YsTUFBTUMsQ0FBQyxHQUFHQyxTQUFWOztBQUNBLFNBQVNDLENBQVQsQ0FBV0MsVUFBa0IsR0FBRyxDQUFoQyxFQUFtQ0MsU0FBaUIsR0FBRyxDQUF2RCxFQUNJQyxHQUFZLEdBQUcsSUFEbkIsRUFDeUJDLE9BQWdCLEdBQUcsWUFENUMsRUFDMERQLFVBQW1CLEdBQUcsS0FEaEYsRUFDOEY7QUFDMUYsU0FBTyxJQUFJUSxZQUFKLENBQVUsRUFBVixFQUFjLEVBQWQsRUFBa0IsRUFBbEIsRUFBc0JQLENBQXRCLEVBQXlCRCxVQUF6QixFQUFxQ00s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QixFQUFvQyxNQUFNO0FBQzFDLFVBQU15QixNQUFNLEdBQUcsb0NBQWU7QUFBRUMsTUFBQUEsV0FBVyxFQUFFZCxDQUFDLENBQUNWLE1BQWpCO0FBQXlCQyxNQUFBQSxVQUFVLEVBQUVTLENBQUMsQ0FBQ1Q7QUFBdkMsS0FBZixDQUFmO0FBQ0F3QixJQUFBQSxNQUFNLENBQUNGLE1BQU0sQ0FBQ2xCLFVBQVIsQ0FBTixDQUEwQnFCLElBQTFCLENBQStCaEIsQ0FBQyxDQUFDWCxhQUFGLENBQWdCTSxVQUEvQzs7QUFDQSxRQUFJa0IsTUFBTSxDQUFDakIsU0FBUCxJQUFvQkgsU0FBeEIsRUFBbUM7QUFDL0JzQixNQUFBQSxNQUFNLENBQUNGLE1BQU0sQ0FBQ2pCLFNBQVIsQ0FBTixDQUF5Qm9CLElBQXpCLENBQThCaEIsQ0FBQyxDQUFDWCxhQUFGLENBQWdCTyxTQUE5QztBQUNIO0FBQ0osR0FORyxDQUFKO0FBUUgsQ0FaTCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbGN1bGF0ZVNjb3JlIH0gZnJvbSBcIi4uL2NhbGN1bGF0ZVNjb3JlXCI7XHJcbmltcG9ydCB7IFNjb3JlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvU2NvcmVcIjtcclxuaW1wb3J0IHsgQWZmZWN0cyB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0FmZmVjdHNcIjtcclxuXHJcbmNsYXNzIFRlc3REYXRhIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyB0ZXN0RGVzY3JpcHRpb246IHN0cmluZyA9IFwiVGVzdFwiLFxyXG4gICAgICAgIHB1YmxpYyBleHBlY3RlZFNjb3JlOiBTY29yZSxcclxuICAgICAgICBwdWJsaWMgc2NvcmVzOiBTY29yZVtdID0gW10sXHJcbiAgICAgICAgcHVibGljIHJldmVyc2libGU6IGJvb2xlYW4gPSBmYWxzZSxcclxuICAgICkge1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IHUgPSB1bmRlZmluZWQ7XHJcbmZ1bmN0aW9uIHMoY29uZmlkZW5jZTogbnVtYmVyID0gMSwgcmVsZXZhbmNlOiBudW1iZXIgPSAxLFxyXG4gICAgcHJvOiBib29sZWFuID0gdHJ1ZSwgYWZmZWN0czogQWZmZWN0cyA9IFwiY29uZmlkZW5jZVwiLCByZXZlcnNpYmxlOiBib29sZWFuID0gZmFsc2UpOiBTY29yZSB7XHJcbiAgICByZXR1cm4gbmV3IFNjb3JlKFwiXCIsIFwiXCIsIFwiXCIsIHUsIHJldmVyc2libGUsIHBybywgYWZmZWN0cywgY29uZmlkZW5jZSwgcmVsZXZhbmNlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdCh0ZXN0RGVzY3JpcHRpb246IHN0cmluZywgZXhwZWN0ZWRTY29yZTogU2NvcmUsIHNjb3JlczogU2NvcmVbXSwgcmV2ZXJzaWJsZTogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICByZXR1cm4gbmV3IFRlc3REYXRhKHRlc3REZXNjcmlwdGlvbiwgZXhwZWN0ZWRTY29yZSwgc2NvcmVzLCByZXZlcnNpYmxlKVxyXG59XHJcblxyXG5jb25zdCBwcm8gPSB0cnVlO1xyXG5jb25zdCBjb24gPSBmYWxzZTtcclxuXHJcbmNvbnN0IHRlc3REYXRhID0gW1xyXG4gICAgdChcIm5vIHNjb3JlcyAgID0gIDEgIFwiLCBzKDEpLCBbXSksXHJcbiAgICB0KFwiMSBhbmQgMSAgICAgPSAgMSAgICBcIiwgcygxKSwgW3MoKzEpLCBzKCsxKV0pLFxyXG4gICAgdChcIiAxIGFuZCAtMSAgID0gIDEgXCIsIHMoMSksIFtzKCsxKSwgcygtMSldKSxcclxuICAgIHQoXCItMSAgICAgICAgICA9ICAwIFwiLCBzKDApLCBbcygtMSldKSxcclxuICAgIHQoXCIgMSBhbmQgLTFyICA9ICAwIFwiLCBzKDApLCBbcygrMSksIHMoLTEsdSx1LHUsdHJ1ZSldKSxcclxuICAgIHQoXCItMXIgICAgICAgICA9IC0xIFwiLCBzKC0xKSwgW3MoLTEsdSx1LHUsdHJ1ZSldKSxcclxuICAgIHQoXCJwcm8gYW5kIGNvbiA9ICAwXCIsIHMoMCksIFtzKCsxKSwgcygrMSwgdSwgY29uKV0pLFxyXG4gICAgdChcIjEgUmVsZXZhbmNlID0gIDJcIiwgcygxLCAyKSwgW3MoKzEsIDEsIHBybywgXCJyZWxldmFuY2VcIildKSxcclxuICAgIHQoXCJwcm8gYW5kIGNvbiB3aXRoIHJlbGV2YW5jZVwiLCBzKDAuMzMzMzMzMzMzMzMzMzMzMyksIFtzKCsxLCAyKSwgcygrMSwgMSwgY29uKV0pLFxyXG5dXHJcblxyXG5jb25zdCBKc29uVGVzdERhdGE6IHN0cmluZ1tdID0gW107XHJcblxyXG5mb3IgKGxldCBkYXRhIG9mIHRlc3REYXRhKSB7XHJcbiAgICBKc29uVGVzdERhdGEucHVzaChKU09OLnN0cmluZ2lmeShkYXRhKSlcclxufVxyXG5cclxuZGVzY3JpYmUuZWFjaChKc29uVGVzdERhdGEpKFxyXG4gICAgJ1Rlc3RzJyxcclxuICAgICh0ZXN0SnNvbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHQ6IFRlc3REYXRhID0gSlNPTi5wYXJzZSh0ZXN0SnNvbik7XHJcbiAgICAgICAgdGVzdCh0LnRlc3REZXNjcmlwdGlvbiArICcgQ29uZmlkZW5jZScsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FsY3VsYXRlU2NvcmUoeyBjaGlsZFNjb3JlczogdC5zY29yZXMsIHJldmVyc2libGU6IHQucmV2ZXJzaWJsZSB9KTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5jb25maWRlbmNlKS50b0JlKHQuZXhwZWN0ZWRTY29yZS5jb25maWRlbmNlKVxyXG4gICAgICAgICAgICBpZiAocmVzdWx0LnJlbGV2YW5jZSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGV4cGVjdChyZXN1bHQucmVsZXZhbmNlKS50b0JlKHQuZXhwZWN0ZWRTY29yZS5yZWxldmFuY2UpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9LFxyXG4pO1xyXG5cclxuIl19
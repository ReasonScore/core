"use strict";

var _CalculationInitiator = require("../CalculationInitiator");

var _Change = require("../dataModels/Change");

var _Claim = require("../dataModels/Claim");

var _Id = require("../dataModels/Id");

var _ClaimEdge = require("../dataModels/ClaimEdge");

var _Repository = require("../Repository");

var _Affects = require("../dataModels/Affects");

var _ = require("..");

test('claim without any edges should have score of 1', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var claim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("0"));
  calcInitator.notify([new _Change.Change(claim)]);
  expect(repo.getScoreBySourceClaimId(claim.id).sourceClaimId).toBe(claim.id);
  expect(repo.getScoreBySourceClaimId(claim.id).confidence).toBe(1);
  expect(repo.log.length).toBe(2);
});
test('claim with two con descendants should have a confidence of 0', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var measuredClaim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("measuredClaim"));
  var childClaim1 = new _Claim.Claim("Child Claim 1", (0, _Id.ID)("childClaim1"));
  var descendantClaim = new _Claim.Claim("Descendant Claim", (0, _Id.ID)("descendantClaim"));
  calcInitator.notify([new _Change.Change(measuredClaim), new _Change.Change(childClaim1), new _Change.Change(descendantClaim), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim1.id, _Affects.Affects.Confidence, false)), new _Change.Change(new _ClaimEdge.ClaimEdge(childClaim1.id, descendantClaim.id, _Affects.Affects.Confidence, false))]);
  expect(repo.getScoreBySourceClaimId(measuredClaim.id).confidence).toBe(0);
});
test('claim with two con descendants and other children should have a confidence of 1', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var measuredClaim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("measuredClaim"));
  var childClaim1 = new _Claim.Claim("Child Claim 1", (0, _Id.ID)("childClaim1"));
  var childClaim2 = new _Claim.Claim("Child Claim 2", (0, _Id.ID)("childClaim2"));
  var descendantClaim = new _Claim.Claim("Descendant Claim", (0, _Id.ID)("descendantClaim"));
  calcInitator.notify([new _Change.Change(measuredClaim), new _Change.Change(childClaim1), new _Change.Change(descendantClaim), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim1.id, _Affects.Affects.Confidence, false)), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim2.id, _Affects.Affects.Confidence, true)), new _Change.Change(new _ClaimEdge.ClaimEdge(childClaim1.id, descendantClaim.id, _Affects.Affects.Confidence, false))]);
  expect(repo.getScoreBySourceClaimId(measuredClaim.id).confidence).toBe(1);
});
test('Multiple children calculation', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var measuredClaim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("measuredClaim"));
  var childClaim1 = new _Claim.Claim("Child Claim 1", (0, _Id.ID)("childClaim1"));
  var childClaim2 = new _Claim.Claim("Child Claim 2", (0, _Id.ID)("childClaim2"));
  var descendantClaim = new _Claim.Claim("Descendant Claim", (0, _Id.ID)("descendantClaim"));
  calcInitator.notify([new _Change.Change(measuredClaim), new _Change.Change(childClaim1), new _Change.Change(childClaim2), new _Change.Change(descendantClaim), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim1.id, _Affects.Affects.Confidence, false)), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim2.id, _Affects.Affects.Confidence, false)), new _Change.Change(new _ClaimEdge.ClaimEdge(childClaim1.id, descendantClaim.id, _Affects.Affects.Confidence, false))]);
  expect(repo.getScoreBySourceClaimId(measuredClaim.id).confidence).toBe(0);
});
test('Default Not Reversible', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var measuredClaim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("measuredClaim"));
  var childClaim1 = new _Claim.Claim("Child Claim 1", (0, _Id.ID)("childClaim1"));
  calcInitator.notify([new _Change.Change(measuredClaim), new _Change.Change(childClaim1), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim1.id, _Affects.Affects.Confidence, false))]);
  expect(repo.getScoreBySourceClaimId(measuredClaim.id).confidence).toBe(0);
});
test('Reversible', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var measuredClaim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("measuredClaim"), undefined, undefined, undefined, true);
  var childClaim1 = new _Claim.Claim("Child Claim 1", (0, _Id.ID)("childClaim1"));
  calcInitator.notify([new _Change.Change(measuredClaim), new _Change.Change(childClaim1), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim1.id, _Affects.Affects.Confidence, false))]);
  expect(repo.getScoreBySourceClaimId(measuredClaim.id).confidence).toBe(-1);
});
test('Weird test case', function () {
  var repo = new _Repository.Repository();
  var messenger = new _.Messenger();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo, messenger.notify);
  var topClaim = new _Claim.Claim("Fiction City should convert Elm Street to only pedestrian traffic?", (0, _Id.ID)("1"));
  var increaseBusiness = new _Claim.Claim("The planning commission estimates this will increase foot traffic to local shops by 12% during peak hours.", (0, _Id.ID)("2"));
  var increaseTraffic = new _Claim.Claim("This will result in traffic being diverted down residential streets.", (0, _Id.ID)("Traffic"));
  var childSafety = new _Claim.Claim("Children safety is more important than profit for local shops.");
  var newStreet = new _Claim.Claim("A set of railroad tracks are no longer in use and the City can convert that to a new street.");
  var costs = new _Claim.Claim("The conversion will cost 2 Million dollars.");
  var payoff = new _Claim.Claim("The increase in revenue is expected to pay off the expense in under 2 years meeting the cities investment requirements.");
  var testEdgeId = (0, _Id.ID)("TestEdge");
  calcInitator.notify([new _Change.Change(topClaim), new _Change.Change(increaseBusiness), new _Change.Change(new _ClaimEdge.ClaimEdge(topClaim.id, increaseBusiness.id, _Affects.Affects.Confidence, true)), new _Change.Change(increaseTraffic), new _Change.Change(new _ClaimEdge.ClaimEdge(topClaim.id, increaseTraffic.id, _Affects.Affects.Confidence, false, testEdgeId)), new _Change.Change(childSafety), new _Change.Change(new _ClaimEdge.ClaimEdge(increaseTraffic.id, childSafety.id, _Affects.Affects.Relevance, true)), new _Change.Change(newStreet), new _Change.Change(new _ClaimEdge.ClaimEdge(increaseTraffic.id, newStreet.id, _Affects.Affects.Confidence, false)), new _Change.Change(costs), new _Change.Change(new _ClaimEdge.ClaimEdge(topClaim.id, costs.id, _Affects.Affects.Confidence, false)), new _Change.Change(payoff), new _Change.Change(new _ClaimEdge.ClaimEdge(increaseBusiness.id, payoff.id, _Affects.Affects.Relevance, true))]);
  expect(repo.getScoreBySourceClaimId(topClaim.id).confidence).toBe(0.3333333333333333);
  calcInitator.notify([new _Change.Change(increaseTraffic), // Sending in a claim resets it's score to 1 incorrectly
  new _Change.Change(new _ClaimEdge.ClaimEdge(topClaim.id, increaseTraffic.id, _Affects.Affects.Confidence, true, testEdgeId))]);
  expect(repo.getScoreBySourceClaimId(topClaim.id).confidence).toBe(0.3333333333333333);
  calcInitator.notify([new _Change.Change(new _ClaimEdge.ClaimEdge(topClaim.id, increaseTraffic.id, _Affects.Affects.Confidence, false, testEdgeId))]);
  expect(repo.getScoreBySourceClaimId(topClaim.id).confidence).toBe(0.3333333333333333);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
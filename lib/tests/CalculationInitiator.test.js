"use strict";

var _CalculationInitiator = require("../CalculationInitiator");

var _Change = require("../dataModels/Change");

var _Claim = require("../dataModels/Claim");

var _Id = require("../dataModels/Id");

var _ClaimEdge = require("../dataModels/ClaimEdge");

var _Repository = require("../Repository");

var _Affects = require("../dataModels/Affects");

test('claim without any edges should have score of 1', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var claim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("0"));
  calcInitator.notify([new _Change.Change(claim)]);
  expect(repo.getScoreBySourceClaimId(claim.id).sourceClaimId).toBe(claim.id);
  expect(repo.getScoreBySourceClaimId(claim.id).confidence).toBe(1);
});
test('claim with two con descendants should have a confidence of 0', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var measuredClaim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("measuredClaim"));
  var childClaim1 = new _Claim.Claim("Child Claim 1", (0, _Id.ID)("childClaim1"));
  var descendantClaim = new _Claim.Claim("Descendant Claim", (0, _Id.ID)("descendantClaim"));
  calcInitator.notify([new _Change.Change(measuredClaim), new _Change.Change(childClaim1), new _Change.Change(descendantClaim), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim1.id, _Affects.Affects.Confidence, false)), new _Change.Change(new _ClaimEdge.ClaimEdge(childClaim1.id, descendantClaim.id, _Affects.Affects.Confidence, false))]);
  expect(repo.getScoreBySourceClaimId(measuredClaim.id).confidence).toBe(0);
});
test('claim with two con descendants and other children should have a confidence of 1', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var measuredClaim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("measuredClaim"));
  var childClaim1 = new _Claim.Claim("Child Claim 1", (0, _Id.ID)("childClaim1"));
  var childClaim2 = new _Claim.Claim("Child Claim 2", (0, _Id.ID)("childClaim2"));
  var descendantClaim = new _Claim.Claim("Descendant Claim", (0, _Id.ID)("descendantClaim"));
  calcInitator.notify([new _Change.Change(measuredClaim), new _Change.Change(childClaim1), new _Change.Change(descendantClaim), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim1.id, _Affects.Affects.Confidence, false)), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim2.id, _Affects.Affects.Confidence, true)), new _Change.Change(new _ClaimEdge.ClaimEdge(childClaim1.id, descendantClaim.id, _Affects.Affects.Confidence, false))]);
  expect(repo.getScoreBySourceClaimId(measuredClaim.id).confidence).toBe(1);
});
test('Multiple children calculation', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var measuredClaim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("measuredClaim"));
  var childClaim1 = new _Claim.Claim("Child Claim 1", (0, _Id.ID)("childClaim1"));
  var childClaim2 = new _Claim.Claim("Child Claim 2", (0, _Id.ID)("childClaim2"));
  var descendantClaim = new _Claim.Claim("Descendant Claim", (0, _Id.ID)("descendantClaim"));
  calcInitator.notify([new _Change.Change(measuredClaim), new _Change.Change(childClaim1), new _Change.Change(childClaim2), new _Change.Change(descendantClaim), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim1.id, _Affects.Affects.Confidence, false)), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim2.id, _Affects.Affects.Confidence, false)), new _Change.Change(new _ClaimEdge.ClaimEdge(childClaim1.id, descendantClaim.id, _Affects.Affects.Confidence, false))]);
  expect(repo.getScoreBySourceClaimId(measuredClaim.id).confidence).toBe(0);
});
test('Default Not Reversable', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var measuredClaim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("measuredClaim"));
  var childClaim1 = new _Claim.Claim("Child Claim 1", (0, _Id.ID)("childClaim1"));
  calcInitator.notify([new _Change.Change(measuredClaim), new _Change.Change(childClaim1), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim1.id, _Affects.Affects.Confidence, false))]);
  expect(repo.getScoreBySourceClaimId(measuredClaim.id).confidence).toBe(0);
});
test('Reversable', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var measuredClaim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("measuredClaim"), undefined, undefined, undefined, true);
  var childClaim1 = new _Claim.Claim("Child Claim 1", (0, _Id.ID)("childClaim1"));
  calcInitator.notify([new _Change.Change(measuredClaim), new _Change.Change(childClaim1), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim1.id, _Affects.Affects.Confidence, false))]);
  expect(repo.getScoreBySourceClaimId(measuredClaim.id).confidence).toBe(-1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
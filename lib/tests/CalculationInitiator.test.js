"use strict";

var _CalculationInitiator = require("../CalculationInitiator");

var _Change = require("../dataModels/Change");

var _Claim = require("../dataModels/Claim");

var _Id = require("../dataModels/Id");

var _ClaimEdge = require("../dataModels/ClaimEdge");

var _Repository = require("../Repository");

var _Affects = require("../dataModels/Affects");

test('claim without any edges should have score of 1', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var claim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("0"));
  calcInitator.notify([new _Change.Change(claim)]);
  expect(repo.getScoreBySourceClaimId(claim.id).sourceClaimId).toBe(claim.id);
  expect(repo.getScoreBySourceClaimId(claim.id).confidence).toBe(1);
});
test('claim with one con child should have confidence of -1', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var measuredClaim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("MeasuredClaim"));
  var childClaim = new _Claim.Claim("Child Claim", (0, _Id.ID)("ChildClaim"));
  calcInitator.notify([new _Change.Change(measuredClaim), new _Change.Change(childClaim), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim.id, _Affects.Affects.Confidence, false))]);
  expect(repo.getScoreBySourceClaimId(measuredClaim.id).confidence).toBe(-1);
});
test('claim with two con descendants should have a confidence of 1', function () {
  var repo = new _Repository.Repository();
  var calcInitator = new _CalculationInitiator.CalculationInitator(repo);
  var measuredClaim = new _Claim.Claim("Measured Claim", (0, _Id.ID)("measuredClaim"));
  var childClaim = new _Claim.Claim("Child Claim", (0, _Id.ID)("childClaim"));
  var descendantClaim = new _Claim.Claim("Descendant Claim", (0, _Id.ID)("descendantClaim"));
  calcInitator.notify([new _Change.Change(measuredClaim), new _Change.Change(childClaim), new _Change.Change(descendantClaim), new _Change.Change(new _ClaimEdge.ClaimEdge(measuredClaim.id, childClaim.id, _Affects.Affects.Confidence, false)), new _Change.Change(new _ClaimEdge.ClaimEdge(childClaim.id, descendantClaim.id, _Affects.Affects.Confidence, false))]);
  expect(repo.getScoreBySourceClaimId(measuredClaim.id).confidence).toBe(1);
  debugger;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9DYWxjdWxhdGlvbkluaXRpYXRvci50ZXN0LnRzIl0sIm5hbWVzIjpbInRlc3QiLCJyZXBvIiwiUmVwb3NpdG9yeSIsImNhbGNJbml0YXRvciIsIkNhbGN1bGF0aW9uSW5pdGF0b3IiLCJjbGFpbSIsIkNsYWltIiwibm90aWZ5IiwiQ2hhbmdlIiwiZXhwZWN0IiwiZ2V0U2NvcmVCeVNvdXJjZUNsYWltSWQiLCJpZCIsInNvdXJjZUNsYWltSWQiLCJ0b0JlIiwiY29uZmlkZW5jZSIsIm1lYXN1cmVkQ2xhaW0iLCJjaGlsZENsYWltIiwiQ2xhaW1FZGdlIiwiQWZmZWN0cyIsIkNvbmZpZGVuY2UiLCJkZXNjZW5kYW50Q2xhaW0iXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0FBLElBQUksQ0FBQyxnREFBRCxFQUFtRCxZQUFNO0FBQ3pELE1BQU1DLElBQUksR0FBRyxJQUFJQyxzQkFBSixFQUFiO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLElBQUlDLHlDQUFKLENBQXdCSCxJQUF4QixDQUFyQjtBQUNBLE1BQU1JLEtBQUssR0FBRyxJQUFJQyxZQUFKLENBQVUsZ0JBQVYsRUFBNEIsWUFBRyxHQUFILENBQTVCLENBQWQ7QUFDQUgsRUFBQUEsWUFBWSxDQUFDSSxNQUFiLENBQW9CLENBQ2hCLElBQUlDLGNBQUosQ0FBV0gsS0FBWCxDQURnQixDQUFwQjtBQUdBSSxFQUFBQSxNQUFNLENBQUNSLElBQUksQ0FBQ1MsdUJBQUwsQ0FBNkJMLEtBQUssQ0FBQ00sRUFBbkMsRUFBdUNDLGFBQXhDLENBQU4sQ0FBNkRDLElBQTdELENBQWtFUixLQUFLLENBQUNNLEVBQXhFO0FBQ0FGLEVBQUFBLE1BQU0sQ0FBQ1IsSUFBSSxDQUFDUyx1QkFBTCxDQUE2QkwsS0FBSyxDQUFDTSxFQUFuQyxFQUF1Q0csVUFBeEMsQ0FBTixDQUEwREQsSUFBMUQsQ0FBK0QsQ0FBL0Q7QUFFSCxDQVZHLENBQUo7QUFZQWIsSUFBSSxDQUFDLHVEQUFELEVBQTBELFlBQU07QUFDaEUsTUFBTUMsSUFBSSxHQUFHLElBQUlDLHNCQUFKLEVBQWI7QUFDQSxNQUFNQyxZQUFZLEdBQUcsSUFBSUMseUNBQUosQ0FBd0JILElBQXhCLENBQXJCO0FBQ0EsTUFBTWMsYUFBYSxHQUFHLElBQUlULFlBQUosQ0FBVSxnQkFBVixFQUE0QixZQUFHLGVBQUgsQ0FBNUIsQ0FBdEI7QUFDQSxNQUFNVSxVQUFVLEdBQUcsSUFBSVYsWUFBSixDQUFVLGFBQVYsRUFBeUIsWUFBRyxZQUFILENBQXpCLENBQW5CO0FBQ0FILEVBQUFBLFlBQVksQ0FBQ0ksTUFBYixDQUFvQixDQUNoQixJQUFJQyxjQUFKLENBQVdPLGFBQVgsQ0FEZ0IsRUFFaEIsSUFBSVAsY0FBSixDQUFXUSxVQUFYLENBRmdCLEVBR2hCLElBQUlSLGNBQUosQ0FBVyxJQUFJUyxvQkFBSixDQUFjRixhQUFhLENBQUNKLEVBQTVCLEVBQStCSyxVQUFVLENBQUNMLEVBQTFDLEVBQTZDTyxpQkFBUUMsVUFBckQsRUFBZ0UsS0FBaEUsQ0FBWCxDQUhnQixDQUFwQjtBQUtBVixFQUFBQSxNQUFNLENBQUNSLElBQUksQ0FBQ1MsdUJBQUwsQ0FBNkJLLGFBQWEsQ0FBQ0osRUFBM0MsRUFBK0NHLFVBQWhELENBQU4sQ0FBa0VELElBQWxFLENBQXVFLENBQUMsQ0FBeEU7QUFDSCxDQVhHLENBQUo7QUFhQWIsSUFBSSxDQUFDLDhEQUFELEVBQWlFLFlBQU07QUFDdkUsTUFBTUMsSUFBSSxHQUFHLElBQUlDLHNCQUFKLEVBQWI7QUFDQSxNQUFNQyxZQUFZLEdBQUcsSUFBSUMseUNBQUosQ0FBd0JILElBQXhCLENBQXJCO0FBQ0EsTUFBTWMsYUFBYSxHQUFHLElBQUlULFlBQUosQ0FBVSxnQkFBVixFQUE0QixZQUFHLGVBQUgsQ0FBNUIsQ0FBdEI7QUFDQSxNQUFNVSxVQUFVLEdBQUcsSUFBSVYsWUFBSixDQUFVLGFBQVYsRUFBeUIsWUFBRyxZQUFILENBQXpCLENBQW5CO0FBQ0EsTUFBTWMsZUFBZSxHQUFHLElBQUlkLFlBQUosQ0FBVSxrQkFBVixFQUE4QixZQUFHLGlCQUFILENBQTlCLENBQXhCO0FBQ0FILEVBQUFBLFlBQVksQ0FBQ0ksTUFBYixDQUFvQixDQUNoQixJQUFJQyxjQUFKLENBQVdPLGFBQVgsQ0FEZ0IsRUFFaEIsSUFBSVAsY0FBSixDQUFXUSxVQUFYLENBRmdCLEVBR2hCLElBQUlSLGNBQUosQ0FBV1ksZUFBWCxDQUhnQixFQUloQixJQUFJWixjQUFKLENBQVcsSUFBSVMsb0JBQUosQ0FBY0YsYUFBYSxDQUFDSixFQUE1QixFQUErQkssVUFBVSxDQUFDTCxFQUExQyxFQUE2Q08saUJBQVFDLFVBQXJELEVBQWdFLEtBQWhFLENBQVgsQ0FKZ0IsRUFLaEIsSUFBSVgsY0FBSixDQUFXLElBQUlTLG9CQUFKLENBQWNELFVBQVUsQ0FBQ0wsRUFBekIsRUFBNEJTLGVBQWUsQ0FBQ1QsRUFBNUMsRUFBK0NPLGlCQUFRQyxVQUF2RCxFQUFrRSxLQUFsRSxDQUFYLENBTGdCLENBQXBCO0FBT0FWLEVBQUFBLE1BQU0sQ0FBQ1IsSUFBSSxDQUFDUyx1QkFBTCxDQUE2QkssYUFBYSxDQUFDSixFQUEzQyxFQUErQ0csVUFBaEQsQ0FBTixDQUFrRUQsSUFBbEUsQ0FBdUUsQ0FBdkU7QUFDQTtBQUNILENBZkcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbGN1bGF0aW9uSW5pdGF0b3IgfSBmcm9tIFwiLi4vQ2FsY3VsYXRpb25Jbml0aWF0b3JcIjtcclxuaW1wb3J0IHsgQ2hhbmdlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQ2hhbmdlXCI7XHJcbmltcG9ydCB7IENsYWltIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQ2xhaW1cIjtcclxuaW1wb3J0IHsgSUQgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9JZFwiO1xyXG5pbXBvcnQgeyBDbGFpbUVkZ2UgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9DbGFpbUVkZ2VcIjtcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gXCIuLi9SZXBvc2l0b3J5XCI7XHJcbmltcG9ydCB7IEFmZmVjdHMgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9BZmZlY3RzXCI7XHJcblxyXG5cclxudGVzdCgnY2xhaW0gd2l0aG91dCBhbnkgZWRnZXMgc2hvdWxkIGhhdmUgc2NvcmUgb2YgMScsICgpID0+IHtcclxuICAgIGNvbnN0IHJlcG8gPSBuZXcgUmVwb3NpdG9yeSgpO1xyXG4gICAgY29uc3QgY2FsY0luaXRhdG9yID0gbmV3IENhbGN1bGF0aW9uSW5pdGF0b3IocmVwbyk7XHJcbiAgICBjb25zdCBjbGFpbSA9IG5ldyBDbGFpbShcIk1lYXN1cmVkIENsYWltXCIsIElEKFwiMFwiKSk7XHJcbiAgICBjYWxjSW5pdGF0b3Iubm90aWZ5KFtcclxuICAgICAgICBuZXcgQ2hhbmdlKGNsYWltKSxcclxuICAgIF0pO1xyXG4gICAgZXhwZWN0KHJlcG8uZ2V0U2NvcmVCeVNvdXJjZUNsYWltSWQoY2xhaW0uaWQpLnNvdXJjZUNsYWltSWQpLnRvQmUoY2xhaW0uaWQpO1xyXG4gICAgZXhwZWN0KHJlcG8uZ2V0U2NvcmVCeVNvdXJjZUNsYWltSWQoY2xhaW0uaWQpLmNvbmZpZGVuY2UpLnRvQmUoMSk7XHJcblxyXG59KTtcclxuXHJcbnRlc3QoJ2NsYWltIHdpdGggb25lIGNvbiBjaGlsZCBzaG91bGQgaGF2ZSBjb25maWRlbmNlIG9mIC0xJywgKCkgPT4ge1xyXG4gICAgY29uc3QgcmVwbyA9IG5ldyBSZXBvc2l0b3J5KCk7XHJcbiAgICBjb25zdCBjYWxjSW5pdGF0b3IgPSBuZXcgQ2FsY3VsYXRpb25Jbml0YXRvcihyZXBvKTtcclxuICAgIGNvbnN0IG1lYXN1cmVkQ2xhaW0gPSBuZXcgQ2xhaW0oXCJNZWFzdXJlZCBDbGFpbVwiLCBJRChcIk1lYXN1cmVkQ2xhaW1cIikpO1xyXG4gICAgY29uc3QgY2hpbGRDbGFpbSA9IG5ldyBDbGFpbShcIkNoaWxkIENsYWltXCIsIElEKFwiQ2hpbGRDbGFpbVwiKSk7XHJcbiAgICBjYWxjSW5pdGF0b3Iubm90aWZ5KFtcclxuICAgICAgICBuZXcgQ2hhbmdlKG1lYXN1cmVkQ2xhaW0pLFxyXG4gICAgICAgIG5ldyBDaGFuZ2UoY2hpbGRDbGFpbSksXHJcbiAgICAgICAgbmV3IENoYW5nZShuZXcgQ2xhaW1FZGdlKG1lYXN1cmVkQ2xhaW0uaWQsY2hpbGRDbGFpbS5pZCxBZmZlY3RzLkNvbmZpZGVuY2UsZmFsc2UpKSxcclxuICAgXSk7XHJcbiAgICBleHBlY3QocmVwby5nZXRTY29yZUJ5U291cmNlQ2xhaW1JZChtZWFzdXJlZENsYWltLmlkKS5jb25maWRlbmNlKS50b0JlKC0xKTtcclxufSk7XHJcblxyXG50ZXN0KCdjbGFpbSB3aXRoIHR3byBjb24gZGVzY2VuZGFudHMgc2hvdWxkIGhhdmUgYSBjb25maWRlbmNlIG9mIDEnLCAoKSA9PiB7XHJcbiAgICBjb25zdCByZXBvID0gbmV3IFJlcG9zaXRvcnkoKTtcclxuICAgIGNvbnN0IGNhbGNJbml0YXRvciA9IG5ldyBDYWxjdWxhdGlvbkluaXRhdG9yKHJlcG8pO1xyXG4gICAgY29uc3QgbWVhc3VyZWRDbGFpbSA9IG5ldyBDbGFpbShcIk1lYXN1cmVkIENsYWltXCIsIElEKFwibWVhc3VyZWRDbGFpbVwiKSk7XHJcbiAgICBjb25zdCBjaGlsZENsYWltID0gbmV3IENsYWltKFwiQ2hpbGQgQ2xhaW1cIiwgSUQoXCJjaGlsZENsYWltXCIpKTtcclxuICAgIGNvbnN0IGRlc2NlbmRhbnRDbGFpbSA9IG5ldyBDbGFpbShcIkRlc2NlbmRhbnQgQ2xhaW1cIiwgSUQoXCJkZXNjZW5kYW50Q2xhaW1cIikpO1xyXG4gICAgY2FsY0luaXRhdG9yLm5vdGlmeShbXHJcbiAgICAgICAgbmV3IENoYW5nZShtZWFzdXJlZENsYWltKSxcclxuICAgICAgICBuZXcgQ2hhbmdlKGNoaWxkQ2xhaW0pLFxyXG4gICAgICAgIG5ldyBDaGFuZ2UoZGVzY2VuZGFudENsYWltKSxcclxuICAgICAgICBuZXcgQ2hhbmdlKG5ldyBDbGFpbUVkZ2UobWVhc3VyZWRDbGFpbS5pZCxjaGlsZENsYWltLmlkLEFmZmVjdHMuQ29uZmlkZW5jZSxmYWxzZSkpLFxyXG4gICAgICAgIG5ldyBDaGFuZ2UobmV3IENsYWltRWRnZShjaGlsZENsYWltLmlkLGRlc2NlbmRhbnRDbGFpbS5pZCxBZmZlY3RzLkNvbmZpZGVuY2UsZmFsc2UpKSxcclxuICAgXSk7XHJcbiAgICBleHBlY3QocmVwby5nZXRTY29yZUJ5U291cmNlQ2xhaW1JZChtZWFzdXJlZENsYWltLmlkKS5jb25maWRlbmNlKS50b0JlKDEpO1xyXG4gICAgZGVidWdnZXI7XHJcbn0pOyJdfQ==
"use strict";

var _RepositoryLocalPure = require("../repositories/RepositoryLocalPure");

var _calculateScoreActions = require("../calculateScoreActions");

var _calculateScore = require("../calculateScore");

var _Claim = require("../dataModels/Claim");

var _Action = require("../dataModels/Action");

var _ClaimEdge = require("../dataModels/ClaimEdge");

var _Score = require("../dataModels/Score");

//import { RepositoryLocalReactive } from "../repositories/RepositoryLocalReactive";
const u = undefined;
test('add a new scoretree', async () => {
  const repository = new _RepositoryLocalPure.RepositoryLocalPure(); // Add a new claim and set it as a score tree top

  const newScore = new _Score.Score("testClaim", "testClaim");
  const result = await (0, _calculateScoreActions.calculateScoreActions)({
    actions: [new _Action.Action(new _Claim.Claim("", "testClaim"), undefined, "add_claim", "testClaim"), new _Action.Action(newScore, undefined, "add_score", newScore.id)],
    repository: repository,
    calculator: _calculateScore.calculateScore
  });
  expect(repository.rsData.scoreIdsByClaimId["testClaim"].length).toEqual(1);
});
test('Add a child that does not change the top score', async () => {
  const repository = new _RepositoryLocalPure.RepositoryLocalPure();
  const temp = await (0, _calculateScoreActions.calculateScoreActions)({
    actions: [new _Action.Action(new _Claim.Claim("", "testClaim"), undefined, "add_claim"), new _Action.Action(new _Score.Score("testClaim", "testClaim", u, u, u, u, u, u, u, "newScore"), undefined, "add_score"), new _Action.Action(new _Claim.Claim("", "ChildClaim1"), undefined, "add_claim")],
    repository: repository
  });
  const result = await (0, _calculateScoreActions.calculateScoreActions)({
    actions: [new _Action.Action(new _ClaimEdge.ClaimEdge("testClaim", "ChildClaim1"), undefined, "add_claimEdge")],
    repository: repository
  });
  expect(result).toMatchObject([{
    "newData": {
      "sourceClaimId": "ChildClaim1",
      "reversible": false,
      "pro": true,
      "affects": "confidence",
      "confidence": 1,
      "relevance": 1,
      "parentScoreId": "newScore" //"dataId": "Ya3ZeuTmGUZq"

    },
    "oldData": undefined,
    "type": "add_score" //"dataId": "Ya3ZeuTmGUZq"

  }]);
});
test('Add a child that reverses the top score', async () => {
  const repository = new _RepositoryLocalPure.RepositoryLocalPure();
  const temp = await (0, _calculateScoreActions.calculateScoreActions)({
    actions: [new _Action.Action(new _Claim.Claim("", "testClaim"), undefined, "add_claim"), new _Action.Action(new _Score.Score("testClaim", "testClaim", u, u, u, u, u, u, u, "newScore"), undefined, "add_score"), new _Action.Action(new _Claim.Claim("", "ChildClaim1"), undefined, "add_claim")],
    repository: repository
  });
  const result = await (0, _calculateScoreActions.calculateScoreActions)({
    actions: [new _Action.Action(new _ClaimEdge.ClaimEdge("testClaim", "ChildClaim1", undefined, false, "ChildClaim1Edge"), undefined, "add_claimEdge")],
    repository: repository,
    calculator: _calculateScore.calculateScore
  });
  expect(result).toMatchObject([{
    "newData": {
      "sourceClaimId": "ChildClaim1",
      "reversible": false,
      "pro": false,
      "affects": "confidence",
      "confidence": 1,
      "relevance": 1,
      "parentScoreId": "newScore" //"dataId": "Ya3ZeuTmGUZq"

    },
    "oldData": undefined,
    "type": "add_score" //"dataId": "Ya3ZeuTmGUZq"

  }, {
    "newData": {
      "sourceClaimId": "testClaim",
      "parentScoreId": undefined,
      "reversible": false,
      "pro": true,
      "affects": "confidence",
      "confidence": 0,
      "relevance": 1 //"id": "Y9ZapFMMg0Bf"

    },
    "oldData": undefined,
    "type": "modify_score" //"dataId": "Ya3ZeuTmGUZq"

  }]);
});
test('Reverse Scores 2 levels', async () => {
  const repository = new _RepositoryLocalPure.RepositoryLocalPure();
  const temp = await (0, _calculateScoreActions.calculateScoreActions)({
    actions: [new _Action.Action(new _Claim.Claim("", "testClaim"), undefined, "add_claim"), new _Action.Action(new _Score.Score("testClaim", "testClaim", u, u, u, u, u, 0, u, "newScore"), undefined, "add_score"), new _Action.Action(new _Claim.Claim("", "ChildClaim1"), undefined, "add_claim"), new _Action.Action(new _Claim.Claim("", "ChildClaim2"), undefined, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("testClaim", "ChildClaim1", undefined, false, "ChildClaim1Edge"), undefined, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("testClaim", "ChildClaim2", undefined, true, "ChildClaim2Edge"), undefined, "add_claimEdge"), new _Action.Action(new _Claim.Claim("", "grandChild1"), undefined, "add_claim")],
    repository: repository
  });
  const result = await (0, _calculateScoreActions.calculateScoreActions)({
    actions: [new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild1", undefined, false, "GrandChildClaim1Edge"), undefined, "add_claimEdge")],
    repository: repository,
    calculator: _calculateScore.calculateScore
  });
  debugger;
  expect(result).toMatchObject([{
    "newData": {
      "sourceClaimId": "grandChild1",
      "topScoreId": "newScore",
      "sourceEdgeId": "GrandChildClaim1Edge",
      "reversible": false,
      "pro": false,
      "affects": "confidence",
      "confidence": 1,
      "relevance": 1
    },
    "type": "add_score"
  }, {
    "newData": {
      "sourceClaimId": "ChildClaim1",
      "topScoreId": "newScore",
      "parentScoreId": "newScore",
      "sourceEdgeId": "ChildClaim1Edge",
      "reversible": false,
      "pro": false,
      "affects": "confidence",
      "confidence": 0,
      "relevance": 1
    },
    "type": "modify_score"
  }, {
    "newData": {
      "sourceClaimId": "testClaim",
      "topScoreId": "testClaim",
      "reversible": false,
      "pro": true,
      "affects": "confidence",
      "confidence": 1,
      "relevance": 1,
      "id": "newScore"
    },
    "type": "modify_score",
    "dataId": "newScore"
  }]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9jYWxjdWxhdGVTY29yZUFjdGlvbnMudGVzdC50cyJdLCJuYW1lcyI6WyJ1IiwidW5kZWZpbmVkIiwidGVzdCIsInJlcG9zaXRvcnkiLCJSZXBvc2l0b3J5TG9jYWxQdXJlIiwibmV3U2NvcmUiLCJTY29yZSIsInJlc3VsdCIsImFjdGlvbnMiLCJBY3Rpb24iLCJDbGFpbSIsImlkIiwiY2FsY3VsYXRvciIsImNhbGN1bGF0ZVNjb3JlIiwiZXhwZWN0IiwicnNEYXRhIiwic2NvcmVJZHNCeUNsYWltSWQiLCJsZW5ndGgiLCJ0b0VxdWFsIiwidGVtcCIsIkNsYWltRWRnZSIsInRvTWF0Y2hPYmplY3QiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7QUFFQSxNQUFNQSxDQUFDLEdBQUdDLFNBQVY7QUFFQUMsSUFBSSxDQUFDLHFCQUFELEVBQXdCLFlBQVk7QUFDdEMsUUFBTUMsVUFBVSxHQUFHLElBQUlDLHdDQUFKLEVBQW5CLENBRHNDLENBRXRDOztBQUNBLFFBQU1DLFFBQVEsR0FBRyxJQUFJQyxZQUFKLENBQVUsV0FBVixFQUFzQixXQUF0QixDQUFqQjtBQUNBLFFBQU1DLE1BQU0sR0FBRyxNQUFNLGtEQUFzQjtBQUN6Q0MsSUFBQUEsT0FBTyxFQUFFLENBQ1AsSUFBSUMsY0FBSixDQUFXLElBQUlDLFlBQUosQ0FBVSxFQUFWLEVBQWMsV0FBZCxDQUFYLEVBQXVDVCxTQUF2QyxFQUFrRCxXQUFsRCxFQUErRCxXQUEvRCxDQURPLEVBRVAsSUFBSVEsY0FBSixDQUFXSixRQUFYLEVBQXFCSixTQUFyQixFQUFnQyxXQUFoQyxFQUE2Q0ksUUFBUSxDQUFDTSxFQUF0RCxDQUZPLENBRGdDO0FBS3pDUixJQUFBQSxVQUFVLEVBQUVBLFVBTDZCO0FBTXpDUyxJQUFBQSxVQUFVLEVBQUVDO0FBTjZCLEdBQXRCLENBQXJCO0FBU0FDLEVBQUFBLE1BQU0sQ0FBQ1gsVUFBVSxD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QixHQUF0QixDQUFyQjtBQU9GO0FBQ0VDLEVBQUFBLE1BQU0sQ0FBQ1AsTUFBRCxDQUFOLENBQWVjLGFBQWYsQ0FDRSxDQUNFO0FBQ0UsZUFBVztBQUNULHVCQUFpQixhQURSO0FBRVQsb0JBQWMsVUFGTDtBQUdULHNCQUFnQixzQkFIUDtBQUlULG9CQUFjLEtBSkw7QUFLVCxhQUFPLEtBTEU7QUFNVCxpQkFBVyxZQU5GO0FBT1Qsb0JBQWMsQ0FQTDtBQVFULG1CQUFhO0FBUkosS0FEYjtBQVdFLFlBQVE7QUFYVixHQURGLEVBY0U7QUFDRSxlQUFXO0FBQ1QsdUJBQWlCLGFBRFI7QUFFVCxvQkFBYyxVQUZMO0FBR1QsdUJBQWlCLFVBSFI7QUFJVCxzQkFBZ0IsaUJBSlA7QUFLVCxvQkFBYyxLQUxMO0FBTVQsYUFBTyxLQU5FO0FBT1QsaUJBQVcsWUFQRjtBQVFULG9CQUFjLENBUkw7QUFTVCxtQkFBYTtBQVRKLEtBRGI7QUFZRSxZQUFRO0FBWlYsR0FkRixFQTRCRTtBQUNFLGVBQVc7QUFDVCx1QkFBaUIsV0FEUjtBQUVULG9CQUFjLFdBRkw7QUFHVCxvQkFBYyxLQUhMO0FBSVQsYUFBTyxJQUpFO0FBS1QsaUJBQVcsWUFMRjtBQU1ULG9CQUFjLENBTkw7QUFPVCxtQkFBYSxDQVBKO0FBUVQsWUFBTTtBQVJHLEtBRGI7QUFXRSxZQUFRLGNBWFY7QUFZRSxjQUFVO0FBWlosR0E1QkYsQ0FERjtBQThDRCxDQXJFRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVwb3NpdG9yeUxvY2FsUHVyZSB9IGZyb20gXCIuLi9yZXBvc2l0b3JpZXMvUmVwb3NpdG9yeUxvY2FsUHVyZVwiO1xyXG5pbXBvcnQgeyBjYWxjdWxhdGVTY29yZUFjdGlvbnMgfSBmcm9tIFwiLi4vY2FsY3VsYXRlU2NvcmVBY3Rpb25zXCI7XHJcbmltcG9ydCB7IGNhbGN1bGF0ZVNjb3JlIH0gZnJvbSBcIi4uL2NhbGN1bGF0ZVNjb3JlXCI7XHJcbmltcG9ydCB7IENsYWltIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQ2xhaW1cIjtcclxuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQWN0aW9uXCI7XHJcbmltcG9ydCB7IENsYWltRWRnZSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0NsYWltRWRnZVwiO1xyXG5pbXBvcnQgeyBTY29yZSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL1Njb3JlXCI7XHJcbi8vaW1wb3J0IHsgUmVwb3NpdG9yeUxvY2FsUmVhY3RpdmUgfSBmcm9tIFwiLi4vcmVwb3NpdG9yaWVzL1JlcG9zaXRvcnlMb2NhbFJlYWN0aXZlXCI7XHJcblxyXG5jb25zdCB1ID0gdW5kZWZpbmVkO1xyXG5cclxudGVzdCgnYWRkIGEgbmV3IHNjb3JldHJlZScsIGFzeW5jICgpID0+IHtcclxuICBjb25zdCByZXBvc2l0b3J5ID0gbmV3IFJlcG9zaXRvcnlMb2NhbFB1cmUoKTtcclxuICAvLyBBZGQgYSBuZXcgY2xhaW0gYW5kIHNldCBpdCBhcyBhIHNjb3JlIHRyZWUgdG9wXHJcbiAgY29uc3QgbmV3U2NvcmUgPSBuZXcgU2NvcmUoXCJ0ZXN0Q2xhaW1cIixcInRlc3RDbGFpbVwiKTtcclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxjdWxhdGVTY29yZUFjdGlvbnMoe1xyXG4gICAgYWN0aW9uczogW1xyXG4gICAgICBuZXcgQWN0aW9uKG5ldyBDbGFpbShcIlwiLCBcInRlc3RDbGFpbVwiKSwgdW5kZWZpbmVkLCBcImFkZF9jbGFpbVwiLCBcInRlc3RDbGFpbVwiKSxcclxuICAgICAgbmV3IEFjdGlvbihuZXdTY29yZSwgdW5kZWZpbmVkLCBcImFkZF9zY29yZVwiLCBuZXdTY29yZS5pZClcclxuICAgIF0sXHJcbiAgICByZXBvc2l0b3J5OiByZXBvc2l0b3J5LFxyXG4gICAgY2FsY3VsYXRvcjogY2FsY3VsYXRlU2NvcmVcclxuICB9KVxyXG5cclxuICBleHBlY3QocmVwb3NpdG9yeS5yc0RhdGEuc2NvcmVJZHNCeUNsYWltSWRbXCJ0ZXN0Q2xhaW1cIl0ubGVuZ3RoKS50b0VxdWFsKDEpXHJcbn0pO1xyXG5cclxudGVzdCgnQWRkIGEgY2hpbGQgdGhhdCBkb2VzIG5vdCBjaGFuZ2UgdGhlIHRvcCBzY29yZScsIGFzeW5jICgpID0+IHtcclxuICBjb25zdCByZXBvc2l0b3J5ID0gbmV3IFJlcG9zaXRvcnlMb2NhbFB1cmUoKTtcclxuICBjb25zdCB0ZW1wID0gYXdhaXQgY2FsY3VsYXRlU2NvcmVBY3Rpb25zKHtcclxuICAgIGFjdGlvbnM6IFtcclxuICAgICAgbmV3IEFjdGlvbihuZXcgQ2xhaW0oXCJcIiwgXCJ0ZXN0Q2xhaW1cIiksIHVuZGVmaW5lZCwgXCJhZGRfY2xhaW1cIiksXHJcbiAgICAgIG5ldyBBY3Rpb24obmV3IFNjb3JlKFwidGVzdENsYWltXCIsXCJ0ZXN0Q2xhaW1cIiwgdSwgdSwgdSwgdSwgdSwgdSwgdSwgXCJuZXdTY29yZVwiKSwgdW5kZWZpbmVkLCBcImFkZF9zY29yZVwiKSxcclxuICAgICAgbmV3IEFjdGlvbihuZXcgQ2xhaW0oXCJcIiwgXCJDaGlsZENsYWltMVwiKSwgdW5kZWZpbmVkLCBcImFkZF9jbGFpbVwiKSxcclxuICAgIF0sXHJcbiAgICByZXBvc2l0b3J5OiByZXBvc2l0b3J5XHJcbiAgfSlcclxuXHJcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsY3VsYXRlU2NvcmVBY3Rpb25zKHtcclxuICAgIGFjdGlvbnM6IFtcclxuICAgICAgbmV3IEFjdGlvbihuZXcgQ2xhaW1FZGdlKFwidGVzdENsYWltXCIsIFwiQ2hpbGRDbGFpbTFcIiksIHVuZGVmaW5lZCwgXCJhZGRfY2xhaW1FZGdlXCIpXHJcbiAgICBdLFxyXG4gICAgcmVwb3NpdG9yeTogcmVwb3NpdG9yeVxyXG4gIH0pXHJcbiAgXHJcbiAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaE9iamVjdChcclxuICAgIFtcclxuICAgICAge1xyXG4gICAgICAgIFwibmV3RGF0YVwiOlxyXG4gICAgICAgIHtcclxuICAgICAgICAgIFwic291cmNlQ2xhaW1JZFwiOiBcIkNoaWxkQ2xhaW0xXCIsXHJcbiAgICAgICAgICBcInJldmVyc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgICBcInByb1wiOiB0cnVlLFxyXG4gICAgICAgICAgXCJhZmZlY3RzXCI6IFwiY29uZmlkZW5jZVwiLFxyXG4gICAgICAgICAgXCJjb25maWRlbmNlXCI6IDEsXHJcbiAgICAgICAgICBcInJlbGV2YW5jZVwiOiAxLFxyXG4gICAgICAgICAgXCJwYXJlbnRTY29yZUlkXCI6IFwibmV3U2NvcmVcIlxyXG4gICAgICAgICAgLy9cImRhdGFJZFwiOiBcIllhM1pldVRtR1VacVwiXHJcbiAgICAgICAgfSwgXCJvbGREYXRhXCI6IHVuZGVmaW5lZCxcclxuICAgICAgICBcInR5cGVcIjogXCJhZGRfc2NvcmVcIixcclxuICAgICAgICAvL1wiZGF0YUlkXCI6IFwiWWEzWmV1VG1HVVpxXCJcclxuICAgICAgfVxyXG4gICAgXVxyXG4gIClcclxuXHJcbn0pO1xyXG5cclxudGVzdCgnQWRkIGEgY2hpbGQgdGhhdCByZXZlcnNlcyB0aGUgdG9wIHNjb3JlJywgYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IHJlcG9zaXRvcnkgPSBuZXcgUmVwb3NpdG9yeUxvY2FsUHVyZSgpO1xyXG4gIGNvbnN0IHRlbXAgPSBhd2FpdCBjYWxjdWxhdGVTY29yZUFjdGlvbnMoe1xyXG4gICAgYWN0aW9uczogW1xyXG4gICAgICBuZXcgQWN0aW9uKG5ldyBDbGFpbShcIlwiLCBcInRlc3RDbGFpbVwiKSwgdW5kZWZpbmVkLCBcImFkZF9jbGFpbVwiKSxcclxuICAgICAgbmV3IEFjdGlvbihuZXcgU2NvcmUoXCJ0ZXN0Q2xhaW1cIixcInRlc3RDbGFpbVwiLCB1LCB1LCB1LCB1LCB1LCB1LCB1LCBcIm5ld1Njb3JlXCIpLCB1bmRlZmluZWQsIFwiYWRkX3Njb3JlXCIpLFxyXG4gICAgICBuZXcgQWN0aW9uKG5ldyBDbGFpbShcIlwiLCBcIkNoaWxkQ2xhaW0xXCIpLCB1bmRlZmluZWQsIFwiYWRkX2NsYWltXCIpLFxyXG4gICAgXSxcclxuICAgIHJlcG9zaXRvcnk6IHJlcG9zaXRvcnlcclxuICB9KVxyXG5cclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxjdWxhdGVTY29yZUFjdGlvbnMoe1xyXG4gICAgYWN0aW9uczogW1xyXG4gICAgICBuZXcgQWN0aW9uKG5ldyBDbGFpbUVkZ2UoXCJ0ZXN0Q2xhaW1cIiwgXCJDaGlsZENsYWltMVwiLCB1bmRlZmluZWQsIGZhbHNlLCBcIkNoaWxkQ2xhaW0xRWRnZVwiKSwgdW5kZWZpbmVkLCBcImFkZF9jbGFpbUVkZ2VcIilcclxuICAgIF0sXHJcbiAgICByZXBvc2l0b3J5OiByZXBvc2l0b3J5LFxyXG4gICAgY2FsY3VsYXRvcjogY2FsY3VsYXRlU2NvcmVcclxuICB9KVxyXG5cclxuICBleHBlY3QocmVzdWx0KS50b01hdGNoT2JqZWN0KFxyXG4gICAgW1xyXG4gICAgICB7XHJcbiAgICAgICAgXCJuZXdEYXRhXCI6XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgXCJzb3VyY2VDbGFpbUlkXCI6IFwiQ2hpbGRDbGFpbTFcIixcclxuICAgICAgICAgIFwicmV2ZXJzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICAgIFwicHJvXCI6IGZhbHNlLFxyXG4gICAgICAgICAgXCJhZmZlY3RzXCI6IFwiY29uZmlkZW5jZVwiLFxyXG4gICAgICAgICAgXCJjb25maWRlbmNlXCI6IDEsXHJcbiAgICAgICAgICBcInJlbGV2YW5jZVwiOiAxLFxyXG4gICAgICAgICAgXCJwYXJlbnRTY29yZUlkXCI6IFwibmV3U2NvcmVcIlxyXG4gICAgICAgICAgLy9cImRhdGFJZFwiOiBcIllhM1pldVRtR1VacVwiXHJcbiAgICAgICAgfSwgXCJvbGREYXRhXCI6IHVuZGVmaW5lZCxcclxuICAgICAgICBcInR5cGVcIjogXCJhZGRfc2NvcmVcIixcclxuICAgICAgICAvL1wiZGF0YUlkXCI6IFwiWWEzWmV1VG1HVVpxXCJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwibmV3RGF0YVwiOlxyXG4gICAgICAgIHtcclxuICAgICAgICAgIFwic291cmNlQ2xhaW1JZFwiOiBcInRlc3RDbGFpbVwiLFxyXG4gICAgICAgICAgXCJwYXJlbnRTY29yZUlkXCI6IHVuZGVmaW5lZCxcclxuICAgICAgICAgIFwicmV2ZXJzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICAgIFwicHJvXCI6IHRydWUsXHJcbiAgICAgICAgICBcImFmZmVjdHNcIjogXCJjb25maWRlbmNlXCIsXHJcbiAgICAgICAgICBcImNvbmZpZGVuY2VcIjogMCxcclxuICAgICAgICAgIFwicmVsZXZhbmNlXCI6IDEsXHJcbiAgICAgICAgICAvL1wiaWRcIjogXCJZOVphcEZNTWcwQmZcIlxyXG4gICAgICAgIH0sIFwib2xkRGF0YVwiOiB1bmRlZmluZWQsXHJcbiAgICAgICAgXCJ0eXBlXCI6IFwibW9kaWZ5X3Njb3JlXCIsXHJcbiAgICAgICAgLy9cImRhdGFJZFwiOiBcIllhM1pldVRtR1VacVwiXHJcbiAgICAgIH1cclxuICAgIF1cclxuICApXHJcblxyXG59KTtcclxuXHJcbnRlc3QoJ1JldmVyc2UgU2NvcmVzIDIgbGV2ZWxzJywgYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IHJlcG9zaXRvcnkgPSBuZXcgUmVwb3NpdG9yeUxvY2FsUHVyZSgpO1xyXG4gIGNvbnN0IHRlbXAgPSBhd2FpdCBjYWxjdWxhdGVTY29yZUFjdGlvbnMoe1xyXG4gICAgYWN0aW9uczogW1xyXG4gICAgICBuZXcgQWN0aW9uKG5ldyBDbGFpbShcIlwiLCBcInRlc3RDbGFpbVwiKSwgdW5kZWZpbmVkLCBcImFkZF9jbGFpbVwiKSxcclxuICAgICAgbmV3IEFjdGlvbihuZXcgU2NvcmUoXCJ0ZXN0Q2xhaW1cIixcInRlc3RDbGFpbVwiLHUsIHUsIHUsIHUsIHUsIDAsIHUsIFwibmV3U2NvcmVcIiksIHVuZGVmaW5lZCwgXCJhZGRfc2NvcmVcIiksXHJcbiAgICAgIG5ldyBBY3Rpb24obmV3IENsYWltKFwiXCIsIFwiQ2hpbGRDbGFpbTFcIiksIHVuZGVmaW5lZCwgXCJhZGRfY2xhaW1cIiksXHJcbiAgICAgIG5ldyBBY3Rpb24obmV3IENsYWltKFwiXCIsIFwiQ2hpbGRDbGFpbTJcIiksIHVuZGVmaW5lZCwgXCJhZGRfY2xhaW1cIiksXHJcbiAgICAgIG5ldyBBY3Rpb24obmV3IENsYWltRWRnZShcInRlc3RDbGFpbVwiLCBcIkNoaWxkQ2xhaW0xXCIsIHVuZGVmaW5lZCwgZmFsc2UsIFwiQ2hpbGRDbGFpbTFFZGdlXCIpLCB1bmRlZmluZWQsIFwiYWRkX2NsYWltRWRnZVwiKSxcclxuICAgICAgbmV3IEFjdGlvbihuZXcgQ2xhaW1FZGdlKFwidGVzdENsYWltXCIsIFwiQ2hpbGRDbGFpbTJcIiwgdW5kZWZpbmVkLCB0cnVlLCBcIkNoaWxkQ2xhaW0yRWRnZVwiKSwgdW5kZWZpbmVkLCBcImFkZF9jbGFpbUVkZ2VcIiksXHJcbiAgICAgIG5ldyBBY3Rpb24obmV3IENsYWltKFwiXCIsIFwiZ3JhbmRDaGlsZDFcIiksIHVuZGVmaW5lZCwgXCJhZGRfY2xhaW1cIiksXHJcbiAgICBdLFxyXG4gICAgcmVwb3NpdG9yeTogcmVwb3NpdG9yeVxyXG4gIH0pXHJcbiAgXHJcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsY3VsYXRlU2NvcmVBY3Rpb25zKHtcclxuICAgIGFjdGlvbnM6IFtcclxuICAgICAgbmV3IEFjdGlvbihuZXcgQ2xhaW1FZGdlKFwiQ2hpbGRDbGFpbTFcIiwgXCJncmFuZENoaWxkMVwiLCB1bmRlZmluZWQsIGZhbHNlLCBcIkdyYW5kQ2hpbGRDbGFpbTFFZGdlXCIpLCB1bmRlZmluZWQsIFwiYWRkX2NsYWltRWRnZVwiKVxyXG4gICAgXSxcclxuICAgIHJlcG9zaXRvcnk6IHJlcG9zaXRvcnksXHJcbiAgICBjYWxjdWxhdG9yOiBjYWxjdWxhdGVTY29yZVxyXG4gIH0pXHJcbmRlYnVnZ2VyXHJcbiAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaE9iamVjdChcclxuICAgIFtcclxuICAgICAge1xyXG4gICAgICAgIFwibmV3RGF0YVwiOiB7XHJcbiAgICAgICAgICBcInNvdXJjZUNsYWltSWRcIjogXCJncmFuZENoaWxkMVwiLFxyXG4gICAgICAgICAgXCJ0b3BTY29yZUlkXCI6IFwibmV3U2NvcmVcIixcclxuICAgICAgICAgIFwic291cmNlRWRnZUlkXCI6IFwiR3JhbmRDaGlsZENsYWltMUVkZ2VcIixcclxuICAgICAgICAgIFwicmV2ZXJzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICAgIFwicHJvXCI6IGZhbHNlLFxyXG4gICAgICAgICAgXCJhZmZlY3RzXCI6IFwiY29uZmlkZW5jZVwiLFxyXG4gICAgICAgICAgXCJjb25maWRlbmNlXCI6IDEsXHJcbiAgICAgICAgICBcInJlbGV2YW5jZVwiOiAxLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJ0eXBlXCI6IFwiYWRkX3Njb3JlXCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBcIm5ld0RhdGFcIjoge1xyXG4gICAgICAgICAgXCJzb3VyY2VDbGFpbUlkXCI6IFwiQ2hpbGRDbGFpbTFcIixcclxuICAgICAgICAgIFwidG9wU2NvcmVJZFwiOiBcIm5ld1Njb3JlXCIsXHJcbiAgICAgICAgICBcInBhcmVudFNjb3JlSWRcIjogXCJuZXdTY29yZVwiLFxyXG4gICAgICAgICAgXCJzb3VyY2VFZGdlSWRcIjogXCJDaGlsZENsYWltMUVkZ2VcIixcclxuICAgICAgICAgIFwicmV2ZXJzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICAgIFwicHJvXCI6IGZhbHNlLFxyXG4gICAgICAgICAgXCJhZmZlY3RzXCI6IFwiY29uZmlkZW5jZVwiLFxyXG4gICAgICAgICAgXCJjb25maWRlbmNlXCI6IDAsXHJcbiAgICAgICAgICBcInJlbGV2YW5jZVwiOiAxLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJ0eXBlXCI6IFwibW9kaWZ5X3Njb3JlXCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBcIm5ld0RhdGFcIjoge1xyXG4gICAgICAgICAgXCJzb3VyY2VDbGFpbUlkXCI6IFwidGVzdENsYWltXCIsXHJcbiAgICAgICAgICBcInRvcFNjb3JlSWRcIjogXCJ0ZXN0Q2xhaW1cIixcclxuICAgICAgICAgIFwicmV2ZXJzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICAgIFwicHJvXCI6IHRydWUsXHJcbiAgICAgICAgICBcImFmZmVjdHNcIjogXCJjb25maWRlbmNlXCIsXHJcbiAgICAgICAgICBcImNvbmZpZGVuY2VcIjogMSxcclxuICAgICAgICAgIFwicmVsZXZhbmNlXCI6IDEsXHJcbiAgICAgICAgICBcImlkXCI6IFwibmV3U2NvcmVcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJ0eXBlXCI6IFwibW9kaWZ5X3Njb3JlXCIsXHJcbiAgICAgICAgXCJkYXRhSWRcIjogXCJuZXdTY29yZVwiXHJcbiAgICAgIH1cclxuICAgIF1cclxuICApXHJcblxyXG59KTtcclxuXHJcbiJdfQ==
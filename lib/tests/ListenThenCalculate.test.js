"use strict";

var _Repository = require("../Repository");

var _CalculationLooper = require("../CalculationLooper");

var _Change = require("../dataModels/Change");

var _Claim = require("../dataModels/Claim");

var _Id = require("../dataModels/Id");

var _ClaimEdge = require("../dataModels/ClaimEdge");

test('City 3000 1 level scope', function () {
  var repo = new _Repository.Repository();
  var calculationLoop = new _CalculationLooper.CalculationLooper(repo);
  calculationLoop.notify([new _Change.Change(new _Claim.Claim("Measured Claim", (0, _Id.ID)("0"))), new _Change.Change(new _Claim.Claim("Con with scope of X", (0, _Id.ID)("1"))), new _Change.Change(new _ClaimEdge.ClaimEdge((0, _Id.ID)("0"), (0, _Id.ID)("1"), (0, _Id.ID)("X"), undefined, false, (0, _Id.ID)("1-X"))), new _Change.Change(new _Claim.Claim("Con with scope of Y", (0, _Id.ID)("2"))), new _Change.Change(new _ClaimEdge.ClaimEdge((0, _Id.ID)("0"), (0, _Id.ID)("2"), (0, _Id.ID)("Y"), undefined, false, (0, _Id.ID)("2-Y")))]);
  expect(repo.getScoreByClaimIdAndScope((0, _Id.ID)("0"), (0, _Id.ID)("X")).confidence).toBe(-1);
  expect(repo.getScoreByClaimIdAndScope((0, _Id.ID)("0"), (0, _Id.ID)("Y")).confidence).toBe(-1);
  expect(repo.getScoreByClaimIdAndScope((0, _Id.ID)("0"), (0, _Id.ID)("0")).confidence).toBe(1); //Add one with a scope of x to the top and see if it gets the 0 scope or the x scope

  calculationLoop.notify([new _Change.Change(new _Claim.Claim("Top X Scope Claim", (0, _Id.ID)("-1"))), new _Change.Change(new _ClaimEdge.ClaimEdge((0, _Id.ID)("-1"), (0, _Id.ID)("0"), (0, _Id.ID)("X"), undefined, true, (0, _Id.ID)("2-Y")))]);
  debugger;
  expect(repo.getScoreByClaimIdAndScope((0, _Id.ID)("-1"), (0, _Id.ID)("X")).confidence).toBe(-1);
  expect(repo.getScoreByClaimIdAndScope((0, _Id.ID)("-1"), (0, _Id.ID)("-1")).confidence).toBe(-1);
}); // test('City 300 listen to changes then calculate', () => {
//     const repo = new Repository();
//     const calculationLoop = new CalculationLooper(repo);
//     calculationLoop.notify([new Change(new Claim("test", ID("2")))]);
//     expect(repo.getScoreByClaimIdAndScope(ID("2"), ID("2")).confidence).toBe(1);
//     calculationLoop.notify([new Change(new Claim("The City 3000 Plan is worth the investment", ID("2")))]);
//     expect(repo.items["2"].length).toBe(2);
//     calculationLoop.notify([
//         new Change(new Claim("The City 3000 plan is expensive", ID("4"))),
//         new Change(new ClaimEdge(ID("2"), ID("4"), ID("2"), undefined, false, ID("2-4"))),
//     ]);
//     expect(repo.getScoresByClaimId(ID("2"))[0].confidence).toBe(-1);
//     calculationLoop.notify([
//         new Change(new Claim("Bike lanes benefit residents", ID("3"))),
//         new Change(new ClaimEdge(ID("2"), ID("3"), ID("2"), undefined, true, ID("2-3"))),
//     ]);
//     expect(repo.getScoresByClaimId(ID("2"))[0].confidence).toBe(0);
//     debugger;
//     calculationLoop.notify([
//         new Change(new Claim("Arctic City Should Implement the City 3000 plan", ID("0"))),
//         new Change(new Claim("Bikes are not recommended in minus 30 degree weather", ID("6"))),
//         new Change(new Claim("Subways benefit residents", ID("5"))),
//         new Change(new ClaimEdge(ID("0"), ID("2"), ID("0"), undefined, true, ID("0-2"))),
//         new Change(new ClaimEdge(ID("2"), ID("5"), ID("2"), undefined, false, ID("0-2-3-5"))),
//         new Change(new ClaimEdge(ID("3"), ID("6"), ID("0"), undefined, false, ID("0-2-3-6"))),
//     ]);
//     //TODO: Remove later: this tests manually propogating hte change up the stack
//     calculationLoop.notify([
//         new Change(new ClaimEdge(ID("2"), ID("3"), ID("0"), undefined, true, ID("0-2-3"))),
//         new Change(new ClaimEdge(ID("0"), ID("2"), ID("0"), undefined, true, ID("0-2"))),
//     ]);
//     //expect(repo.getScoresByClaimId(ID("2"))[0].confidence).toBe(0);
//     debugger;
//     expect(repo.getScoresByClaimId(ID("0"))[0].confidence).toBe(-1 / 3);
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
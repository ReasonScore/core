"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortingTests = sortingTests;

// This code is currently used in Reason Score\editor\src\ScoreElement.tsx but is tested here just because the test  framework is set up
const ScoreSorter = (a, b) => {
  // if ((a.priority === undefined || a.priority === "")) return 1;
  // if ((b.priority === undefined || b.priority === ""))  return -1;
  if (a.priority > b.priority) return 1;
  if (a.priority < b.priority) return -1;
  if (a.descendantCount > b.descendantCount) return 1;
  if (b.descendantCount > a.descendantCount) return -1;
  if (a.confidence > b.confidence) return 1;
  if (b.confidence > a.confidence) return -1;
  return 0;
};

function sortingTests() {
  test('Priorities: "":""', async () => {
    expect(ScoreSorter({
      priority: ""
    }, {
      priority: ""
    })).toEqual(0);
  });
  test('Priorities: a:""', async () => {
    expect(ScoreSorter({
      priority: "a"
    }, {
      priority: ""
    })).toEqual(1);
  });
  test('Priorities: "":a', async () => {
    expect(ScoreSorter({
      priority: ""
    }, {
      priority: "a"
    })).toEqual(-1);
  }); // test('Count: 0:1', async () => {
  //     expect(ScoreSorter(
  //         { priority: "", descendantCount:0 } as Score,
  //         { priority: "", descendantCount:1 } as Score
  //     )).toEqual(1)
  // });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9zb3J0aW5nVGVzdHMudHMiXSwibmFtZXMiOlsiU2NvcmVTb3J0ZXIiLCJhIiwiYiIsInByaW9yaXR5IiwiZGVzY2VuZGFudENvdW50IiwiY29uZmlkZW5jZSIsInNvcnRpbmdUZXN0cyIsInRlc3QiLCJleHBlY3QiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7QUFDQSxNQUFNQSxXQUFXLEdBQUcsQ0FBQ0MsQ0FBRCxFQUFXQyxDQUFYLEtBQXdCO0FBQ3hDO0FBQ0E7QUFDQSxNQUFJRCxDQUFDLENBQUNFLFFBQUYsR0FBYUQsQ0FBQyxDQUFDQyxRQUFuQixFQUE2QixPQUFPLENBQVA7QUFDN0IsTUFBSUYsQ0FBQyxDQUFDRSxRQUFGLEdBQWFELENBQUMsQ0FBQ0MsUUFBbkIsRUFBNkIsT0FBTyxDQUFDLENBQVI7QUFDN0IsTUFBSUYsQ0FBQyxDQUFDRyxlQUFGLEdBQW9CRixDQUFDLENBQUNFLGVBQTFCLEVBQTJDLE9BQU8sQ0FBUDtBQUMzQyxNQUFJRixDQUFDLENBQUNFLGVBQUYsR0FBb0JILENBQUMsQ0FBQ0csZUFBMUIsRUFBMkMsT0FBTyxDQUFDLENBQVI7QUFDM0MsTUFBSUgsQ0FBQyxDQUFDSSxVQUFGLEdBQWVILENBQUMsQ0FBQ0csVUFBckIsRUFBaUMsT0FBTyxDQUFQO0FBQ2pDLE1BQUlILENBQUMsQ0FBQ0csVUFBRixHQUFlSixDQUFDLENBQUNJLFVBQXJCLEVBQWlDLE9BQU8sQ0FBQyxDQUFSO0FBQ2pDLFNBQU8sQ0FBUDtBQUNILENBVkQ7O0FBWU8sU0FBU0MsWUFBVCxHQUF3QjtBQUMzQkMsRUFBQUEsSUFBSSxDQUFDLG1CQUFELEVBQXNCLFlBQVk7QUFDbENDLElBQUFBLE1BQU0sQ0FBQ1IsV0FBVyxDQUNkO0FBQUVHLE1BQUFBLFFBQVEsRUFBRTtBQUFaLEtBRGMsRUFFZDtBQUFFQSxNQUFBQSxRQUFRLEVBQUU7QUFBWixLQUZjLENBQVosQ0FBTixDQUdHTSxPQUhILENBR1csQ0FIWDtBQUlILEdBTEcsQ0FBSjtBQU9BRixFQUFBQSxJQUFJLENBQUMsa0JBQUQsRUFBcUIsWUFBWTtBQUNqQ0MsSUFBQUEsTUFBTSxDQUFDUixXQUFXLENBQ2Q7QUFBRUcsTUFBQUEsUUFBUSxFQUFFO0FBQVosS0FEYyxFQUVkO0FBQUVBLE1BQUFBLFFBQVEsRUFBRTtBQUFaLEtBRmMsQ0FBWixDQUFOLENBR0dNLE9BSEgsQ0FHVyxDQUhYO0FBSUgsR0FMRyxDQUFKO0FBT0FGLEVBQUFBLElBQUksQ0FBQyxrQkFBRCxFQUFxQixZQUFZO0FBQ2pDQyxJQUFBQSxNQUFNLENBQUNSLFdBQVcsQ0FDZDtBQUFFRyxNQUFBQSxRQUFRLEVBQUU7QUFBWixLQURjLEVBRWQ7QUFBRUEsTUFBQUEsUUFBUSxFQUFFO0FBQVosS0FGYyxDQUFaLENBQU4sQ0FHR00sT0FISCxDQUdXLENBQUMsQ0FIWjtBQUlILEdBTEcsQ0FBSixDQWYyQixDQXNCM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY29yZSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL1Njb3JlXCI7XHJcblxyXG4vLyBUaGlzIGNvZGUgaXMgY3VycmVudGx5IHVzZWQgaW4gUmVhc29uIFNjb3JlXFxlZGl0b3JcXHNyY1xcU2NvcmVFbGVtZW50LnRzeCBidXQgaXMgdGVzdGVkIGhlcmUganVzdCBiZWNhdXNlIHRoZSB0ZXN0ICBmcmFtZXdvcmsgaXMgc2V0IHVwXHJcbmNvbnN0IFNjb3JlU29ydGVyID0gKGE6IFNjb3JlLCBiOiBTY29yZSkgPT4ge1xyXG4gICAgLy8gaWYgKChhLnByaW9yaXR5ID09PSB1bmRlZmluZWQgfHwgYS5wcmlvcml0eSA9PT0gXCJcIikpIHJldHVybiAxO1xyXG4gICAgLy8gaWYgKChiLnByaW9yaXR5ID09PSB1bmRlZmluZWQgfHwgYi5wcmlvcml0eSA9PT0gXCJcIikpICByZXR1cm4gLTE7XHJcbiAgICBpZiAoYS5wcmlvcml0eSA+IGIucHJpb3JpdHkpIHJldHVybiAxO1xyXG4gICAgaWYgKGEucHJpb3JpdHkgPCBiLnByaW9yaXR5KSByZXR1cm4gLTE7XHJcbiAgICBpZiAoYS5kZXNjZW5kYW50Q291bnQgPiBiLmRlc2NlbmRhbnRDb3VudCkgcmV0dXJuIDE7XHJcbiAgICBpZiAoYi5kZXNjZW5kYW50Q291bnQgPiBhLmRlc2NlbmRhbnRDb3VudCkgcmV0dXJuIC0xO1xyXG4gICAgaWYgKGEuY29uZmlkZW5jZSA+IGIuY29uZmlkZW5jZSkgcmV0dXJuIDE7XHJcbiAgICBpZiAoYi5jb25maWRlbmNlID4gYS5jb25maWRlbmNlKSByZXR1cm4gLTE7XHJcbiAgICByZXR1cm4gMDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRpbmdUZXN0cygpIHtcclxuICAgIHRlc3QoJ1ByaW9yaXRpZXM6IFwiXCI6XCJcIicsIGFzeW5jICgpID0+IHtcclxuICAgICAgICBleHBlY3QoU2NvcmVTb3J0ZXIoXHJcbiAgICAgICAgICAgIHsgcHJpb3JpdHk6IFwiXCIgfSBhcyBTY29yZSxcclxuICAgICAgICAgICAgeyBwcmlvcml0eTogXCJcIiB9IGFzIFNjb3JlXHJcbiAgICAgICAgKSkudG9FcXVhbCgwKVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnUHJpb3JpdGllczogYTpcIlwiJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChTY29yZVNvcnRlcihcclxuICAgICAgICAgICAgeyBwcmlvcml0eTogXCJhXCIgfSBhcyBTY29yZSxcclxuICAgICAgICAgICAgeyBwcmlvcml0eTogXCJcIiB9IGFzIFNjb3JlXHJcbiAgICAgICAgKSkudG9FcXVhbCgxKVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnUHJpb3JpdGllczogXCJcIjphJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChTY29yZVNvcnRlcihcclxuICAgICAgICAgICAgeyBwcmlvcml0eTogXCJcIiB9IGFzIFNjb3JlLFxyXG4gICAgICAgICAgICB7IHByaW9yaXR5OiBcImFcIiB9IGFzIFNjb3JlXHJcbiAgICAgICAgKSkudG9FcXVhbCgtMSlcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHRlc3QoJ0NvdW50OiAwOjEnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyAgICAgZXhwZWN0KFNjb3JlU29ydGVyKFxyXG4gICAgLy8gICAgICAgICB7IHByaW9yaXR5OiBcIlwiLCBkZXNjZW5kYW50Q291bnQ6MCB9IGFzIFNjb3JlLFxyXG4gICAgLy8gICAgICAgICB7IHByaW9yaXR5OiBcIlwiLCBkZXNjZW5kYW50Q291bnQ6MSB9IGFzIFNjb3JlXHJcbiAgICAvLyAgICAgKSkudG9FcXVhbCgxKVxyXG4gICAgLy8gfSk7XHJcbn1cclxuXHJcblxyXG4iXX0=
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScoreActionTests = calculateScoreActionTests;

var _RepositoryLocalPure = require("../repositories/RepositoryLocalPure");

var _calculateScoreActions = require("../calculateScoreActions");

var _calculateScore = require("../calculateScore");

var _Claim = require("../dataModels/Claim");

var _Action = require("../dataModels/Action");

var _ClaimEdge = require("../dataModels/ClaimEdge");

var _Score = require("../dataModels/Score");

var _ScoreTree = require("../dataModels/ScoreTree");

function calculateScoreActionTests() {
  const u = undefined,
        pro = true,
        con = false;
  test('add a new scoretree', async () => {
    const repository = new _RepositoryLocalPure.RepositoryLocalPure(); // Add a new claim and set it as a score tree top

    const result = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("", "topTestClaim"), undefined, "add_claim"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree")],
      repository: repository,
      calculator: _calculateScore.calculateScore
    });
    var test = new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree");
    expect(repository.rsData.scoreIdsBySourceId["topTestClaim"].length).toEqual(1);
  });
  test('Add a child that does not change the top score', async () => {
    var _await$repository$get;

    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    const temp = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("", "topTestClaim"), undefined, "add_claim"), new _Action.Action(new _Claim.Claim("", "ChildClaim1"), undefined, "add_claim"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree")],
      repository: repository
    });
    const result = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, u, u, "Priority Set"), undefined, "add_claimEdge")],
      repository: repository
    });
    expect((_await$repository$get = await repository.getScore("testTopScore")) === null || _await$repository$get === void 0 ? void 0 : _await$repository$get.confidence).toEqual(1);
  });
  test('Prioity on Add', async () => {
    var _await$repository$get2;

    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    const temp = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("", "topTestClaim"), undefined, "add_claim"), new _Action.Action(new _Claim.Claim("", "ChildClaim1"), undefined, "add_claim"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree")],
      repository: repository
    });
    const actions = [new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, u, u, "Priority Set"), undefined, "add_claimEdge")];
    const result = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: actions,
      repository: repository
    });
    expect((_await$repository$get2 = (await repository.getScoresBySourceId("ChildClaim1"))[0]) === null || _await$repository$get2 === void 0 ? void 0 : _await$repository$get2.priority).toEqual("Priority Set");
  });
  test('Prioity on Modify claimEdge', async () => {
    var _await$repository$get3;

    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    const temp = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("", "topTestClaim"), undefined, "add_claim"), new _Action.Action(new _Claim.Claim("", "ChildClaim1"), undefined, "add_claim"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, u, u), undefined, "add_claimEdge")],
      repository: repository
    });
    const edge = (await repository.getClaimEdgesByChildId("ChildClaim1"))[0];
    const result = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, u, edge.id, 'Priority Modified'), undefined, "modify_claimEdge")],
      repository: repository
    });
    expect((_await$repository$get3 = (await repository.getScoresBySourceId("ChildClaim1"))[0]) === null || _await$repository$get3 === void 0 ? void 0 : _await$repository$get3.priority).toEqual("Priority Modified");
  });
  test('Changing a child pro value should change the top score', async () => {
    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    const temp = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("", "topTestClaim"), u, "add_claim"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree"), new _Action.Action(new _Claim.Claim("", "ChildClaim1"), u, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, true, "ChildClaim1Edge"), u, "add_claimEdge")],
      repository: repository
    });
    const result = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, false, "ChildClaim1Edge"), u, "modify_claimEdge")],
      repository: repository
    });
    expect((await repository.getScoresBySourceId("topTestClaim"))[0].confidence).toEqual(-1);
  });
  test('Add a child that reverses the top score', async () => {
    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    const temp = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("", "topTestClaim"), u, "add_claim"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), u, "add_scoreTree"), new _Action.Action(new _Claim.Claim("", "ChildClaim1"), u, "add_claim")],
      repository: repository
    });
    const result = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, false, "ChildClaim1Edge"), u, "add_claimEdge")],
      repository: repository,
      calculator: _calculateScore.calculateScore
    });
    expect((await repository.getScoresBySourceId("topTestClaim"))[0].confidence).toEqual(-1);
  });
  test('Adding a grandchild score Reverses Scores 2 levels', async () => {
    var _await$repository$get4;

    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    const temp = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("", "topTestClaim"), undefined, "add_claim"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree"), new _Action.Action(new _Claim.Claim("", "ChildClaim1"), undefined, "add_claim"), new _Action.Action(new _Claim.Claim("", "ChildClaim2"), undefined, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", undefined, false, "ChildClaim1Edge"), undefined, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim2", undefined, true, "ChildClaim2Edge"), undefined, "add_claimEdge"), new _Action.Action(new _Claim.Claim("", "grandChild1"), undefined, "add_claim")],
      repository: repository
    });
    const result = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild1", undefined, false, "GrandChildClaim1Edge"), undefined, "add_claimEdge")],
      repository: repository,
      calculator: _calculateScore.calculateScore
    });
    expect((_await$repository$get4 = await repository.getScore("testTopScore")) === null || _await$repository$get4 === void 0 ? void 0 : _await$repository$get4.confidence).toEqual(1);
  });
  test('Complex Test', async () => {
    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    const changedScores = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("Top Claim", "topTestClaim"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 1", "ChildClaim1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 2", "ChildClaim2"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 1", "grandChild1"), u, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, false, "ChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim2", u, true, "ChildClaim2Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild1", u, false, "GrandChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree")],
      repository: repository
    });
    expect(repository.rsData.items["testTopScore"].confidence).toEqual(1);
    expect(repository.rsData.scoreIdsBySourceId["topTestClaim"].length).toEqual(1); //Weird score not changing

    const ChildClaim1ScoresInitial = await repository.getScoresBySourceId("ChildClaim1");
    expect(ChildClaim1ScoresInitial[0].pro).toEqual(false);
    const changedScores2 = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [{
        "newData": {
          "content": "Child Claim 1",
          "id": "ChildClaim1",
          "reversible": false,
          "type": "claim"
        },
        "type": "modify_claim",
        "dataId": "ChildClaim1"
      }, {
        "newData": {
          "parentId": "topTestClaim",
          "childId": "ChildClaim1",
          "affects": "confidence",
          "pro": true,
          "id": "ChildClaim1Edge",
          "priority": "",
          "type": "claimEdge"
        },
        "type": "modify_claimEdge",
        "dataId": "ChildClaim1Edge"
      }],
      repository: repository
    });
    const ChildClaim1Scores = await repository.getScoresBySourceId("ChildClaim1");
    expect(ChildClaim1Scores[0].pro).toEqual(true);
  });
  test('Partial Claim Edge Grandchild Update', async () => {
    var _await$repository$get5, _await$repository$get6, _await$repository$get7;

    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    const changedScores = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("Top Claim", "topTestClaim"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 1", "ChildClaim1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 2", "ChildClaim2"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 1", "grandChild1"), u, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, false, "ChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim2", u, true, "ChildClaim2Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild1", u, false, "GrandChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree")],
      repository: repository
    }); //await repository.notify(changedScores);

    expect((_await$repository$get5 = await repository.getScore("testTopScore")) === null || _await$repository$get5 === void 0 ? void 0 : _await$repository$get5.confidence).toEqual(1);
    expect(repository.rsData.scoreIdsBySourceId["topTestClaim"].length).toEqual(1);
    const result = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim2", u, false, "ChildClaim2Edge"), u, "modify_claimEdge")],
      repository: repository
    });
    await repository.notify(result);
    expect((_await$repository$get6 = await repository.getScore("testTopScore")) === null || _await$repository$get6 === void 0 ? void 0 : _await$repository$get6.confidence).toEqual(-1);
    const result2 = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action({
        pro: true
      }, u, "modify_claimEdge", "ChildClaim2Edge") //new Action(new ClaimEdge("topTestClaim", "ChildClaim2", u, true, "ChildClaim2Edge"), u, "modify_claimEdge"),
      ],
      repository: repository
    });
    await repository.notify(result2);
    expect((_await$repository$get7 = await repository.getScore("testTopScore")) === null || _await$repository$get7 === void 0 ? void 0 : _await$repository$get7.confidence).toEqual(1);
  });
  test('Partial Claim Edge Child Update', async () => {
    var _await$repository$get8, _await$repository$get9, _await$repository$get10;

    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    const changedScores = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("Top Claim", "topTestClaim"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 1", "ChildClaim1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 2", "ChildClaim2"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 1", "grandChild1"), u, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, false, "ChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim2", u, true, "ChildClaim2Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild1", u, false, "GrandChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree")],
      repository: repository
    }); //await repository.notify(changedScores);

    expect((_await$repository$get8 = await repository.getScore("testTopScore")) === null || _await$repository$get8 === void 0 ? void 0 : _await$repository$get8.confidence).toEqual(1);
    const result = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action({
        pro: false
      }, u, "modify_claimEdge", "ChildClaim2Edge") //new Action(new ClaimEdge("topTestClaim", "ChildClaim2", u, false, "ChildClaim2Edge"), u, "modify_claimEdge"),
      ],
      repository: repository
    }); //await repository.notify(result);

    expect((_await$repository$get9 = await repository.getScore("testTopScore")) === null || _await$repository$get9 === void 0 ? void 0 : _await$repository$get9.confidence).toEqual(-1);
    const result2 = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action({
        pro: true
      }, u, "modify_claimEdge", "ChildClaim2Edge") //new Action(new ClaimEdge("topTestClaim", "ChildClaim2", u, true, "ChildClaim2Edge"), u, "modify_claimEdge"),
      ],
      repository: repository
    });
    expect((_await$repository$get10 = await repository.getScore("testTopScore")) === null || _await$repository$get10 === void 0 ? void 0 : _await$repository$get10.confidence).toEqual(1);
  });
  test('Deleting an edge should reverses the top score', async () => {
    var _await$repository$get11, _await$repository$get12;

    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("", "topTestClaim"), undefined, "add_claim"), new _Action.Action(new _Claim.Claim("", "ChildClaim1"), undefined, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", undefined, false, "ChildClaim1Edge"), undefined, "add_claimEdge"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree")],
      repository: repository
    });
    expect((_await$repository$get11 = await repository.getScore("testTopScore")) === null || _await$repository$get11 === void 0 ? void 0 : _await$repository$get11.confidence).toEqual(-1);
    await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(u, {
        parentId: "topTestClaim"
      }, "delete_claimEdge", "ChildClaim1Edge")],
      repository: repository
    });
    expect((_await$repository$get12 = await repository.getScore("testTopScore")) === null || _await$repository$get12 === void 0 ? void 0 : _await$repository$get12.confidence).toEqual(1);
  });
  test('Multi level relevance delete test', async () => {
    var _await$repository$get13, _await$repository$get14;

    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    const pro = true;
    const con = false;
    const topClaim = new _Claim.Claim("Should Fiction City convert Elm Street to only pedestrian traffic?", "topTestClaim");
    const Claim1_0 = new _Claim.Claim("The planning commission estimates this will increase foot traffic to local shops by 12% during peak hours.", "Claim1_0");
    const Claim1_1 = new _Claim.Claim("The increase in revenue is expected to pay off the expense in under 2 years meeting the cities investment requirements.", "Claim1_1");
    const Claim2_0 = new _Claim.Claim("This will result in traffic being diverted down residential streets.");
    const Claim2_1 = new _Claim.Claim("Children safety is more important than profit for local shops.");
    const Claim2_2 = new _Claim.Claim("A set of railroad tracks are no longer in use and the City can convert that to a new street.");
    const Claim3_0 = new _Claim.Claim("The conversion will cost 2 Million dollars.");
    const ClaimEdge1_0 = new _ClaimEdge.ClaimEdge(topClaim.id, Claim1_0.id, u, pro, "ClaimEdge1_0");
    const ClaimEdge1_1 = new _ClaimEdge.ClaimEdge(Claim1_0.id, Claim1_1.id, "relevance", pro, "ClaimEdge1_1");
    const actions = [new _Action.Action(topClaim, u, "add_claim"), new _Action.Action(Claim1_0, u, "add_claim"), new _Action.Action(Claim1_1, u, "add_claim"), new _Action.Action(Claim2_0, u, "add_claim"), new _Action.Action(Claim2_1, u, "add_claim"), new _Action.Action(Claim2_2, u, "add_claim"), new _Action.Action(Claim3_0, u, "add_claim"), new _Action.Action(ClaimEdge1_0, u, "add_claimEdge"), new _Action.Action(ClaimEdge1_1, u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge(topClaim.id, Claim2_0.id, u, con), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge(Claim2_0.id, Claim2_1.id, "relevance", con), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge(Claim2_0.id, Claim2_2.id, u, con), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge(topClaim.id, Claim3_0.id, u, con), u, "add_claimEdge"), new _Action.Action(new _Score.Score(topClaim.id, topClaim.id, u, u, u, u, u, 0, u, "testTopScore"), u, "add_score"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree")];
    await (0, _calculateScoreActions.calculateScoreActions)({
      actions: actions,
      repository: repository
    });
    expect((_await$repository$get13 = await repository.getScore("testTopScore")) === null || _await$repository$get13 === void 0 ? void 0 : _await$repository$get13.confidence).toEqual(0.3333333333333333);
    const result = await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(undefined, ClaimEdge1_1, "delete_claimEdge", ClaimEdge1_1.id)],
      repository: repository
    });
    expect((_await$repository$get14 = await repository.getScore("testTopScore")) === null || _await$repository$get14 === void 0 ? void 0 : _await$repository$get14.confidence).toEqual(0);
  });
  test('Relevance test', async () => {
    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    let result;
    await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("Top Claim", "topTestClaim"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 1", "ChildClaim1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 2", "ChildClaim2"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 1", "grandChild1"), u, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, pro, "ChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim2", u, con, "ChildClaim2Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild1", "relevance", pro, "GrandChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree")],
      repository: repository
    });
    let results, expectations; // Check descendantCount

    results = [];
    expectations = [["topTestClaim.confidence", 0.3333333333333333], ["grandChild1.affects", "relevance"]];

    for (const expectation of expectations) {
      const source = expectation[0].split(".");
      const tempResult = await repository.getScoresBySourceId(source[0]);
      results.push([expectation[0], tempResult[0][source[1]]]);
    }

    expect(results).toMatchObject(expectations);
  });
  test('Relevance test 2', async () => {
    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    let result;
    await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("Top Claim", "topTestClaim"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 1", "ChildClaim1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 2", "ChildClaim2"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 1", "grandChild1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 2", "grandChild2"), u, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, pro, "ChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim2", u, con, "ChildClaim2Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild1", "confidence", pro, "GrandChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild2", "relevance", pro, "GrandChildClaim1Edge2"), u, "add_claimEdge"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), u, "add_scoreTree")],
      repository: repository
    });
    let results, expectations; // Check descendantCount

    results = [];
    expectations = [["topTestClaim.confidence", 0.3333333333333333]];

    for (const expectation of expectations) {
      const source = expectation[0].split(".");
      const tempResult = await repository.getScoresBySourceId(source[0]);
      results.push([expectation[0], tempResult[0][source[1]]]);
    }

    expect(results).toMatchObject(expectations);
  });
  test('Relevance test 2', async () => {
    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    let result;
    await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("Top Claim", "topTestClaim"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 1", "ChildClaim1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 2", "ChildClaim2"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 1", "grandChild1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 2", "grandChild2"), u, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, pro, "ChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim2", u, con, "ChildClaim2Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild1", "confidence", pro, "GrandChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild2", "relevance", pro, "GrandChildClaim1Edge2"), u, "add_claimEdge"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), u, "add_scoreTree")],
      repository: repository
    });
    let results, expectations; // Check descendantCount

    results = [];
    expectations = [["topTestClaim.confidence", 0.3333333333333333]];

    for (const expectation of expectations) {
      const source = expectation[0].split(".");
      const tempResult = await repository.getScoresBySourceId(source[0]);
      results.push([expectation[0], tempResult[0][source[1]]]);
    }

    expect(results).toMatchObject(expectations);
  });
  test('Descendant Count Tests', async () => {
    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    let result;
    await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("Top Claim", "topTestClaim"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 1", "ChildClaim1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 2", "ChildClaim2"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 3", "ChildClaim3"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 1", "grandChild1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 2", "grandChild2"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 3", "grandChild3"), u, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, pro, "ChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim2", u, pro, "ChildClaim2Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim3", u, con, "ChildClaim3Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild1", u, pro, "GrandChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild2", u, pro, "GrandChildClaim2Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild3", u, con, "GrandChildClaim3Edge"), u, "add_claimEdge"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree")],
      repository: repository
    });
    expect(repository.rsData.items["testScoreTree"].descendantCount).toEqual(6);
    let results, expectations;
    results = [];
    expectations = [["topTestClaim.descendantCount", 6], ["ChildClaim1.descendantCount", 3], ["ChildClaim2.descendantCount", 0]];

    for (const expectation of expectations) {
      const source = expectation[0].split(".");
      const tempResult = await repository.getScoresBySourceId(source[0]);
      results.push([expectation[0], tempResult[0][source[1]]]);
    }

    expect(results).toMatchObject(expectations);
  });
  test('Generation Count Tests', async () => {
    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    let result;
    await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("Top Claim", "topTestClaim"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 1", "ChildClaim1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 2", "ChildClaim2"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 3", "ChildClaim3"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 1", "grandChild1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 2", "grandChild2"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 3", "grandChild3"), u, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, pro, "ChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim2", u, pro, "ChildClaim2Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim3", u, con, "ChildClaim3Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild1", u, pro, "GrandChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild2", u, pro, "GrandChildClaim2Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild3", u, con, "GrandChildClaim3Edge"), u, "add_claimEdge"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree")],
      repository: repository
    });
    expect(repository.rsData.items["testScoreTree"].descendantCount).toEqual(6);
    let results, expectations;
    results = [];
    expectations = [["topTestClaim.generation", 0], ["ChildClaim1.generation", 1], ["ChildClaim2.generation", 1], ["grandChild1.generation", 2], ["grandChild2.generation", 2]];

    for (const expectation of expectations) {
      const source = expectation[0].split(".");
      const tempResult = await repository.getScoresBySourceId(source[0]);
      results.push([expectation[0], tempResult[0][source[1]]]);
    }

    expect(results).toMatchObject(expectations);
  });
  test('Pro Main Tests', async () => {
    const repository = new _RepositoryLocalPure.RepositoryLocalPure();
    let result;
    await (0, _calculateScoreActions.calculateScoreActions)({
      actions: [new _Action.Action(new _Claim.Claim("Top Claim", "topTestClaim"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 1", "ChildClaim1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 2", "ChildClaim2"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Child Claim 3", "ChildClaim3"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 1", "grandChild1"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 2", "grandChild2"), u, "add_claim"), new _Action.Action(new _Claim.Claim("Grandchild Claim 3", "grandChild3"), u, "add_claim"), new _Action.Action(new _ClaimEdge.ClaimEdge("topTestClaim", "ChildClaim1", u, con, "ChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild1", u, pro, "GrandChildClaim1Edge"), u, "add_claimEdge"), new _Action.Action(new _ClaimEdge.ClaimEdge("ChildClaim1", "grandChild2", u, con, "GrandChildClaim2Edge"), u, "add_claimEdge"), new _Action.Action(new _ScoreTree.ScoreTree("topTestClaim", "testTopScore", u, "testScoreTree"), undefined, "add_scoreTree")],
      repository: repository
    });
    let results, expectations;
    results = [];
    expectations = [["ChildClaim1.proMain", false], ["grandChild1.proMain", false], ["grandChild2.proMain", true]];

    for (const expectation of expectations) {
      const source = expectation[0].split(".");
      const tempResult = await repository.getScoresBySourceId(source[0]);
      results.push([expectation[0], tempResult[0][source[1]]]);
    }

    expect(results).toMatchObject(expectations);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
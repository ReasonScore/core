"use strict";

var _calculateScore = require("../calculateScore");

var _Score = require("../dataModels/Score");

var _ScoreAndClaimEdge = require("../dataModels/ScoreAndClaimEdge");

var _ClaimEdge = require("../dataModels/ClaimEdge");

var _ = require("..");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TestData = function TestData() {
  var testDescription = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Test";
  var scoreAndClaimEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var expectedScore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _Score.Score();
  var reversible = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  _classCallCheck(this, TestData);

  this.testDescription = testDescription;
  this.scoreAndClaimEdges = scoreAndClaimEdges;
  this.expectedScore = expectedScore;
  this.reversible = reversible;
};

var testData = [new TestData("_12", [new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(1, 1), new _ClaimEdge.ClaimEdge(undefined, undefined, _.Affects.Confidence, true)), new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(1, 1), new _ClaimEdge.ClaimEdge(undefined, undefined, _.Affects.Confidence, true))], new _Score.Score(1)), new TestData("_13", [new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(1, 1), new _ClaimEdge.ClaimEdge(undefined, undefined, _.Affects.Confidence, true)), new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(-1, 1), new _ClaimEdge.ClaimEdge(undefined, undefined, _.Affects.Confidence, true))], new _Score.Score(0)), new TestData("_14", [new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(1, 1), new _ClaimEdge.ClaimEdge(undefined, undefined, _.Affects.Confidence, true)), new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(0, 1), new _ClaimEdge.ClaimEdge(undefined, undefined, _.Affects.Confidence, false))], new _Score.Score(1))];
var JsonTestData = [];

for (var _i = 0, _testData = testData; _i < _testData.length; _i++) {
  var data = _testData[_i];
  JsonTestData.push(JSON.stringify(data));
}

describe.each(JsonTestData)('Tests', function (testJson) {
  var t = JSON.parse(testJson);
  test(t.testDescription + ' Confidence', function () {
    var result = (0, _calculateScore.calculateScore)({
      scoreAndClaimEdges: t.scoreAndClaimEdges,
      reversible: t.reversible
    });
    expect(result.confidence).toBe(t.expectedScore.confidence);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9jYWxjdWxhdGVTY29yZS50ZXN0LnNraXAudHMiXSwibmFtZXMiOlsiVGVzdERhdGEiLCJ0ZXN0RGVzY3JpcHRpb24iLCJzY29yZUFuZENsYWltRWRnZXMiLCJleHBlY3RlZFNjb3JlIiwiU2NvcmUiLCJyZXZlcnNpYmxlIiwidGVzdERhdGEiLCJTY29yZUFuZENsYWltRWRnZSIsIkNsYWltRWRnZSIsInVuZGVmaW5lZCIsIkFmZmVjdHMiLCJDb25maWRlbmNlIiwiSnNvblRlc3REYXRhIiwiZGF0YSIsInB1c2giLCJKU09OIiwic3RyaW5naWZ5IiwiZGVzY3JpYmUiLCJlYWNoIiwidGVzdEpzb24iLCJ0IiwicGFyc2UiLCJ0ZXN0IiwicmVzdWx0IiwiZXhwZWN0IiwiY29uZmlkZW5jZSIsInRvQmUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7SUFFTUEsUSxHQUNGLG9CQUtFO0FBQUEsTUFKU0MsZUFJVCx1RUFKbUMsTUFJbkM7QUFBQSxNQUhTQyxrQkFHVCx1RUFIbUQsRUFHbkQ7QUFBQSxNQUZTQyxhQUVULHVFQUZnQyxJQUFJQyxZQUFKLEVBRWhDO0FBQUEsTUFEU0MsVUFDVCx1RUFEK0IsS0FDL0I7O0FBQUE7O0FBQUEsT0FKU0osZUFJVCxHQUpTQSxlQUlUO0FBQUEsT0FIU0Msa0JBR1QsR0FIU0Esa0JBR1Q7QUFBQSxPQUZTQyxhQUVULEdBRlNBLGFBRVQ7QUFBQSxPQURTRSxVQUNULEdBRFNBLFVBQ1Q7QUFDRCxDOztBQUdMLElBQU1DLFFBQVEsR0FBRyxDQUNiLElBQUlOLFFBQUosQ0FBYSxLQUFiLEVBQW9CLENBQ2hCLElBQUlPLG9DQUFKLENBQXNCLElBQUlILFlBQUosQ0FBVSxDQUFWLEVBQWEsQ0FBYixDQUF0QixFQUF1QyxJQUFJSSxvQkFBSixDQUFjQyxTQUFkLEVBQXlCQSxTQUF6QixFQUFvQ0MsVUFBUUMsVUFBNUMsRUFBd0QsSUFBeEQsQ0FBdkMsQ0FEZ0IsRUFFaEIsSUFBSUosb0NBQUosQ0FBc0IsSUFBSUgsWUFBSixDQUFVLENBQVYsRUFBYSxDQUFiLENBQXRCLEVBQXVDLElBQUlJLG9CQUFKLENBQWNDLFNBQWQsRUFBeUJBLFNBQXpCLEVBQW9DQyxVQUFRQyxVQUE1QyxFQUF3RCxJQUF4RCxDQUF2QyxDQUZnQixDQUFwQixFQUdHLElBQUlQLFlBQUosQ0FBVSxDQUFWLENBSEgsQ0FEYSxFQUtiLElBQUlKLFFBQUosQ0FBYSxLQUFiLEVBQW9CLENBQ2hCLElBQUlPLG9DQUFKLENBQXNCLElBQUlILFlBQUosQ0FBVSxDQUFWLEVBQWEsQ0FBYixDQUF0QixFQUF1QyxJQUFJSSxvQkFBSixDQUFjQyxTQUFkLEVBQXlCQSxTQUF6QixFQUFvQ0MsVUFBUUMsVUFBNUMsRUFBd0QsSUFBeEQsQ0FBdkMsQ0FEZ0IsRUFFaEIsSUFBSUosb0NBQUosQ0FBc0IsSUFBSUgsWUFBSixDQUFVLENBQUMsQ0FBWCxFQUFjLENBQWQsQ0FBdEIsRUFBd0MsSUFBSUksb0JBQUosQ0FBY0MsU0FBZCxFQUF5QkEsU0FBekIsRUFBb0NDLFVBQVFDLFVBQTVDLEVBQXdELElBQXhELENBQXhDLENBRmdCLENBQXBCLEVBR0csSUFBSVAsWUFBSixDQUFVLENBQVYsQ0FISCxDQUxhLEVBU2IsSUFBSUosUUFBSixDQUFhLEtBQWIsRUFBb0IsQ0FDaEIsSUFBSU8sb0NBQUosQ0FBc0IsSUFBSUgsWUFBSixDQUFVLENBQVYsRUFBYSxDQUFiLENBQXRCLEVBQXVDLElBQUlJLG9CQUFKLENBQWNDLFNBQWQsRUFBeUJBLFNBQXpCLEVBQW9DQyxVQUFRQyxVQUE1QyxFQUF3RCxJQUF4RCxDQUF2QyxDQURnQixFQUVoQixJQUFJSixvQ0FBSixDQUFzQixJQUFJSCxZQUFKLENBQVUsQ0FBVixFQUFhLENBQWIsQ0FBdEIsRUFBdUMsSUFBSUksb0JBQUosQ0FBY0MsU0FBZCxFQUF5QkEsU0FBekIsRUFBb0NDLFVBQVFDLFVBQTVDLEVBQXdELEtBQXhELENBQXZDLENBRmdCLENBQXBCLEVBR0csSUFBSVAsWUFBSixDQUFVLENBQVYsQ0FISCxDQVRhLENBQWpCO0FBZUEsSUFBTVEsWUFBc0IsR0FBRyxFQUEvQjs7QUFFQSw2QkFBaUJOLFFBQWpCLCtCQUEyQjtBQUF0QixNQUFJTyxJQUFJLGdCQUFSO0FBQ0RELEVBQUFBLFlBQVksQ0FBQ0UsSUFBYixDQUFrQkMsSUFBSSxDQUFDQyxTQUFMLENBQWVILElBQWYsQ0FBbEI7QUFDSDs7QUFFREksUUFBUSxDQUFDQyxJQUFULENBQWNOLFlBQWQsRUFDSSxPQURKLEVBRUksVUFBQ08sUUFBRCxFQUFjO0FBQ1YsTUFBTUMsQ0FBVyxHQUFHTCxJQUFJLENBQUNNLEtBQUwsQ0FBV0YsUUFBWCxDQUFwQjtBQUNBRyxFQUFBQSxJQUFJLENBQUNGLENBQUMsQ0FBQ25CLGVBQUYsR0FBb0IsYUFBckIsRUFBb0MsWUFBTTtBQUMxQyxRQUFNc0IsTUFBTSxHQUFHLG9DQUFlO0FBQUVyQixNQUFBQSxrQkFBa0IsRUFBRWtCLENBQUMsQ0FBQ2xCLGtCQUF4QjtBQUE0Q0csTUFBQUEsVUFBVSxFQUFFZSxDQUFDLENBQUNmO0FBQTFELEtBQWYsQ0FBZjtBQUNBbUIsSUFBQUEsTUFBTSxDQUFDRCxNQUFNLENBQUNFLFVBQVIsQ0FBTixDQUEwQkMsSUFBMUIsQ0FBK0JOLENBQUMsQ0FBQ2pCLGFBQUYsQ0FBZ0JzQixVQUEvQztBQUNILEdBSEcsQ0FBSjtBQUtILENBVEwiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxjdWxhdGVTY29yZSB9IGZyb20gXCIuLi9jYWxjdWxhdGVTY29yZVwiO1xyXG5pbXBvcnQgeyBTY29yZSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL1Njb3JlXCI7XHJcbmltcG9ydCB7IElEIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvSWRcIjtcclxuaW1wb3J0IHsgU2NvcmVBbmRDbGFpbUVkZ2UgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9TY29yZUFuZENsYWltRWRnZVwiO1xyXG5pbXBvcnQgeyBDbGFpbUVkZ2UgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9DbGFpbUVkZ2VcIjtcclxuaW1wb3J0IHsgQWZmZWN0cyB9IGZyb20gXCIuLlwiO1xyXG5cclxuY2xhc3MgVGVzdERhdGEge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIHRlc3REZXNjcmlwdGlvbjogc3RyaW5nID0gXCJUZXN0XCIsXHJcbiAgICAgICAgcHVibGljIHNjb3JlQW5kQ2xhaW1FZGdlczogU2NvcmVBbmRDbGFpbUVkZ2VbXSA9IFtdLFxyXG4gICAgICAgIHB1YmxpYyBleHBlY3RlZFNjb3JlOiBTY29yZSA9IG5ldyBTY29yZSgpLFxyXG4gICAgICAgIHB1YmxpYyByZXZlcnNpYmxlOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICApIHtcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgdGVzdERhdGEgPSBbXHJcbiAgICBuZXcgVGVzdERhdGEoXCJfMTJcIiwgW1xyXG4gICAgICAgIG5ldyBTY29yZUFuZENsYWltRWRnZShuZXcgU2NvcmUoMSwgMSksIG5ldyBDbGFpbUVkZ2UodW5kZWZpbmVkLCB1bmRlZmluZWQsIEFmZmVjdHMuQ29uZmlkZW5jZSwgdHJ1ZSkpLFxyXG4gICAgICAgIG5ldyBTY29yZUFuZENsYWltRWRnZShuZXcgU2NvcmUoMSwgMSksIG5ldyBDbGFpbUVkZ2UodW5kZWZpbmVkLCB1bmRlZmluZWQsIEFmZmVjdHMuQ29uZmlkZW5jZSwgdHJ1ZSkpLFxyXG4gICAgXSwgbmV3IFNjb3JlKDEpKSxcclxuICAgIG5ldyBUZXN0RGF0YShcIl8xM1wiLCBbXHJcbiAgICAgICAgbmV3IFNjb3JlQW5kQ2xhaW1FZGdlKG5ldyBTY29yZSgxLCAxKSwgbmV3IENsYWltRWRnZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgQWZmZWN0cy5Db25maWRlbmNlLCB0cnVlKSksXHJcbiAgICAgICAgbmV3IFNjb3JlQW5kQ2xhaW1FZGdlKG5ldyBTY29yZSgtMSwgMSksIG5ldyBDbGFpbUVkZ2UodW5kZWZpbmVkLCB1bmRlZmluZWQsIEFmZmVjdHMuQ29uZmlkZW5jZSwgdHJ1ZSkpLFxyXG4gICAgXSwgbmV3IFNjb3JlKDApKSxcclxuICAgIG5ldyBUZXN0RGF0YShcIl8xNFwiLCBbXHJcbiAgICAgICAgbmV3IFNjb3JlQW5kQ2xhaW1FZGdlKG5ldyBTY29yZSgxLCAxKSwgbmV3IENsYWltRWRnZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgQWZmZWN0cy5Db25maWRlbmNlLCB0cnVlKSksXHJcbiAgICAgICAgbmV3IFNjb3JlQW5kQ2xhaW1FZGdlKG5ldyBTY29yZSgwLCAxKSwgbmV3IENsYWltRWRnZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgQWZmZWN0cy5Db25maWRlbmNlLCBmYWxzZSkpLFxyXG4gICAgXSwgbmV3IFNjb3JlKDEpKSxcclxuXVxyXG5cclxuY29uc3QgSnNvblRlc3REYXRhOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuZm9yIChsZXQgZGF0YSBvZiB0ZXN0RGF0YSkge1xyXG4gICAgSnNvblRlc3REYXRhLnB1c2goSlNPTi5zdHJpbmdpZnkoZGF0YSkpXHJcbn1cclxuXHJcbmRlc2NyaWJlLmVhY2goSnNvblRlc3REYXRhKShcclxuICAgICdUZXN0cycsXHJcbiAgICAodGVzdEpzb24pID0+IHtcclxuICAgICAgICBjb25zdCB0OiBUZXN0RGF0YSA9IEpTT04ucGFyc2UodGVzdEpzb24pO1xyXG4gICAgICAgIHRlc3QodC50ZXN0RGVzY3JpcHRpb24gKyAnIENvbmZpZGVuY2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbGN1bGF0ZVNjb3JlKHsgc2NvcmVBbmRDbGFpbUVkZ2VzOiB0LnNjb3JlQW5kQ2xhaW1FZGdlcywgcmV2ZXJzaWJsZTogdC5yZXZlcnNpYmxlIH0pO1xyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmNvbmZpZGVuY2UpLnRvQmUodC5leHBlY3RlZFNjb3JlLmNvbmZpZGVuY2UpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSxcclxuKTtcclxuXHJcbiJdfQ==
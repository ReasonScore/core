"use strict";

var _calculateScore = require("../calculateScore");

var _Score = require("../dataModels/Score");

class TestData {
  constructor(testDescription = "Test", expectedScore, scores = [], reversible = false) {
    this.testDescription = testDescription;
    this.expectedScore = expectedScore;
    this.scores = scores;
    this.reversible = reversible;
  }

}

const u = undefined;

function s(confidence = 1, relevance = 1, pro = true, affects = "confidence", reversible = false) {
  return new _Score.Score("", "", "", u, reversible, pro, affects, confidence, relevance);
}

function t(testDescription, expectedScore, scores, reversible = false) {
  return new TestData(testDescription, expectedScore, scores, reversible);
}

const pro = true;
const con = false;
const testData = [t("no scores   =  1  ", s(1), []), t("1 and 1     =  1    ", s(1), [s(+1), s(+1)]), t(" 1 and -1   =  1 ", s(1), [s(+1), s(-1)]), t("-1          =  0 ", s(0), [s(-1)]), t(" 1 and -1r  =  0 ", s(0), [s(+1), s(-1, u, u, u, true)]), t("-1r         = -1 ", s(-1), [s(-1, u, u, u, true)]), t("pro and con =  0", s(0), [s(+1), s(+1, u, con)]), t("1 Relevance =  2", s(1, 2), [s(+1, 1, pro, "relevance")]), t("pro and con with relevance", s(0.3333333333333333), [s(+1, 2), s(+1, 1, con)])];
const JsonTestData = [];

for (let data of testData) {
  JsonTestData.push(JSON.stringify(data));
}

describe.each(JsonTestData)('Tests', testJson => {
  const t = JSON.parse(testJson);
  test(t.testDescription + ' Confidence', () => {
    const result = (0, _calculateScore.calculateScore)({
      childScores: t.scores,
      reversible: t.reversible
    });
    expect(result.confidence).toBe(t.expectedScore.confidence);

    if (result.relevance != undefined) {
      expect(result.relevance).toBe(t.expectedScore.relevance);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9jYWxjdWxhdGVTY29yZS50ZXN0LnNraXAudHMiXSwibmFtZXMiOlsiVGVzdERhdGEiLCJjb25zdHJ1Y3RvciIsInRlc3REZXNjcmlwdGlvbiIsImV4cGVjdGVkU2NvcmUiLCJzY29yZXMiLCJyZXZlcnNpYmxlIiwidSIsInVuZGVmaW5lZCIsInMiLCJjb25maWRlbmNlIiwicmVsZXZhbmNlIiwicHJvIiwiYWZmZWN0cyIsIlNjb3JlIiwidCIsImNvbiIsInRlc3REYXRhIiwiSnNvblRlc3REYXRhIiwiZGF0YSIsInB1c2giLCJKU09OIiwic3RyaW5naWZ5IiwiZGVzY3JpYmUiLCJlYWNoIiwidGVzdEpzb24iLCJwYXJzZSIsInRlc3QiLCJyZXN1bHQiLCJjaGlsZFNjb3JlcyIsImV4cGVjdCIsInRvQmUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBR0EsTUFBTUEsUUFBTixDQUFlO0FBQ1hDLEVBQUFBLFdBQVcsQ0FDQUMsZUFBdUIsR0FBRyxNQUQxQixFQUVBQyxhQUZBLEVBR0FDLE1BQWUsR0FBRyxFQUhsQixFQUlBQyxVQUFtQixHQUFHLEtBSnRCLEVBS1Q7QUFBQSxTQUpTSCxlQUlULEdBSlNBLGVBSVQ7QUFBQSxTQUhTQyxhQUdULEdBSFNBLGFBR1Q7QUFBQSxTQUZTQyxNQUVULEdBRlNBLE1BRVQ7QUFBQSxTQURTQyxVQUNULEdBRFNBLFVBQ1Q7QUFDRDs7QUFQVTs7QUFTZixNQUFNQyxDQUFDLEdBQUdDLFNBQVY7O0FBQ0EsU0FBU0MsQ0FBVCxDQUFXQyxVQUFrQixHQUFHLENBQWhDLEVBQW1DQyxTQUFpQixHQUFHLENBQXZELEVBQ0lDLEdBQVksR0FBRyxJQURuQixFQUN5QkMsT0FBZ0IsR0FBRyxZQUQ1QyxFQUMwRFAsVUFBbUIsR0FBRyxLQURoRixFQUM4RjtBQUMxRixTQUFPLElBQUlRLFlBQUosQ0FBVSxFQUFWLEVBQWMsRUFBZCxFQUFrQixFQUFsQixFQUFzQlAsQ0FBdEIsRUFBeUJELFVBQXpCLEVB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LGFBQXJCLEVBQW9DLE1BQU07QUFDMUMsVUFBTXlCLE1BQU0sR0FBRyxvQ0FBZTtBQUFFQyxNQUFBQSxXQUFXLEVBQUVkLENBQUMsQ0FBQ1YsTUFBakI7QUFBeUJDLE1BQUFBLFVBQVUsRUFBRVMsQ0FBQyxDQUFDVDtBQUF2QyxLQUFmLENBQWY7QUFDQXdCLElBQUFBLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDbEIsVUFBUixDQUFOLENBQTBCcUIsSUFBMUIsQ0FBK0JoQixDQUFDLENBQUNYLGFBQUYsQ0FBZ0JNLFVBQS9DOztBQUNBLFFBQUlrQixNQUFNLENBQUNqQixTQUFQLElBQW9CSCxTQUF4QixFQUFtQztBQUMvQnNCLE1BQUFBLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDakIsU0FBUixDQUFOLENBQXlCb0IsSUFBekIsQ0FBOEJoQixDQUFDLENBQUNYLGFBQUYsQ0FBZ0JPLFNBQTlDO0FBQ0g7QUFDSixHQU5HLENBQUo7QUFRSCxDQVpMIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FsY3VsYXRlU2NvcmUgfSBmcm9tIFwiLi4vY2FsY3VsYXRlU2NvcmVcIjtcclxuaW1wb3J0IHsgU2NvcmUgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9TY29yZVwiO1xyXG5pbXBvcnQgeyBBZmZlY3RzIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQWZmZWN0c1wiO1xyXG5cclxuY2xhc3MgVGVzdERhdGEge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIHRlc3REZXNjcmlwdGlvbjogc3RyaW5nID0gXCJUZXN0XCIsXHJcbiAgICAgICAgcHVibGljIGV4cGVjdGVkU2NvcmU6IFNjb3JlLFxyXG4gICAgICAgIHB1YmxpYyBzY29yZXM6IFNjb3JlW10gPSBbXSxcclxuICAgICAgICBwdWJsaWMgcmV2ZXJzaWJsZTogYm9vbGVhbiA9IGZhbHNlLFxyXG4gICAgKSB7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgdSA9IHVuZGVmaW5lZDtcclxuZnVuY3Rpb24gcyhjb25maWRlbmNlOiBudW1iZXIgPSAxLCByZWxldmFuY2U6IG51bWJlciA9IDEsXHJcbiAgICBwcm86IGJvb2xlYW4gPSB0cnVlLCBhZmZlY3RzOiBBZmZlY3RzID0gXCJjb25maWRlbmNlXCIsIHJldmVyc2libGU6IGJvb2xlYW4gPSBmYWxzZSk6IFNjb3JlIHtcclxuICAgIHJldHVybiBuZXcgU2NvcmUoXCJcIiwgXCJcIiwgXCJcIiwgdSwgcmV2ZXJzaWJsZSwgcHJvLCBhZmZlY3RzLCBjb25maWRlbmNlLCByZWxldmFuY2UpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0KHRlc3REZXNjcmlwdGlvbjogc3RyaW5nLCBleHBlY3RlZFNjb3JlOiBTY29yZSwgc2NvcmVzOiBTY29yZVtdLCByZXZlcnNpYmxlOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgIHJldHVybiBuZXcgVGVzdERhdGEodGVzdERlc2NyaXB0aW9uLCBleHBlY3RlZFNjb3JlLCBzY29yZXMsIHJldmVyc2libGUpXHJcbn1cclxuXHJcbmNvbnN0IHBybyA9IHRydWU7XHJcbmNvbnN0IGNvbiA9IGZhbHNlO1xyXG5cclxuY29uc3QgdGVzdERhdGEgPSBbXHJcbiAgICB0KFwibm8gc2NvcmVzICAgPSAgMSAgXCIsIHMoMSksIFtdKSxcclxuICAgIHQoXCIxIGFuZCAxICAgICA9ICAxICAgIFwiLCBzKDEpLCBbcygrMSksIHMoKzEpXSksXHJcbiAgICB0KFwiIDEgYW5kIC0xICAgPSAgMSBcIiwgcygxKSwgW3MoKzEpLCBzKC0xKV0pLFxyXG4gICAgdChcIi0xICAgICAgICAgID0gIDAgXCIsIHMoMCksIFtzKC0xKV0pLFxyXG4gICAgdChcIiAxIGFuZCAtMXIgID0gIDAgXCIsIHMoMCksIFtzKCsxKSwgcygtMSx1LHUsdSx0cnVlKV0pLFxyXG4gICAgdChcIi0xciAgICAgICAgID0gLTEgXCIsIHMoLTEpLCBbcygtMSx1LHUsdSx0cnVlKV0pLFxyXG4gICAgdChcInBybyBhbmQgY29uID0gIDBcIiwgcygwKSwgW3MoKzEpLCBzKCsxLCB1LCBjb24pXSksXHJcbiAgICB0KFwiMSBSZWxldmFuY2UgPSAgMlwiLCBzKDEsIDIpLCBbcygrMSwgMSwgcHJvLCBcInJlbGV2YW5jZVwiKV0pLFxyXG4gICAgdChcInBybyBhbmQgY29uIHdpdGggcmVsZXZhbmNlXCIsIHMoMC4zMzMzMzMzMzMzMzMzMzMzKSwgW3MoKzEsIDIpLCBzKCsxLCAxLCBjb24pXSksXHJcbl1cclxuXHJcbmNvbnN0IEpzb25UZXN0RGF0YTogc3RyaW5nW10gPSBbXTtcclxuXHJcbmZvciAobGV0IGRhdGEgb2YgdGVzdERhdGEpIHtcclxuICAgIEpzb25UZXN0RGF0YS5wdXNoKEpTT04uc3RyaW5naWZ5KGRhdGEpKVxyXG59XHJcblxyXG5kZXNjcmliZS5lYWNoKEpzb25UZXN0RGF0YSkoXHJcbiAgICAnVGVzdHMnLFxyXG4gICAgKHRlc3RKc29uKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdDogVGVzdERhdGEgPSBKU09OLnBhcnNlKHRlc3RKc29uKTtcclxuICAgICAgICB0ZXN0KHQudGVzdERlc2NyaXB0aW9uICsgJyBDb25maWRlbmNlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxjdWxhdGVTY29yZSh7IGNoaWxkU2NvcmVzOiB0LnNjb3JlcywgcmV2ZXJzaWJsZTogdC5yZXZlcnNpYmxlIH0pO1xyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmNvbmZpZGVuY2UpLnRvQmUodC5leHBlY3RlZFNjb3JlLmNvbmZpZGVuY2UpXHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQucmVsZXZhbmNlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5yZWxldmFuY2UpLnRvQmUodC5leHBlY3RlZFNjb3JlLnJlbGV2YW5jZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0sXHJcbik7XHJcblxyXG4iXX0=
"use strict";

var _calculateScore = require("../calculateScore");

var _Score = require("../dataModels/Score");

var _Id = require("../dataModels/Id");

var _ScoreAndClaimEdge = require("../dataModels/ScoreAndClaimEdge");

var _ClaimEdge = require("../dataModels/ClaimEdge");

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    id       | expScore  | expRel   | reversable | affects1        | polarity1 | confidence1 | relevance1 | affects2        | polarity2 | confidence2 | relevance2\n    ", " | ", "  | ", " | ", "   | ", " | ", "  | ", "    | ", "   | ", " | ", "  | ", "    | ", "\n    ", " | ", "  | ", " | ", "   | ", " | ", "  | ", "    | ", "   | ", " | ", "  | ", "    | ", " \n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    id       | expScore  | expRel   | polarity | reversable | affects1        | confidence1 | relevance1\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", "  | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "    | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "   \n    ", " | ", "  | ", " | ", " | ", "   | ", " | ", "    | ", "\n    ", " | ", "  | ", " | ", " | ", "    | ", " | ", "    | ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

test('claim without any edges should have score of 1', function () {
  expect((0, _calculateScore.calculateScore)().confidence).toBe(1);
});
describe.each(_templateObject(), '__1', +1.00, +1.00, 'pro', false, 'confidence', +1.00, +1.00, '__2', +1.00, +2.00, 'pro', false, 'relevance', +1.00, +1.00, '__3', +0.50, +1.00, 'pro', false, 'confidence', +0.50, +1.00, '__4', +0.00, +1.00, 'pro', false, 'confidence', +0.00, +1.00, '__5', +0.00, +1.00, 'pro', false, 'confidence', -1.00, +1.00, '__6', -1.00, +1.00, 'pro', true, 'confidence', -1.00, +1.00, '__7', +0.00, +1.00, 'con', false, 'confidence', +1.00, +1.00, '__8', +0.00, +1.00, 'con', false, 'confidence', +0.50, +1.00, '__9', +0.00, +1.00, 'con', false, 'confidence', +0.00, +1.00, '_10', +1.00, +1.00, 'con', false, 'confidence', -1.00, +1.00, '_11', +1.00, +1.00, 'con', true, 'confidence', -1.00, +1.00)('', function (_ref) {
  var id = _ref.id,
      expScore = _ref.expScore,
      expRel = _ref.expRel,
      polarity = _ref.polarity,
      reversable = _ref.reversable,
      affects1 = _ref.affects1,
      confidence1 = _ref.confidence1,
      relevance1 = _ref.relevance1;
  var scoreAndClaimEdges = [new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(confidence1, relevance1, id, (0, _Id.ID)(""), undefined), new _ClaimEdge.ClaimEdge(undefined, undefined, affects1, polarity === "pro" ? true : false))];
  var result = (0, _calculateScore.calculateScore)({
    scoreAndClaimEdges: scoreAndClaimEdges,
    reversable: reversable
  });
  test("".concat(id, " ").concat(polarity, " ").concat((confidence1 < 0 ? "" : "+") + confidence1.toFixed(1), " ").concat((relevance1 < 0 ? "" : " ") + relevance1.toFixed(1), " ").concat(affects1 ? "true " : "false", " ").concat(affects1.padEnd(10), ",     score = ").concat((expScore < 0 ? "" : " ") + expScore.toFixed(1)), function () {
    expect(result.confidence).toBe(expScore);
  });
  test("".concat(id, " ").concat(polarity, " ").concat((confidence1 < 0 ? "" : "+") + confidence1.toFixed(1), " ").concat((relevance1 < 0 ? "" : " ") + relevance1.toFixed(1), " ").concat(affects1 ? "true " : "false", " ").concat(affects1.padEnd(10), ", relevance = ").concat((expRel < 0 ? "" : " ") + expRel.toFixed(1)), function () {
    expect(result.relevance).toBe(expRel);
  });
});
describe.each(_templateObject2(), '_12', +1.00, +1.00, false, 'confidence', 'pro', +1.00, +1.00, 'confidence', 'pro', +1.00, +1.00, '_13', +0.00, +1.00, false, 'confidence', 'pro', +1.00, +1.00, 'confidence', 'pro', -1.00, +1.00)('', function (_ref2) {
  var id = _ref2.id,
      expScore = _ref2.expScore,
      expRel = _ref2.expRel,
      reversable = _ref2.reversable,
      affects1 = _ref2.affects1,
      polarity1 = _ref2.polarity1,
      confidence1 = _ref2.confidence1,
      relevance1 = _ref2.relevance1,
      affects2 = _ref2.affects2,
      polarity2 = _ref2.polarity2,
      confidence2 = _ref2.confidence2,
      relevance2 = _ref2.relevance2;
  var scoreAndClaimEdges = [new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(confidence1, relevance1, id, (0, _Id.ID)(""), undefined), new _ClaimEdge.ClaimEdge(undefined, undefined, affects1, polarity1 === "pro" ? true : false)), new _ScoreAndClaimEdge.ScoreAndClaimEdge(new _Score.Score(confidence2, relevance2, id, (0, _Id.ID)(""), undefined), new _ClaimEdge.ClaimEdge(undefined, undefined, affects2, polarity2 === "pro" ? true : false))];
  var result = (0, _calculateScore.calculateScore)({
    scoreAndClaimEdges: scoreAndClaimEdges,
    reversable: reversable
  });
  test("".concat(id, " confidence"), function () {
    expect(result.confidence).toBe(expScore);
  });
  test("".concat(id, " relevance"), function () {
    expect(result.relevance).toBe(expRel);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
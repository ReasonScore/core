"use strict";

var _calculateScore = require("../calculateScore");

var _Score = require("../dataModels/Score");

class TestData {
  constructor(testDescription = "Test", expectedScore, scores = [], reversible = false) {
    this.testDescription = testDescription;
    this.expectedScore = expectedScore;
    this.scores = scores;
    this.reversible = reversible;
  }

}

function s(confidence = 1, relevance = 1, pro = true, affects = "confidence") {
  return new _Score.Score("", undefined, undefined, pro, affects, confidence, relevance);
}

function t(testDescription, expectedScore, scores, reversible = false) {
  return new TestData(testDescription, expectedScore, scores, reversible);
}

const pro = true;
const con = false;
const testData = [t("no scores = 1  ", s(1), []), t("1 and 1 = 1    ", s(1), [s(+1), s(+1)]), t("1 and -1 = 0   ", s(0), [s(+1), s(-1)]), t("pro and con = 0", s(0), [s(+1), s(+1, 1, con)])];
const JsonTestData = [];

for (let data of testData) {
  JsonTestData.push(JSON.stringify(data));
}

describe.each(JsonTestData)('Tests', testJson => {
  const t = JSON.parse(testJson);
  test(t.testDescription + ' Confidence', () => {
    const result = (0, _calculateScore.calculateScore)({
      childScores: t.scores,
      reversible: t.reversible
    });
    expect(result.confidence).toBe(t.expectedScore.confidence);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9jYWxjdWxhdGVTY29yZS50ZXN0LnNraXAudHMiXSwibmFtZXMiOlsiVGVzdERhdGEiLCJjb25zdHJ1Y3RvciIsInRlc3REZXNjcmlwdGlvbiIsImV4cGVjdGVkU2NvcmUiLCJzY29yZXMiLCJyZXZlcnNpYmxlIiwicyIsImNvbmZpZGVuY2UiLCJyZWxldmFuY2UiLCJwcm8iLCJhZmZlY3RzIiwiU2NvcmUiLCJ1bmRlZmluZWQiLCJ0IiwiY29uIiwidGVzdERhdGEiLCJKc29uVGVzdERhdGEiLCJkYXRhIiwicHVzaCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZXNjcmliZSIsImVhY2giLCJ0ZXN0SnNvbiIsInBhcnNlIiwidGVzdCIsInJlc3VsdCIsImNoaWxkU2NvcmVzIiwiZXhwZWN0IiwidG9CZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSxRQUFOLENBQWU7QUFDWEMsRUFBQUEsV0FBVyxDQUNBQyxlQUF1QixHQUFHLE1BRDFCLEVBRUFDLGFBRkEsRUFHQUMsTUFBZSxHQUFHLEVBSGxCLEVBSUFDLFVBQW1CLEdBQUcsS0FKdEIsRUFLVDtBQUFBLFNBSlNILGVBSVQsR0FKU0EsZUFJVDtBQUFBLFNBSFNDLGFBR1QsR0FIU0EsYUFHVDtBQUFBLFNBRlNDLE1BRVQsR0FGU0EsTUFFVDtBQUFBLFNBRFNDLFVBQ1QsR0FEU0EsVUFDVDtBQUNEOztBQVBVOztBQVVmLFNBQVNDLENBQVQsQ0FBV0MsVUFBa0IsR0FBRyxDQUFoQyxFQUFtQ0MsU0FBaUIsR0FBRyxDQUF2RCxFQUEwREMsR0FBWSxHQUFHLElBQXpFLEVBQStFQyxPQUFnQixHQUFHLFlBQWxHLEVBQXVIO0FBQ25ILFNBQU8sSUFBSUMsWUFBSixDQUFVLEVBQVYsRUFBY0MsU0FBZCxFQUF5QkEsU0FBekIsRUFBb0NILEdBQXBDLEVBQXlDQyxPQUF6QyxFQUFrREgsVUFBbEQsRUFBOERDLFNBQTlELENBQVA7QUFDSDs7QUFFRCxTQUFTSyxDQUFULENBQVdYLGVBQVgsRUFBb0NDLGFBQXBDLEVBQTBEQyxNQUExRCxFQUEyRUMsVUFBbUIsR0FBRyxLQUFqRyxFQUF3RztBQUNwRyxTQUFPLElBQUlMLFFBQUosQ0FBYUUsZUFBYixFQUE4QkMsYUFBOUIsRUFBNkNDLE1BQTdDLEVBQXFEQyxVQUFyRCxDQUFQO0FBQ0g7O0FBRUQsTUFBTUksR0FBRyxHQUFHLElBQVo7QUFDQSxNQUFNSyxHQUFHLEdBQUcsS0FBWjtBQUVBLE1BQU1DLFFBQVEsR0FBRyxDQUNiRixDQUFDLENBQUMsaUJBQUQsRUFBb0JQLENBQUMsQ0FBQyxDQUFELENBQXJCLEVBQTBCLEVBQTFCLENBRFksRUFFYk8sQ0FBQyxDQUFDLGlCQUFELEVBQW9CUCxDQUFDLENBQUMsQ0FBRCxDQUFyQixFQUEwQixDQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFGLENBQUYsRUFBUUEsQ0FBQyxDQUFDLENBQUMsQ0FBRixDQUFULENBQTFCLENBRlksRUFHYk8sQ0FBQyxDQUFDLGlCQUFELEVBQW9CUCxDQUFDLENBQUMsQ0FBRCxDQUFyQixFQUEwQixDQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFGLENBQUYsRUFBUUEsQ0FBQyxDQUFDLENBQUMsQ0FBRixDQUFULENBQTFCLENBSFksRUFJYk8sQ0FBQyxDQUFDLGlCQUFELEVBQW9CUCxDQUFDLENBQUMsQ0FBRCxDQUFyQixFQUEwQixDQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFGLENBQUYsRUFBUUEsQ0FBQyxDQUFDLENBQUMsQ0FBRixFQUFLLENBQUwsRUFBUVEsR0FBUixDQUFULENBQTFCLENBSlksQ0FBakI7QUFPQSxNQUFNRSxZQUFzQixHQUFHLEVBQS9COztBQUVBLEtBQUssSUFBSUMsSUFBVCxJQUFpQkYsUUFBakIsRUFBMkI7QUFDdkJDLEVBQUFBLFlBQVksQ0FBQ0UsSUFBYixDQUFrQkMsSUFBSSxDQUFDQyxTQUFMLENBQWVILElBQWYsQ0FBbEI7QUFDSDs7QUFFREksUUFBUSxDQUFDQyxJQUFULENBQWNOLFlBQWQsRUFDSSxPQURKLEVBRUtPLFFBQUQsSUFBYztBQUNWLFFBQU1WLENBQVcsR0FBR00sSUFBSSxDQUFDSyxLQUFMLENBQVdELFFBQVgsQ0FBcEI7QUFDQUUsRUFBQUEsSUFBSSxDQUFDWixDQUFDLENBQUNYLGVBQUYsR0FBb0IsYUFBckIsRUFBb0MsTUFBTTtBQUMxQyxVQUFNd0IsTUFBTSxHQUFHLG9DQUFlO0FBQUVDLE1BQUFBLFdBQVcsRUFBRWQsQ0FBQyxDQUFDVCxNQUFqQjtBQUF5QkMsTUFBQUEsVUFBVSxFQUFFUSxDQUFDLENBQUNSO0FBQXZDLEtBQWYsQ0FBZjtBQUNBdUIsSUFBQUEsTUFBTSxDQUFDRixNQUFNLENBQUNuQixVQUFSLENBQU4sQ0FBMEJzQixJQUExQixDQUErQmhCLENBQUMsQ0FBQ1YsYUFBRixDQUFnQkksVUFBL0M7QUFDSCxHQUhHLENBQUo7QUFLSCxDQVRMIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FsY3VsYXRlU2NvcmUgfSBmcm9tIFwiLi4vY2FsY3VsYXRlU2NvcmVcIjtcclxuaW1wb3J0IHsgU2NvcmUgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9TY29yZVwiO1xyXG5pbXBvcnQgeyBBZmZlY3RzIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQWZmZWN0c1wiO1xyXG5cclxuY2xhc3MgVGVzdERhdGEge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIHRlc3REZXNjcmlwdGlvbjogc3RyaW5nID0gXCJUZXN0XCIsXHJcbiAgICAgICAgcHVibGljIGV4cGVjdGVkU2NvcmU6IFNjb3JlLFxyXG4gICAgICAgIHB1YmxpYyBzY29yZXM6IFNjb3JlW10gPSBbXSxcclxuICAgICAgICBwdWJsaWMgcmV2ZXJzaWJsZTogYm9vbGVhbiA9IGZhbHNlLFxyXG4gICAgKSB7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHMoY29uZmlkZW5jZTogbnVtYmVyID0gMSwgcmVsZXZhbmNlOiBudW1iZXIgPSAxLCBwcm86IGJvb2xlYW4gPSB0cnVlLCBhZmZlY3RzOiBBZmZlY3RzID0gXCJjb25maWRlbmNlXCIpOiBTY29yZSB7XHJcbiAgICByZXR1cm4gbmV3IFNjb3JlKFwiXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBwcm8sIGFmZmVjdHMsIGNvbmZpZGVuY2UsIHJlbGV2YW5jZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHQodGVzdERlc2NyaXB0aW9uOiBzdHJpbmcsIGV4cGVjdGVkU2NvcmU6IFNjb3JlLCBzY29yZXM6IFNjb3JlW10sIHJldmVyc2libGU6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgcmV0dXJuIG5ldyBUZXN0RGF0YSh0ZXN0RGVzY3JpcHRpb24sIGV4cGVjdGVkU2NvcmUsIHNjb3JlcywgcmV2ZXJzaWJsZSlcclxufVxyXG5cclxuY29uc3QgcHJvID0gdHJ1ZTtcclxuY29uc3QgY29uID0gZmFsc2U7XHJcblxyXG5jb25zdCB0ZXN0RGF0YSA9IFtcclxuICAgIHQoXCJubyBzY29yZXMgPSAxICBcIiwgcygxKSwgW10pLFxyXG4gICAgdChcIjEgYW5kIDEgPSAxICAgIFwiLCBzKDEpLCBbcygrMSksIHMoKzEpXSksXHJcbiAgICB0KFwiMSBhbmQgLTEgPSAwICAgXCIsIHMoMCksIFtzKCsxKSwgcygtMSldKSxcclxuICAgIHQoXCJwcm8gYW5kIGNvbiA9IDBcIiwgcygwKSwgW3MoKzEpLCBzKCsxLCAxLCBjb24pXSksXHJcbl1cclxuXHJcbmNvbnN0IEpzb25UZXN0RGF0YTogc3RyaW5nW10gPSBbXTtcclxuXHJcbmZvciAobGV0IGRhdGEgb2YgdGVzdERhdGEpIHtcclxuICAgIEpzb25UZXN0RGF0YS5wdXNoKEpTT04uc3RyaW5naWZ5KGRhdGEpKVxyXG59XHJcblxyXG5kZXNjcmliZS5lYWNoKEpzb25UZXN0RGF0YSkoXHJcbiAgICAnVGVzdHMnLFxyXG4gICAgKHRlc3RKc29uKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdDogVGVzdERhdGEgPSBKU09OLnBhcnNlKHRlc3RKc29uKTtcclxuICAgICAgICB0ZXN0KHQudGVzdERlc2NyaXB0aW9uICsgJyBDb25maWRlbmNlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxjdWxhdGVTY29yZSh7IGNoaWxkU2NvcmVzOiB0LnNjb3JlcywgcmV2ZXJzaWJsZTogdC5yZXZlcnNpYmxlIH0pO1xyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmNvbmZpZGVuY2UpLnRvQmUodC5leHBlY3RlZFNjb3JlLmNvbmZpZGVuY2UpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSxcclxuKTtcclxuXHJcbiJdfQ==
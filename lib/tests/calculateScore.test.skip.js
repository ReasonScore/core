"use strict";

var _calculateScore = require("../calculateScore");

var _Score = require("../dataModels/Score");

class TestData {
  constructor(testDescription = "Test", expectedScore, scores = [], reversible = false) {
    this.testDescription = testDescription;
    this.expectedScore = expectedScore;
    this.scores = scores;
    this.reversible = reversible;
  }

}

function s(confidence = 1, relevance = 1, pro = true, affects = "confidence") {
  return new _Score.Score("", "", "", undefined, undefined, pro, affects, confidence, relevance);
}

function t(testDescription, expectedScore, scores, reversible = false) {
  return new TestData(testDescription, expectedScore, scores, reversible);
}

const pro = true;
const con = false;
const testData = [t("no scores = 1  ", s(1), []), t("1 and 1 = 1    ", s(1), [s(+1), s(+1)]), t("1 and -1 = 0   ", s(0), [s(+1), s(-1)]), t("pro and con = 0", s(0), [s(+1), s(+1, 1, con)]), t("pro and con with relevance", s(0.3333333333333333), [s(+1, 2), s(+1, 1, con)]), t("1 Relevance = 2", s(1, 2), [s(+1, 1, pro, "relevance")])];
const JsonTestData = [];

for (let data of testData) {
  JsonTestData.push(JSON.stringify(data));
}

describe.each(JsonTestData)('Tests', testJson => {
  const t = JSON.parse(testJson);
  test(t.testDescription + ' Confidence', () => {
    const result = (0, _calculateScore.calculateScore)({
      childScores: t.scores,
      reversible: t.reversible
    });
    expect(result.confidence).toBe(t.expectedScore.confidence);

    if (result.relevance != undefined) {
      expect(result.relevance).toBe(t.expectedScore.relevance);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9jYWxjdWxhdGVTY29yZS50ZXN0LnNraXAudHMiXSwibmFtZXMiOlsiVGVzdERhdGEiLCJjb25zdHJ1Y3RvciIsInRlc3REZXNjcmlwdGlvbiIsImV4cGVjdGVkU2NvcmUiLCJzY29yZXMiLCJyZXZlcnNpYmxlIiwicyIsImNvbmZpZGVuY2UiLCJyZWxldmFuY2UiLCJwcm8iLCJhZmZlY3RzIiwiU2NvcmUiLCJ1bmRlZmluZWQiLCJ0IiwiY29uIiwidGVzdERhdGEiLCJKc29uVGVzdERhdGEiLCJkYXRhIiwicHVzaCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZXNjcmliZSIsImVhY2giLCJ0ZXN0SnNvbiIsInBhcnNlIiwidGVzdCIsInJlc3VsdCIsImNoaWxkU2NvcmVzIiwiZXhwZWN0IiwidG9CZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSxRQUFOLENBQWU7QUFDWEMsRUFBQUEsV0FBVyxDQUNBQyxlQUF1QixHQUFHLE1BRDFCLEVBRUFDLGFBRkEsRUFHQUMsTUFBZSxHQUFHLEVBSGxCLEVBSUFDLFVBQW1CLEdBQUcsS0FKdEIsRUFLVDtBQUFBLFNBSlNILGVBSVQsR0FKU0EsZUFJVDtBQUFBLFNBSFNDLGFBR1QsR0FIU0EsYUFHVDtBQUFBLFNBRlNDLE1BRVQsR0FGU0EsTUFFVDtBQUFBLFNBRFNDLFVBQ1QsR0FEU0EsVUFDVDtBQUNEOztBQVBVOztBQVVmLFNBQVNDLENBQVQsQ0FBV0MsVUFBa0IsR0FBRyxDQUFoQyxFQUFtQ0MsU0FBaUIsR0FBRyxDQUF2RCxFQUEwREMsR0FBWSxHQUFHLElBQXpFLEVBQStFQyxPQUFnQixHQUFHLFlBQWxHLEVBQXVIO0FBQ25ILFNBQU8sSUFBSUMsWUFBSixDQUFVLEVBQVYsRUFBYyxFQUFkLEVBQWtCLEVBQWxCLEVBQXNCQyxTQUF0QixFQUFpQ0EsU0FBakMsRUFBNENILEdBQTVDLEVBQWlEQyxPQUFqRCxFQUEwREgsVUFBMUQsRUFBc0VDLFNBQXRFLENBQVA7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dWxhdGVTY29yZVwiO1xyXG5pbXBvcnQgeyBTY29yZSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL1Njb3JlXCI7XHJcbmltcG9ydCB7IEFmZmVjdHMgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9BZmZlY3RzXCI7XHJcblxyXG5jbGFzcyBUZXN0RGF0YSB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgdGVzdERlc2NyaXB0aW9uOiBzdHJpbmcgPSBcIlRlc3RcIixcclxuICAgICAgICBwdWJsaWMgZXhwZWN0ZWRTY29yZTogU2NvcmUsXHJcbiAgICAgICAgcHVibGljIHNjb3JlczogU2NvcmVbXSA9IFtdLFxyXG4gICAgICAgIHB1YmxpYyByZXZlcnNpYmxlOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICApIHtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcyhjb25maWRlbmNlOiBudW1iZXIgPSAxLCByZWxldmFuY2U6IG51bWJlciA9IDEsIHBybzogYm9vbGVhbiA9IHRydWUsIGFmZmVjdHM6IEFmZmVjdHMgPSBcImNvbmZpZGVuY2VcIik6IFNjb3JlIHtcclxuICAgIHJldHVybiBuZXcgU2NvcmUoXCJcIiwgXCJcIiwgXCJcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHBybywgYWZmZWN0cywgY29uZmlkZW5jZSwgcmVsZXZhbmNlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdCh0ZXN0RGVzY3JpcHRpb246IHN0cmluZywgZXhwZWN0ZWRTY29yZTogU2NvcmUsIHNjb3JlczogU2NvcmVbXSwgcmV2ZXJzaWJsZTogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICByZXR1cm4gbmV3IFRlc3REYXRhKHRlc3REZXNjcmlwdGlvbiwgZXhwZWN0ZWRTY29yZSwgc2NvcmVzLCByZXZlcnNpYmxlKVxyXG59XHJcblxyXG5jb25zdCBwcm8gPSB0cnVlO1xyXG5jb25zdCBjb24gPSBmYWxzZTtcclxuXHJcbmNvbnN0IHRlc3REYXRhID0gW1xyXG4gICAgdChcIm5vIHNjb3JlcyA9IDEgIFwiLCBzKDEpLCBbXSksXHJcbiAgICB0KFwiMSBhbmQgMSA9IDEgICAgXCIsIHMoMSksIFtzKCsxKSwgcygrMSldKSxcclxuICAgIHQoXCIxIGFuZCAtMSA9IDAgICBcIiwgcygwKSwgW3MoKzEpLCBzKC0xKV0pLFxyXG4gICAgdChcInBybyBhbmQgY29uID0gMFwiLCBzKDApLCBbcygrMSksIHMoKzEsIDEsIGNvbildKSxcclxuICAgIHQoXCJwcm8gYW5kIGNvbiB3aXRoIHJlbGV2YW5jZVwiLCBzKDAuMzMzMzMzMzMzMzMzMzMzMyksIFtzKCsxLCAyKSwgcygrMSwgMSwgY29uKV0pLFxyXG4gICAgdChcIjEgUmVsZXZhbmNlID0gMlwiLCBzKDEsIDIpLCBbcygrMSwgMSwgcHJvLCBcInJlbGV2YW5jZVwiKV0pLFxyXG5dXHJcblxyXG5jb25zdCBKc29uVGVzdERhdGE6IHN0cmluZ1tdID0gW107XHJcblxyXG5mb3IgKGxldCBkYXRhIG9mIHRlc3REYXRhKSB7XHJcbiAgICBKc29uVGVzdERhdGEucHVzaChKU09OLnN0cmluZ2lmeShkYXRhKSlcclxufVxyXG5cclxuZGVzY3JpYmUuZWFjaChKc29uVGVzdERhdGEpKFxyXG4gICAgJ1Rlc3RzJyxcclxuICAgICh0ZXN0SnNvbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHQ6IFRlc3REYXRhID0gSlNPTi5wYXJzZSh0ZXN0SnNvbik7XHJcbiAgICAgICAgdGVzdCh0LnRlc3REZXNjcmlwdGlvbiArICcgQ29uZmlkZW5jZScsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FsY3VsYXRlU2NvcmUoeyBjaGlsZFNjb3JlczogdC5zY29yZXMsIHJldmVyc2libGU6IHQucmV2ZXJzaWJsZSB9KTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5jb25maWRlbmNlKS50b0JlKHQuZXhwZWN0ZWRTY29yZS5jb25maWRlbmNlKVxyXG4gICAgICAgICAgICBpZiAocmVzdWx0LnJlbGV2YW5jZSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGV4cGVjdChyZXN1bHQucmVsZXZhbmNlKS50b0JlKHQuZXhwZWN0ZWRTY29yZS5yZWxldmFuY2UpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9LFxyXG4pO1xyXG5cclxuIl19
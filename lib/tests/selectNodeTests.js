"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectNodeTests = selectNodeTests;

var _ = require("..");

var _selectNode = require("../utils/selectNode");

var _Score = require("../dataModels/Score");

function selectNodeTests() {
  const u = undefined,
        pro = true,
        con = false;

  function s(id, parentId) {
    return new _.Action(new _Score.Score('', '', parentId, '', u, u, u, u, u, id), u, 'add_score');
  }

  test('only Main', async () => {
    const repository = new _.RepositoryLocalPure();
    const actionsDeepScores = [s('main', u)];
    await (0, _.calculateScoreActions)({
      actions: actionsDeepScores,
      repository: repository
    });
    const expected = [{
      itemId: 'main',
      status: 'selected'
    }];
    debugger;
    const result = (0, _selectNode.selectNode)('main', repository.rsData);
    expect(result).toMatchObject(expected);
  });
  test('multiple selected tests', async () => {
    const repository = new _.RepositoryLocalPure();
    const actionsDeepScores = [s('main', u), s('1', 'main'), s('2', 'main'), s('3', 'main'), s('2-1', '2'), s('2-1', '2'), s('2-1-1', '2-1'), s('2-1-2', '2-1'), s('2-1-1-1', '2-1-1')];
    await (0, _.calculateScoreActions)({
      actions: actionsDeepScores,
      repository: repository
    });
    let expected = [{
      itemId: '2-1',
      status: 'selected'
    }, {
      itemId: '2',
      status: 'ancestor'
    }, {
      itemId: 'main',
      status: 'ancestor'
    }, {
      itemId: '2-1-1',
      status: 'child'
    }, {
      itemId: '2-1-2',
      status: 'child'
    }];
    let result = (0, _selectNode.selectNode)('2-1', repository.rsData);
    debugger;
    expect(result).toMatchObject(expected);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9zZWxlY3ROb2RlVGVzdHMudHMiXSwibmFtZXMiOlsic2VsZWN0Tm9kZVRlc3RzIiwidSIsInVuZGVmaW5lZCIsInBybyIsImNvbiIsInMiLCJpZCIsInBhcmVudElkIiwiQWN0aW9uIiwiU2NvcmUiLCJ0ZXN0IiwicmVwb3NpdG9yeSIsIlJlcG9zaXRvcnlMb2NhbFB1cmUiLCJhY3Rpb25zRGVlcFNjb3JlcyIsImFjdGlvbnMiLCJleHBlY3RlZCIsIml0ZW1JZCIsInN0YXR1cyIsInJlc3VsdCIsInJzRGF0YSIsImV4cGVjdCIsInRvTWF0Y2hPYmplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFTyxTQUFTQSxlQUFULEdBQTJCO0FBQzlCLFFBQU1DLENBQUMsR0FBR0MsU0FBVjtBQUFBLFFBQXFCQyxHQUFHLEdBQUcsSUFBM0I7QUFBQSxRQUFpQ0MsR0FBRyxHQUFHLEtBQXZDOztBQUVBLFdBQVNDLENBQVQsQ0FBV0MsRUFBWCxFQUF1QkMsUUFBdkIsRUFBMEM7QUFDdEMsV0FBTyxJQUFJQyxRQUFKLENBQVcsSUFBSUMsWUFBSixDQUFVLEVBQVYsRUFBYyxFQUFkLEVBQWtCRixRQUFsQixFQUE0QixFQUE1QixFQUFnQ04sQ0FBaEMsRUFBbUNBLENBQW5DLEVBQXNDQSxDQUF0QyxFQUF5Q0EsQ0FBekMsRUFBNENBLENBQTVDLEVBQStDSyxFQUEvQyxDQUFYLEVBQStETCxDQUEvRCxFQUFrRSxXQUFsRSxDQUFQO0FBQ0g7O0FBRURTLEVBQUFBLElBQUksQ0FBQyxXQUFELEVBQWMsWUFBWTtBQUMxQixVQUFNQyxVQUFVLEdBQUcsSUFBSUMscUJBQUosRUFBbkI7QUFDQSxVQUFNQyxpQkFBMkIsR0FBRyxDQUNoQ1IsQ0FBQyxDQUFDLE1BQUQsRUFBU0osQ0FBVCxDQUQrQixDQUFwQztBQUdBLFVBQU0sNkJBQXNCO0FBQ3hCYSxNQUFBQSxPQUFPLEVBQUVELGlCQURlO0FBRXhCRixNQUFBQSxVQUFVLEVBQUVBO0FBRlksS0FBdEIsQ0FBTjtBQUlBLFVBQU1JLFFBQTBCLEdBQUcsQ0FDL0I7QUFBRUMsTUFBQUEsTUFBTSxFQUFFLE1BQVY7QUFBa0JDLE1BQUFBLE1BQU0sRUFBRTtBQUExQixLQUQrQixDQUFuQztBQUdSO0FBRVEsVUFBTUMsTUFBTSxHQUFHLDRCQUFXLE1BQVgsRUFBbUJQLFVBQVUsQ0FBQ1EsTUFBOUIsQ0FBZjtBQUVBQyxJQUFBQSxNQUFNLENBQUNGLE1BQUQsQ0FBTixDQUFlRyxhQUFmLENBQTZCTixRQUE3QjtBQUNILEdBakJHLENBQUo7QUFtQkFMLEVBQUFBLElBQUksQ0FBQyx5QkFBRCxFQUE0QixZQUFZO0FBQ3hDLFVBQU1DLFVBQVUsR0FBRyxJQUFJQyxxQkFBSixFQUFuQjtBQUNBLFVBQU1DLGlCQUEyQixHQUFHLENBQ2hDUixDQUFDLENBQUMsTUFBRCxFQUFTSixDQUFULENBRCtCLEVBRWhDSSxDQUFDLENBQUMsR0FBRCxFQUFNLE1BQU4sQ0FGK0IsRUFHaENBLENBQUMsQ0FBQyxHQUFELEVBQU0sTUFBTixDQUgrQixFQUloQ0EsQ0FBQyxDQUFDLEdBQUQsRUFBTSxNQUFOLENBSitCLEVBS2hDQSxDQUFDLENBQUMsS0FBRCxFQUFRLEdBQVIsQ0FMK0IsRUFNaENBLENBQUMsQ0FBQyxLQUFELEVBQVEsR0FBUixDQU4rQixFQU9oQ0EsQ0FBQyxDQUFDLE9BQUQsRUFBVSxLQUFWLENBUCtCLEVBUWhDQSxDQUFDLENBQUMsT0FBRCxFQUFVLEtBQVYsQ0FSK0IsRUFTaENBLENBQUMsQ0FBQyxTQUFELEVBQVksT0FBWixDQVQrQixDQUFwQztBQVdBLFVBQU0sNkJBQXNCO0FBQ3hCUyxNQUFBQSxPQUFPLEVBQUVELGlCQURlO0FBRXhCRixNQUFBQSxVQUFVLEVBQUVBO0FBRlksS0FBdEIsQ0FBTjtBQUtBLFFBQUtJLFFBQTBCLEdBQUcsQ0FDOUI7QUFBRUMsTUFBQUEsTUFBTSxFQUFFLEtBQVY7QUFBaUJDLE1BQUFBLE1BQU0sRUFBRTtBQUF6QixLQUQ4QixFQUU5QjtBQUFFRCxNQUFBQSxNQUFNLEVBQUUsR0FBVjtBQUFlQyxNQUFBQSxNQUFNLEVBQUU7QUFBdkIsS0FGOEIsRUFHOUI7QUFBRUQsTUFBQUEsTUFBTSxFQUFFLE1BQVY7QUFBa0JDLE1BQUFBLE1BQU0sRUFBRTtBQUExQixLQUg4QixFQUk5QjtBQUFFRCxNQUFBQSxNQUFNLEVBQUUsT0FBVjtBQUFtQkMsTUFBQUEsTUFBTSxFQUFFO0FBQTNCLEtBSjhCLEVBSzlCO0FBQUVELE1BQUFBLE1BQU0sRUFBRSxPQUFWO0FBQW1CQyxNQUFBQSxNQUFNLEVBQUU7QUFBM0IsS0FMOEIsQ0FBbEM7QUFPQSxRQUFJQyxNQUFNLEdBQUcsNEJBQVcsS0FBWCxFQUFrQlAsVUFBVSxDQUFDUSxNQUE3QixDQUFiO0FBQ1I7QUFDUUMsSUFBQUEsTUFBTSxDQUFDRixNQUFELENBQU4sQ0FBZUcsYUFBZixDQUE2Qk4sUUFBN0I7QUFDSCxHQTVCRyxDQUFKO0FBNkJIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVwb3NpdG9yeUxvY2FsUHVyZSwgQ2xhaW0sIEFjdGlvbiwgQ2xhaW1FZGdlLCBTY29yZVRyZWUsIGNhbGN1bGF0ZVNjb3JlQWN0aW9ucyB9IGZyb20gXCIuLlwiO1xyXG5pbXBvcnQgeyBzZWxlY3ROb2RlLCBzZWxlY3RlZFN0YXR1cyB9IGZyb20gXCIuLi91dGlscy9zZWxlY3ROb2RlXCI7XHJcbmltcG9ydCB7IFNjb3JlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvU2NvcmVcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3ROb2RlVGVzdHMoKSB7XHJcbiAgICBjb25zdCB1ID0gdW5kZWZpbmVkLCBwcm8gPSB0cnVlLCBjb24gPSBmYWxzZVxyXG5cclxuICAgIGZ1bmN0aW9uIHMoaWQ6IHN0cmluZywgcGFyZW50SWQ/OiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEFjdGlvbihuZXcgU2NvcmUoJycsICcnLCBwYXJlbnRJZCwgJycsIHUsIHUsIHUsIHUsIHUsIGlkKSwgdSwgJ2FkZF9zY29yZScpXHJcbiAgICB9XHJcblxyXG4gICAgdGVzdCgnb25seSBNYWluJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBuZXcgUmVwb3NpdG9yeUxvY2FsUHVyZSgpO1xyXG4gICAgICAgIGNvbnN0IGFjdGlvbnNEZWVwU2NvcmVzOiBBY3Rpb25bXSA9IFtcclxuICAgICAgICAgICAgcygnbWFpbicsIHUpLFxyXG4gICAgICAgIF1cclxuICAgICAgICBhd2FpdCBjYWxjdWxhdGVTY29yZUFjdGlvbnMoe1xyXG4gICAgICAgICAgICBhY3Rpb25zOiBhY3Rpb25zRGVlcFNjb3JlcyxcclxuICAgICAgICAgICAgcmVwb3NpdG9yeTogcmVwb3NpdG9yeVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgY29uc3QgZXhwZWN0ZWQ6IHNlbGVjdGVkU3RhdHVzW10gPSBbXHJcbiAgICAgICAgICAgIHsgaXRlbUlkOiAnbWFpbicsIHN0YXR1czogJ3NlbGVjdGVkJyB9LFxyXG4gICAgICAgIF1cclxuZGVidWdnZXJcclxuXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc2VsZWN0Tm9kZSgnbWFpbicsIHJlcG9zaXRvcnkucnNEYXRhKVxyXG5cclxuICAgICAgICBleHBlY3QocmVzdWx0KS50b01hdGNoT2JqZWN0KGV4cGVjdGVkKVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnbXVsdGlwbGUgc2VsZWN0ZWQgdGVzdHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVwb3NpdG9yeSA9IG5ldyBSZXBvc2l0b3J5TG9jYWxQdXJlKCk7XHJcbiAgICAgICAgY29uc3QgYWN0aW9uc0RlZXBTY29yZXM6IEFjdGlvbltdID0gW1xyXG4gICAgICAgICAgICBzKCdtYWluJywgdSksXHJcbiAgICAgICAgICAgIHMoJzEnLCAnbWFpbicpLFxyXG4gICAgICAgICAgICBzKCcyJywgJ21haW4nKSxcclxuICAgICAgICAgICAgcygnMycsICdtYWluJyksXHJcbiAgICAgICAgICAgIHMoJzItMScsICcyJyksXHJcbiAgICAgICAgICAgIHMoJzItMScsICcyJyksXHJcbiAgICAgICAgICAgIHMoJzItMS0xJywgJzItMScpLFxyXG4gICAgICAgICAgICBzKCcyLTEtMicsICcyLTEnKSxcclxuICAgICAgICAgICAgcygnMi0xLTEtMScsICcyLTEtMScpLFxyXG4gICAgICAgIF1cclxuICAgICAgICBhd2FpdCBjYWxjdWxhdGVTY29yZUFjdGlvbnMoe1xyXG4gICAgICAgICAgICBhY3Rpb25zOiBhY3Rpb25zRGVlcFNjb3JlcyxcclxuICAgICAgICAgICAgcmVwb3NpdG9yeTogcmVwb3NpdG9yeVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGxldCAgZXhwZWN0ZWQ6IHNlbGVjdGVkU3RhdHVzW10gPSBbXHJcbiAgICAgICAgICAgIHsgaXRlbUlkOiAnMi0xJywgc3RhdHVzOiAnc2VsZWN0ZWQnIH0sXHJcbiAgICAgICAgICAgIHsgaXRlbUlkOiAnMicsIHN0YXR1czogJ2FuY2VzdG9yJyB9LFxyXG4gICAgICAgICAgICB7IGl0ZW1JZDogJ21haW4nLCBzdGF0dXM6ICdhbmNlc3RvcicgfSxcclxuICAgICAgICAgICAgeyBpdGVtSWQ6ICcyLTEtMScsIHN0YXR1czogJ2NoaWxkJyB9LFxyXG4gICAgICAgICAgICB7IGl0ZW1JZDogJzItMS0yJywgc3RhdHVzOiAnY2hpbGQnIH0sXHJcbiAgICAgICAgXTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gc2VsZWN0Tm9kZSgnMi0xJywgcmVwb3NpdG9yeS5yc0RhdGEpO1xyXG5kZWJ1Z2dlclxyXG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWQpXHJcbiAgICB9KTtcclxufSJdfQ==
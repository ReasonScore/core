"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectNodeTests = selectNodeTests;

var _ = require("..");

var _selectNode = require("../utils/selectNode");

var _Score = require("../dataModels/Score");

function selectNodeTests() {
  const u = undefined,
        pro = true,
        con = false;

  function s(id, parentId) {
    return new _.Action(new _Score.Score('', '', parentId, '', u, u, u, u, u, id), u, 'add_score');
  }

  test('only Main', async () => {
    const repository = new _.RepositoryLocalPure();
    const actionsDeepScores = [s('main', u)];
    await (0, _.calculateScoreActions)({
      actions: actionsDeepScores,
      repository: repository
    });
    const expected = [{
      itemId: 'main',
      status: 'selected'
    }];
    const result = (0, _selectNode.selectNode)('main', repository.rsData);
    expect(result).toMatchObject(expected);
  });
  test('multiple selected tests', async () => {
    const repository = new _.RepositoryLocalPure();
    const actionsDeepScores = [s('main', u), s('1', 'main'), s('2', 'main'), s('3', 'main'), s('2-1', '2'), s('2-1', '2'), s('2-1-1', '2-1'), s('2-1-2', '2-1'), s('2-1-1-1', '2-1-1')];
    await (0, _.calculateScoreActions)({
      actions: actionsDeepScores,
      repository: repository
    });
    let expected = [{
      itemId: '2-1',
      status: 'selected'
    }, {
      itemId: '2',
      status: 'ancestor'
    }, {
      itemId: 'main',
      status: 'ancestor'
    }, {
      itemId: '2-1-1',
      status: 'child'
    }, {
      itemId: '2-1-2',
      status: 'child'
    }];
    let result = (0, _selectNode.selectNode)('2-1', repository.rsData);
    expect(result).toMatchObject(expected);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9zZWxlY3ROb2RlVGVzdHMudHMiXSwibmFtZXMiOlsic2VsZWN0Tm9kZVRlc3RzIiwidSIsInVuZGVmaW5lZCIsInBybyIsImNvbiIsInMiLCJpZCIsInBhcmVudElkIiwiQWN0aW9uIiwiU2NvcmUiLCJ0ZXN0IiwicmVwb3NpdG9yeSIsIlJlcG9zaXRvcnlMb2NhbFB1cmUiLCJhY3Rpb25zRGVlcFNjb3JlcyIsImFjdGlvbnMiLCJleHBlY3RlZCIsIml0ZW1JZCIsInN0YXR1cyIsInJlc3VsdCIsInJzRGF0YSIsImV4cGVjdCIsInRvTWF0Y2hPYmplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFTyxTQUFTQSxlQUFULEdBQTJCO0FBQzlCLFFBQU1DLENBQUMsR0FBR0MsU0FBVjtBQUFBLFFBQXFCQyxHQUFHLEdBQUcsSUFBM0I7QUFBQSxRQUFpQ0MsR0FBRyxHQUFHLEtBQXZDOztBQUVBLFdBQVNDLENBQVQsQ0FBV0MsRUFBWCxFQUF1QkMsUUFBdkIsRUFBMEM7QUFDdEMsV0FBTyxJQUFJQyxRQUFKLENBQVcsSUFBSUMsWUFBSixDQUFVLEVBQVYsRUFBYyxFQUFkLEVBQWtCRixRQUFsQixFQUE0QixFQUE1QixFQUFnQ04sQ0FBaEMsRUFBbUNBLENBQW5DLEVBQXNDQSxDQUF0QyxFQUF5Q0EsQ0FBekMsRUFBNENBLENBQTVDLEVBQStDSyxFQUEvQyxDQUFYLEVBQStETCxDQUEvRCxFQUFrRSxXQUFsRSxDQUFQO0FBQ0g7O0FBRURTLEVBQUFBLElBQUksQ0FBQyxXQUFELEVBQWMsWUFBWTtBQUMxQixVQUFNQyxVQUFVLEdBQUcsSUFBSUMscUJBQUosRUFBbkI7QUFDQSxVQUFNQyxpQkFBMkIsR0FBRyxDQUNoQ1IsQ0FBQyxDQUFDLE1BQUQsRUFBU0osQ0FBVCxDQUQrQixDQUFwQztBQUdBLFVBQU0sNkJBQXNCO0FBQ3hCYSxNQUFBQSxPQUFPLEVBQUVELGlCQURlO0FBRXhCRixNQUFBQSxVQUFVLEVBQUVBO0FBRlksS0FBdEIsQ0FBTjtBQUlBLFVBQU1JLFFBQTBCLEdBQUcsQ0FDL0I7QUFBRUMsTUFBQUEsTUFBTSxFQUFFLE1BQVY7QUFBa0JDLE1BQUFBLE1BQU0sRUFBRTtBQUExQixLQUQrQixDQUFuQztBQUlBLFVBQU1DLE1BQU0sR0FBRyw0QkFBVyxNQUFYLEVBQW1CUCxVQUFVLENBQUNRLE1BQTlCLENBQWY7QUFFQUMsSUFBQUEsTUFBTSxDQUFDRixNQUFELENBQU4sQ0FBZUcsYUFBZixDQUE2Qk4sUUFBN0I7QUFDSCxHQWhCRyxDQUFKO0FBa0JBTCxFQUFBQSxJQUFJLENBQUMseUJBQUQsRUFBNEIsWUFBWTtBQUN4QyxVQUFNQyxVQUFVLEdBQUcsSUFBSUMscUJBQUosRUFBbkI7QUFDQSxVQUFNQyxpQkFBMkIsR0FBRyxDQUNoQ1IsQ0FBQyxDQUFDLE1BQUQsRUFBU0osQ0FBVCxDQUQrQixFQUVoQ0ksQ0FBQyxDQUFDLEdBQUQsRUFBTSxNQUFOLENBRitCLEVBR2hDQSxDQUFDLENBQUMsR0FBRCxFQUFNLE1BQU4sQ0FIK0IsRUFJaENBLENBQUMsQ0FBQyxHQUFELEVBQU0sTUFBTixDQUorQixFQUtoQ0EsQ0FBQyxDQUFDLEtBQUQsRUFBUSxHQUFSLENBTCtCLEVBTWhDQSxDQUFDLENBQUMsS0FBRCxFQUFRLEdBQVIsQ0FOK0IsRUFPaENBLENBQUMsQ0FBQyxPQUFELEVBQVUsS0FBVixDQVArQixFQVFoQ0EsQ0FBQyxDQUFDLE9BQUQsRUFBVSxLQUFWLENBUitCLEVBU2hDQSxDQUFDLENBQUMsU0FBRCxFQUFZLE9BQVosQ0FUK0IsQ0FBcEM7QUFXQSxVQUFNLDZCQUFzQjtBQUN4QlMsTUFBQUEsT0FBTyxFQUFFRCxpQkFEZTtBQUV4QkYsTUFBQUEsVUFBVSxFQUFFQTtBQUZZLEtBQXRCLENBQU47QUFLQSxRQUFLSSxRQUEwQixHQUFHLENBQzlCO0FBQUVDLE1BQUFBLE1BQU0sRUFBRSxLQUFWO0FBQWlCQyxNQUFBQSxNQUFNLEVBQUU7QUFBekIsS0FEOEIsRUFFOUI7QUFBRUQsTUFBQUEsTUFBTSxFQUFFLEdBQVY7QUFBZUMsTUFBQUEsTUFBTSxFQUFFO0FBQXZCLEtBRjhCLEVBRzlCO0FBQUVELE1BQUFBLE1BQU0sRUFBRSxNQUFWO0FBQWtCQyxNQUFBQSxNQUFNLEVBQUU7QUFBMUIsS0FIOEIsRUFJOUI7QUFBRUQsTUFBQUEsTUFBTSxFQUFFLE9BQVY7QUFBbUJDLE1BQUFBLE1BQU0sRUFBRTtBQUEzQixLQUo4QixFQUs5QjtBQUFFRCxNQUFBQSxNQUFNLEVBQUUsT0FBVjtBQUFtQkMsTUFBQUEsTUFBTSxFQUFFO0FBQTNCLEtBTDhCLENBQWxDO0FBT0EsUUFBSUMsTUFBTSxHQUFHLDRCQUFXLEtBQVgsRUFBa0JQLFVBQVUsQ0FBQ1EsTUFBN0IsQ0FBYjtBQUNBQyxJQUFBQSxNQUFNLENBQUNGLE1BQUQsQ0FBTixDQUFlRyxhQUFmLENBQTZCTixRQUE3QjtBQUNILEdBM0JHLENBQUo7QUE0QkgiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXBvc2l0b3J5TG9jYWxQdXJlLCBDbGFpbSwgQWN0aW9uLCBDbGFpbUVkZ2UsIFNjb3JlVHJlZSwgY2FsY3VsYXRlU2NvcmVBY3Rpb25zIH0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7IHNlbGVjdE5vZGUsIHNlbGVjdGVkU3RhdHVzIH0gZnJvbSBcIi4uL3V0aWxzL3NlbGVjdE5vZGVcIjtcclxuaW1wb3J0IHsgU2NvcmUgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9TY29yZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdE5vZGVUZXN0cygpIHtcclxuICAgIGNvbnN0IHUgPSB1bmRlZmluZWQsIHBybyA9IHRydWUsIGNvbiA9IGZhbHNlXHJcblxyXG4gICAgZnVuY3Rpb24gcyhpZDogc3RyaW5nLCBwYXJlbnRJZD86IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiBuZXcgQWN0aW9uKG5ldyBTY29yZSgnJywgJycsIHBhcmVudElkLCAnJywgdSwgdSwgdSwgdSwgdSwgaWQpLCB1LCAnYWRkX3Njb3JlJylcclxuICAgIH1cclxuXHJcbiAgICB0ZXN0KCdvbmx5IE1haW4nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVwb3NpdG9yeSA9IG5ldyBSZXBvc2l0b3J5TG9jYWxQdXJlKCk7XHJcbiAgICAgICAgY29uc3QgYWN0aW9uc0RlZXBTY29yZXM6IEFjdGlvbltdID0gW1xyXG4gICAgICAgICAgICBzKCdtYWluJywgdSksXHJcbiAgICAgICAgXVxyXG4gICAgICAgIGF3YWl0IGNhbGN1bGF0ZVNjb3JlQWN0aW9ucyh7XHJcbiAgICAgICAgICAgIGFjdGlvbnM6IGFjdGlvbnNEZWVwU2NvcmVzLFxyXG4gICAgICAgICAgICByZXBvc2l0b3J5OiByZXBvc2l0b3J5XHJcbiAgICAgICAgfSlcclxuICAgICAgICBjb25zdCBleHBlY3RlZDogc2VsZWN0ZWRTdGF0dXNbXSA9IFtcclxuICAgICAgICAgICAgeyBpdGVtSWQ6ICdtYWluJywgc3RhdHVzOiAnc2VsZWN0ZWQnIH0sXHJcbiAgICAgICAgXVxyXG5cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBzZWxlY3ROb2RlKCdtYWluJywgcmVwb3NpdG9yeS5yc0RhdGEpXHJcblxyXG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWQpXHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdtdWx0aXBsZSBzZWxlY3RlZCB0ZXN0cycsIGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCByZXBvc2l0b3J5ID0gbmV3IFJlcG9zaXRvcnlMb2NhbFB1cmUoKTtcclxuICAgICAgICBjb25zdCBhY3Rpb25zRGVlcFNjb3JlczogQWN0aW9uW10gPSBbXHJcbiAgICAgICAgICAgIHMoJ21haW4nLCB1KSxcclxuICAgICAgICAgICAgcygnMScsICdtYWluJyksXHJcbiAgICAgICAgICAgIHMoJzInLCAnbWFpbicpLFxyXG4gICAgICAgICAgICBzKCczJywgJ21haW4nKSxcclxuICAgICAgICAgICAgcygnMi0xJywgJzInKSxcclxuICAgICAgICAgICAgcygnMi0xJywgJzInKSxcclxuICAgICAgICAgICAgcygnMi0xLTEnLCAnMi0xJyksXHJcbiAgICAgICAgICAgIHMoJzItMS0yJywgJzItMScpLFxyXG4gICAgICAgICAgICBzKCcyLTEtMS0xJywgJzItMS0xJyksXHJcbiAgICAgICAgXVxyXG4gICAgICAgIGF3YWl0IGNhbGN1bGF0ZVNjb3JlQWN0aW9ucyh7XHJcbiAgICAgICAgICAgIGFjdGlvbnM6IGFjdGlvbnNEZWVwU2NvcmVzLFxyXG4gICAgICAgICAgICByZXBvc2l0b3J5OiByZXBvc2l0b3J5XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgbGV0ICBleHBlY3RlZDogc2VsZWN0ZWRTdGF0dXNbXSA9IFtcclxuICAgICAgICAgICAgeyBpdGVtSWQ6ICcyLTEnLCBzdGF0dXM6ICdzZWxlY3RlZCcgfSxcclxuICAgICAgICAgICAgeyBpdGVtSWQ6ICcyJywgc3RhdHVzOiAnYW5jZXN0b3InIH0sXHJcbiAgICAgICAgICAgIHsgaXRlbUlkOiAnbWFpbicsIHN0YXR1czogJ2FuY2VzdG9yJyB9LFxyXG4gICAgICAgICAgICB7IGl0ZW1JZDogJzItMS0xJywgc3RhdHVzOiAnY2hpbGQnIH0sXHJcbiAgICAgICAgICAgIHsgaXRlbUlkOiAnMi0xLTInLCBzdGF0dXM6ICdjaGlsZCcgfSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBzZWxlY3ROb2RlKCcyLTEnLCByZXBvc2l0b3J5LnJzRGF0YSk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaE9iamVjdChleHBlY3RlZClcclxuICAgIH0pO1xyXG59Il19
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasItemChanged = hasItemChanged;
exports.itemChanges = itemChanges;
exports.pushActionIfChanged = pushActionIfChanged;

var _Action = require("../dataModels/Action");

/** Compare two scores to see if they are different in what the score is.
 *  Just compares confidence and relavance
 */
function hasItemChanged(scoreA, scoreB) {
  return !(JSON.stringify(scoreA, Object.keys(scoreA).sort()) === JSON.stringify(scoreB, Object.keys(scoreB).sort()));
}
/** Compares two data objects and create apropriate change objects if necessary
 * If a property exists on old but not new, it is ignored as the new can be a partial and is not expected to have everything
 * If the propert exists on the new but not the old. It retunrs the property on the partialNewItem object
 * If the property exists on both items and has the same value, it is ignored
 * If the property exists on both items but the value differs, it is added to both partials in the return
 * If no changes are detected then undefined is returned so it can be easily checked.
 */


function itemChanges(newItem, oldItem) {
  const partialOldItem = {};
  const partialNewItem = {}; //Loop through the old item properties to see if they changed in the new item

  for (const prop in oldItem) {
    if (oldItem[prop] !== newItem[prop]) {
      partialOldItem[prop] = oldItem[prop];
      partialNewItem[prop] = newItem[prop];
    }
  } //Loop thgout the new item properties to see if there are any new props that should be included


  for (const prop in newItem) {
    if (oldItem[prop] === undefined) {
      partialNewItem[prop] = newItem[prop];
    }
  }

  if (Object.keys(partialNewItem).length > 0) {
    return {
      partialNewItem: partialNewItem,
      partialOldItem: partialOldItem
    };
  } else return undefined;
}

function pushActionIfChanged(actions, newItem, OldItem, type, itemId) {
  const checkResult = itemChanges(newItem, OldItem);

  if (checkResult) {
    actions.push(new _Action.Action(checkResult.partialNewItem, checkResult.partialNewItem, type, itemId));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9oYXNJdGVtQ2hhbmdlZC50cyJdLCJuYW1lcyI6WyJoYXNJdGVtQ2hhbmdlZCIsInNjb3JlQSIsInNjb3JlQiIsIkpTT04iLCJzdHJpbmdpZnkiLCJPYmplY3QiLCJrZXlzIiwic29ydCIsIml0ZW1DaGFuZ2VzIiwibmV3SXRlbSIsIm9sZEl0ZW0iLCJwYXJ0aWFsT2xkSXRlbSIsInBhcnRpYWxOZXdJdGVtIiwicHJvcCIsInVuZGVmaW5lZCIsImxlbmd0aCIsInB1c2hBY3Rpb25JZkNoYW5nZWQiLCJhY3Rpb25zIiwiT2xkSXRlbSIsInR5cGUiLCJpdGVtSWQiLCJjaGVja1Jlc3VsdCIsInB1c2giLCJBY3Rpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOztBQUdBOzs7QUFHTyxTQUFTQSxjQUFULENBQXdCQyxNQUF4QixFQUFzQ0MsTUFBdEMsRUFBb0Q7QUFDdkQsU0FBTyxFQUFFQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUgsTUFBZixFQUF1QkksTUFBTSxDQUFDQyxJQUFQLENBQVlMLE1BQVosRUFBb0JNLElBQXBCLEVBQXZCLE1BQ0xKLElBQUksQ0FBQ0MsU0FBTCxDQUFlRixNQUFmLEVBQXVCRyxNQUFNLENBQUNDLElBQVAsQ0FBWUosTUFBWixFQUFvQkssSUFBcEIsRUFBdkIsQ0FERyxDQUFQO0FBRUg7QUFFRDs7Ozs7Ozs7O0FBT08sU0FBU0MsV0FBVCxDQUFxQkMsT0FBckIsRUFBbUNDLE9BQW5DLEVBQWtEO0FBQ3JELFFBQU1DLGNBQW1CLEdBQUcsRUFBNUI7QUFDQSxRQUFNQyxjQUFtQixHQUFHLEVBQTVCLENBRnFELENBSXJEOztBQUNBLE9BQUssTUFBTUMsSUFBWCxJQUFtQkgsT0FBbkIsRUFBNEI7QUFDeEIsUUFBSUEsT0FBTyxDQUFDRyxJQUFELENBQVAsS0FBa0JKLE9BQU8sQ0FBQ0ksSUFBRCxDQUE3QixFQUFxQztBQUNqQ0YsTUFBQUEsY0FBYyxDQUFDRSxJQUFELENBQWQsR0FBdUJILE9BQU8sQ0FBQ0csSUFBRCxDQUE5QjtBQUNBRCxNQUFBQSxjQUFjLENBQUNDLElBQUQsQ0FBZCxHQUF1QkosT0FBTyxDQUFDSSxJQUFELENBQTlCO0FBQ0g7QUFDSixHQVZvRCxDQVlyRDs7O0FBQ0EsT0FBSyxNQUFNQSxJQUFYLElBQW1CSixPQUFuQixFQUE0QjtBQUN4QixRQUFJQyxPQUFPLENBQUNHLElBQUQsQ0FBUCxLQUFrQkMsU0FBdEIsRUFBaUM7QUFDN0JGLE1BQUFBLGNBQWMsQ0FBQ0MsSUFBRCxDQUFkLEdBQXVCSixPQUFPLENBQUNJLElBQUQsQ0FBOUI7QUFDSDtBQUNKOztBQUVELE1BQUlSLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTSxjQUFaLEVBQTRCRyxNQUE1QixHQUFxQyxDQUF6QyxFQUE0QztBQUN4QyxXQUFPO0FBQ0hILE1BQUFBLGNBQWMsRUFBRUEsY0FEYjtBQUVIRCxNQUFBQSxjQUFjLEVBQUVBO0FBRmIsS0FBUDtBQUlILEdBTEQsTUFNSSxPQUFPRyxTQUFQO0FBQ1A7O0FBRU0sU0FBU0UsbUJBQVQsQ0FBNkJDLE9BQTdCLEVBQWdEUixPQUFoRCxFQUE4RFMsT0FBOUQsRUFBNEVDLElBQTVFLEVBQStGQyxNQUEvRixFQUFnSDtBQUNuSCxRQUFNQyxXQUFXLEdBQUdiLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVUyxPQUFWLENBQS9COztBQUNBLE1BQUlHLFdBQUosRUFBaUI7QUFDYkosSUFBQUEsT0FBTyxDQUFDSyxJQUFSLENBQWEsSUFBSUMsY0FBSixDQUFXRixXQUFXLENBQUNULGNBQXZCLEVBQXVDUyxXQUFXLENBQUNULGNBQW5ELEVBQW1FTyxJQUFuRSxFQUF5RUMsTUFBekUsQ0FBYjtBQUNIO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVtIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvSXRlbVwiO1xyXG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9BY3Rpb25cIjtcclxuaW1wb3J0IHsgQWN0aW9uVHlwZXMgfSBmcm9tIFwiLi5cIjtcclxuXHJcbi8qKiBDb21wYXJlIHR3byBzY29yZXMgdG8gc2VlIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBpbiB3aGF0IHRoZSBzY29yZSBpcy5cclxuICogIEp1c3QgY29tcGFyZXMgY29uZmlkZW5jZSBhbmQgcmVsYXZhbmNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaGFzSXRlbUNoYW5nZWQoc2NvcmVBOiBJdGVtLCBzY29yZUI6IEl0ZW0pIHtcclxuICAgIHJldHVybiAhKEpTT04uc3RyaW5naWZ5KHNjb3JlQSwgT2JqZWN0LmtleXMoc2NvcmVBKS5zb3J0KCkpID09PVxyXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHNjb3JlQiwgT2JqZWN0LmtleXMoc2NvcmVCKS5zb3J0KCkpKTtcclxufVxyXG5cclxuLyoqIENvbXBhcmVzIHR3byBkYXRhIG9iamVjdHMgYW5kIGNyZWF0ZSBhcHJvcHJpYXRlIGNoYW5nZSBvYmplY3RzIGlmIG5lY2Vzc2FyeVxyXG4gKiBJZiBhIHByb3BlcnR5IGV4aXN0cyBvbiBvbGQgYnV0IG5vdCBuZXcsIGl0IGlzIGlnbm9yZWQgYXMgdGhlIG5ldyBjYW4gYmUgYSBwYXJ0aWFsIGFuZCBpcyBub3QgZXhwZWN0ZWQgdG8gaGF2ZSBldmVyeXRoaW5nXHJcbiAqIElmIHRoZSBwcm9wZXJ0IGV4aXN0cyBvbiB0aGUgbmV3IGJ1dCBub3QgdGhlIG9sZC4gSXQgcmV0dW5ycyB0aGUgcHJvcGVydHkgb24gdGhlIHBhcnRpYWxOZXdJdGVtIG9iamVjdFxyXG4gKiBJZiB0aGUgcHJvcGVydHkgZXhpc3RzIG9uIGJvdGggaXRlbXMgYW5kIGhhcyB0aGUgc2FtZSB2YWx1ZSwgaXQgaXMgaWdub3JlZFxyXG4gKiBJZiB0aGUgcHJvcGVydHkgZXhpc3RzIG9uIGJvdGggaXRlbXMgYnV0IHRoZSB2YWx1ZSBkaWZmZXJzLCBpdCBpcyBhZGRlZCB0byBib3RoIHBhcnRpYWxzIGluIHRoZSByZXR1cm5cclxuICogSWYgbm8gY2hhbmdlcyBhcmUgZGV0ZWN0ZWQgdGhlbiB1bmRlZmluZWQgaXMgcmV0dXJuZWQgc28gaXQgY2FuIGJlIGVhc2lseSBjaGVja2VkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGl0ZW1DaGFuZ2VzKG5ld0l0ZW06IGFueSwgb2xkSXRlbTogYW55ICkge1xyXG4gICAgY29uc3QgcGFydGlhbE9sZEl0ZW06IGFueSA9IHt9O1xyXG4gICAgY29uc3QgcGFydGlhbE5ld0l0ZW06IGFueSA9IHt9O1xyXG5cclxuICAgIC8vTG9vcCB0aHJvdWdoIHRoZSBvbGQgaXRlbSBwcm9wZXJ0aWVzIHRvIHNlZSBpZiB0aGV5IGNoYW5nZWQgaW4gdGhlIG5ldyBpdGVtXHJcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gb2xkSXRlbSkge1xyXG4gICAgICAgIGlmIChvbGRJdGVtW3Byb3BdICE9PSBuZXdJdGVtW3Byb3BdKSB7XHJcbiAgICAgICAgICAgIHBhcnRpYWxPbGRJdGVtW3Byb3BdID0gb2xkSXRlbVtwcm9wXTtcclxuICAgICAgICAgICAgcGFydGlhbE5ld0l0ZW1bcHJvcF0gPSBuZXdJdGVtW3Byb3BdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL0xvb3AgdGhnb3V0IHRoZSBuZXcgaXRlbSBwcm9wZXJ0aWVzIHRvIHNlZSBpZiB0aGVyZSBhcmUgYW55IG5ldyBwcm9wcyB0aGF0IHNob3VsZCBiZSBpbmNsdWRlZFxyXG4gICAgZm9yIChjb25zdCBwcm9wIGluIG5ld0l0ZW0pIHtcclxuICAgICAgICBpZiAob2xkSXRlbVtwcm9wXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHBhcnRpYWxOZXdJdGVtW3Byb3BdID0gbmV3SXRlbVtwcm9wXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKE9iamVjdC5rZXlzKHBhcnRpYWxOZXdJdGVtKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcGFydGlhbE5ld0l0ZW06IHBhcnRpYWxOZXdJdGVtLFxyXG4gICAgICAgICAgICBwYXJ0aWFsT2xkSXRlbTogcGFydGlhbE9sZEl0ZW1cclxuICAgICAgICB9XHJcbiAgICB9IGVsc2VcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwdXNoQWN0aW9uSWZDaGFuZ2VkKGFjdGlvbnM6IEFjdGlvbltdLCBuZXdJdGVtOiBhbnksIE9sZEl0ZW06IGFueSwgdHlwZTogQWN0aW9uVHlwZXMsIGl0ZW1JZD86IHN0cmluZykge1xyXG4gICAgY29uc3QgY2hlY2tSZXN1bHQgPSBpdGVtQ2hhbmdlcyhuZXdJdGVtLCBPbGRJdGVtKTtcclxuICAgIGlmIChjaGVja1Jlc3VsdCkge1xyXG4gICAgICAgIGFjdGlvbnMucHVzaChuZXcgQWN0aW9uKGNoZWNrUmVzdWx0LnBhcnRpYWxOZXdJdGVtLCBjaGVja1Jlc3VsdC5wYXJ0aWFsTmV3SXRlbSwgdHlwZSwgaXRlbUlkKSk7XHJcbiAgICB9XHJcbn1cclxuIl19
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasItemChanged = hasItemChanged;
exports.itemChanges = itemChanges;
exports.pushActionIfChanged = pushActionIfChanged;

var _Action = require("../dataModels/Action");

/** Compare two scores to see if they are different in what the score is.
 *  Just compares confidence and relavance
 */
function hasItemChanged(scoreA, scoreB) {
  return !(JSON.stringify(scoreA, Object.keys(scoreA).sort()) === JSON.stringify(scoreB, Object.keys(scoreB).sort()));
}
/** Compares two data objects and create apropriate change objects if necessary
 * If a property exists on old but not new, it is ignored as the new can be a partial and is not expected to have everything
 * If the propert exists on the new but not the old. It retunrs the property on the partialNewItem object
 * If the property exists on both items and has the same value, it is ignored
 * If the property exists on both items but the value differs, it is added to both partials in the return
 * If no changes are detected then undefined is returned so it can be easily checked.
 */


function itemChanges(newItem, oldItem) {
  const partialOldItem = {};
  const partialNewItem = {}; //Loop through the old item properties to see if they changed in the new item

  for (const prop in oldItem) {
    if (oldItem[prop] !== newItem[prop]) {
      partialOldItem[prop] = oldItem[prop];
      partialNewItem[prop] = newItem[prop];
    }
  } //Loop thgout the new item properties to see if there are any new props that should be included


  for (const prop in newItem) {
    if (oldItem[prop] === undefined) {
      partialNewItem[prop] = newItem[prop];
    }
  }

  if (Object.keys(partialNewItem).length > 0) {
    return {
      partialNewItem: partialNewItem,
      partialOldItem: partialOldItem
    };
  } else return undefined;
}

function pushActionIfChanged(actions, newItem, OldItem, type, itemId) {
  const checkResult = itemChanges(newItem, OldItem);

  if (checkResult) {
    actions.push(new _Action.Action(checkResult.partialNewItem, checkResult.partialNewItem, type, itemId));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9oYXNJdGVtQ2hhbmdlZC50cyJdLCJuYW1lcyI6WyJoYXNJdGVtQ2hhbmdlZCIsInNjb3JlQSIsInNjb3JlQiIsIkpTT04iLCJzdHJpbmdpZnkiLCJPYmplY3QiLCJrZXlzIiwic29ydCIsIml0ZW1DaGFuZ2VzIiwibmV3SXRlbSIsIm9sZEl0ZW0iLCJwYXJ0aWFsT2xkSXRlbSIsInBhcnRpYWxOZXdJdGVtIiwicHJvcCIsInVuZGVmaW5lZCIsImxlbmd0aCIsInB1c2hBY3Rpb25JZkNoYW5nZWQiLCJhY3Rpb25zIiwiT2xkSXRlbSIsInR5cGUiLCJpdGVtSWQiLCJjaGVja1Jlc3VsdCIsInB1c2giLCJBY3Rpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOztBQUdBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLGNBQVQsQ0FBd0JDLE1BQXhCLEVBQXNDQyxNQUF0QyxFQUFvRDtBQUN2RCxTQUFPLEVBQUVDLElBQUksQ0FBQ0MsU0FBTCxDQUFlSCxNQUFmLEVBQXVCSSxNQUFNLENBQUNDLElBQVAsQ0FBWUwsTUFBWixFQUFvQk0sSUFBcEIsRUFBdkIsTUFDTEosSUFBSSxDQUFDQyxTQUFMLENBQWVGLE1BQWYsRUFBdUJHLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixNQUFaLEVBQW9CSyxJQUFwQixFQUF2QixDQURHLENBQVA7QUFFSDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQyxXQUFULENBQXFCQyxPQUFyQixFQUFtQ0MsT0FBbkMsRUFBa0Q7QUFDckQsUUFBTUMsY0FBbUIsR0FBRyxFQUE1QjtBQUNBLFFBQU1DLGNBQW1CLEdBQUcsRUFBNUIsQ0FGcUQsQ0FJckQ7O0FBQ0EsT0FBSyxNQUFNQyxJQUFYLElBQW1CSCxPQUFuQixFQUE0QjtBQUN4QixRQUFJQSxPQUFPLENBQUNHLElBQUQsQ0FBUCxLQUFrQkosT0FBTyxDQUFDSSxJQUFELENBQTdCLEVBQXFDO0FBQ2pDRixNQUFBQSxjQUFjLENBQUNFLElBQUQsQ0FBZCxHQUF1QkgsT0FBTyxDQUFDRyxJQUFELENBQTlCO0FBQ0FELE1BQUFBLGNBQWMsQ0FBQ0MsSUFBRCxDQUFkLEdBQXVCSixPQUFPLENBQUNJLElBQUQsQ0FBOUI7QUFDSDtBQUNKLEdBVm9ELENBWXJEOzs7QUFDQSxPQUFLLE1BQU1BLElBQVgsSUFBbUJKLE9BQW5CLEVBQTRCO0FBQ3hCLFFBQUlDLE9BQU8sQ0FBQ0csSUFBRCxDQUFQLEtBQWtCQyxTQUF0QixFQUFpQztBQUM3QkYsTUFBQUEsY0FBYyxDQUFDQyxJQUFELENBQWQsR0FBdUJKLE9BQU8sQ0FBQ0ksSUFBRCxDQUE5QjtBQUNIO0FBQ0o7O0FBRUQsTUFBSVIsTUFBTSxDQUFDQyxJQUFQLENBQVlNLGNBQVosRUFBNEJHLE1BQTVCLEdBQXFDLENBQXpDLEVBQTRDO0FBQ3hDLFdBQU87QUFDSEgsTUFBQUEsY0FBYyxFQUFFQSxjQURiO0FBRUhELE1BQUFBLGNBQWMsRUFBRUE7QUFGYixLQUFQO0FBSUgsR0FMRCxNQU1JLE9BQU9HLFNBQVA7QUFDUDs7QUFFTSxTQUFTRSxtQkFBVCxDQUE2QkMsT0FBN0IsRUFBZ0RSLE9BQWhELEVBQThEUyxPQUE5RCxFQUE0RUMsSUFBNUUsRUFBK0ZDLE1BQS9GLEVBQWdIO0FBQ25ILFFBQU1DLFdBQVcsR0FBR2IsV0FBVyxDQUFDQyxPQUFELEVBQVVTLE9BQVYsQ0FBL0I7O0FBQ0EsTUFBSUcsV0FBSixFQUFpQjtBQUNiSixJQUFBQSxPQUFPLENBQUNLLElBQVIsQ0FBYSxJQUFJQyxjQUFKLENBQVdGLFdBQVcsQ0FBQ1QsY0FBdkIsRUFBdUNTLFdBQVcsQ0FBQ1QsY0FBbkQsRUFBbUVPLElBQW5FLEVBQXlFQyxNQUF6RSxDQUFiO0FBQ0g7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZW0gfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9JdGVtXCI7XHJcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0FjdGlvblwiO1xyXG5pbXBvcnQgeyBBY3Rpb25UeXBlcyB9IGZyb20gXCIuLlwiO1xyXG5cclxuLyoqIENvbXBhcmUgdHdvIHNjb3JlcyB0byBzZWUgaWYgdGhleSBhcmUgZGlmZmVyZW50IGluIHdoYXQgdGhlIHNjb3JlIGlzLlxyXG4gKiAgSnVzdCBjb21wYXJlcyBjb25maWRlbmNlIGFuZCByZWxhdmFuY2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBoYXNJdGVtQ2hhbmdlZChzY29yZUE6IEl0ZW0sIHNjb3JlQjogSXRlbSkge1xyXG4gICAgcmV0dXJuICEoSlNPTi5zdHJpbmdpZnkoc2NvcmVBLCBPYmplY3Qua2V5cyhzY29yZUEpLnNvcnQoKSkgPT09XHJcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoc2NvcmVCLCBPYmplY3Qua2V5cyhzY29yZUIpLnNvcnQoKSkpO1xyXG59XHJcblxyXG4vKiogQ29tcGFyZXMgdHdvIGRhdGEgb2JqZWN0cyBhbmQgY3JlYXRlIGFwcm9wcmlhdGUgY2hhbmdlIG9iamVjdHMgaWYgbmVjZXNzYXJ5XHJcbiAqIElmIGEgcHJvcGVydHkgZXhpc3RzIG9uIG9sZCBidXQgbm90IG5ldywgaXQgaXMgaWdub3JlZCBhcyB0aGUgbmV3IGNhbiBiZSBhIHBhcnRpYWwgYW5kIGlzIG5vdCBleHBlY3RlZCB0byBoYXZlIGV2ZXJ5dGhpbmdcclxuICogSWYgdGhlIHByb3BlcnQgZXhpc3RzIG9uIHRoZSBuZXcgYnV0IG5vdCB0aGUgb2xkLiBJdCByZXR1bnJzIHRoZSBwcm9wZXJ0eSBvbiB0aGUgcGFydGlhbE5ld0l0ZW0gb2JqZWN0XHJcbiAqIElmIHRoZSBwcm9wZXJ0eSBleGlzdHMgb24gYm90aCBpdGVtcyBhbmQgaGFzIHRoZSBzYW1lIHZhbHVlLCBpdCBpcyBpZ25vcmVkXHJcbiAqIElmIHRoZSBwcm9wZXJ0eSBleGlzdHMgb24gYm90aCBpdGVtcyBidXQgdGhlIHZhbHVlIGRpZmZlcnMsIGl0IGlzIGFkZGVkIHRvIGJvdGggcGFydGlhbHMgaW4gdGhlIHJldHVyblxyXG4gKiBJZiBubyBjaGFuZ2VzIGFyZSBkZXRlY3RlZCB0aGVuIHVuZGVmaW5lZCBpcyByZXR1cm5lZCBzbyBpdCBjYW4gYmUgZWFzaWx5IGNoZWNrZWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXRlbUNoYW5nZXMobmV3SXRlbTogYW55LCBvbGRJdGVtOiBhbnkgKSB7XHJcbiAgICBjb25zdCBwYXJ0aWFsT2xkSXRlbTogYW55ID0ge307XHJcbiAgICBjb25zdCBwYXJ0aWFsTmV3SXRlbTogYW55ID0ge307XHJcblxyXG4gICAgLy9Mb29wIHRocm91Z2ggdGhlIG9sZCBpdGVtIHByb3BlcnRpZXMgdG8gc2VlIGlmIHRoZXkgY2hhbmdlZCBpbiB0aGUgbmV3IGl0ZW1cclxuICAgIGZvciAoY29uc3QgcHJvcCBpbiBvbGRJdGVtKSB7XHJcbiAgICAgICAgaWYgKG9sZEl0ZW1bcHJvcF0gIT09IG5ld0l0ZW1bcHJvcF0pIHtcclxuICAgICAgICAgICAgcGFydGlhbE9sZEl0ZW1bcHJvcF0gPSBvbGRJdGVtW3Byb3BdO1xyXG4gICAgICAgICAgICBwYXJ0aWFsTmV3SXRlbVtwcm9wXSA9IG5ld0l0ZW1bcHJvcF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vTG9vcCB0aGdvdXQgdGhlIG5ldyBpdGVtIHByb3BlcnRpZXMgdG8gc2VlIGlmIHRoZXJlIGFyZSBhbnkgbmV3IHByb3BzIHRoYXQgc2hvdWxkIGJlIGluY2x1ZGVkXHJcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gbmV3SXRlbSkge1xyXG4gICAgICAgIGlmIChvbGRJdGVtW3Byb3BdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcGFydGlhbE5ld0l0ZW1bcHJvcF0gPSBuZXdJdGVtW3Byb3BdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoT2JqZWN0LmtleXMocGFydGlhbE5ld0l0ZW0pLmxlbmd0aCA+IDApIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwYXJ0aWFsTmV3SXRlbTogcGFydGlhbE5ld0l0ZW0sXHJcbiAgICAgICAgICAgIHBhcnRpYWxPbGRJdGVtOiBwYXJ0aWFsT2xkSXRlbVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHB1c2hBY3Rpb25JZkNoYW5nZWQoYWN0aW9uczogQWN0aW9uW10sIG5ld0l0ZW06IGFueSwgT2xkSXRlbTogYW55LCB0eXBlOiBBY3Rpb25UeXBlcywgaXRlbUlkPzogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBjaGVja1Jlc3VsdCA9IGl0ZW1DaGFuZ2VzKG5ld0l0ZW0sIE9sZEl0ZW0pO1xyXG4gICAgaWYgKGNoZWNrUmVzdWx0KSB7XHJcbiAgICAgICAgYWN0aW9ucy5wdXNoKG5ldyBBY3Rpb24oY2hlY2tSZXN1bHQucGFydGlhbE5ld0l0ZW0sIGNoZWNrUmVzdWx0LnBhcnRpYWxOZXdJdGVtLCB0eXBlLCBpdGVtSWQpKTtcclxuICAgIH1cclxufVxyXG4iXX0=
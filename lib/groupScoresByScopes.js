"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.groupScoresByScopes = groupScoresByScopes;

var _Affects = require("./dataModels/Affects");

var _Score = require("./dataModels/Score");

var _Id = require("./dataModels/Id");

/**
 * Calculates a new score based on the child scores and how thay wre linked (by edged) the claim this score is for.
 * This function does not take into account scopes.
 * The caller of this fuction should only put the children and scores into this array that are within scope.
 */
function groupScoresByScopes() {
  var scoreAndClaimEdges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var reversable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var sourceClaimId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, _Id.ID)("");
  var newScore = new _Score.Score(); // newScore.affects = affects;
  // newScore.reversable = reversable

  var childrenConfidence = 0;
  var childrenRelevance = 0;

  if (scoreAndClaimEdges.filter(function (c) {
    return c.claimEdge.affects === _Affects.Affects.Confidence;
  }).length < 1) {
    // If there are no children that affect the confidence of the claim
    // then assume the claim is 100% confident and start strength and relevance at 1
    childrenConfidence = 1;
    childrenRelevance = 1;
  }

  scoreAndClaimEdges.forEach(function (scoreAndClaimEdge) {
    // Loop through the child scores and determine the score of the parent.
    if (scoreAndClaimEdge.claimEdge.affects === _Affects.Affects.Confidence) {
      // Process edges that affect confidence
      if (scoreAndClaimEdge.claimEdge.pro) {
        childrenConfidence += scoreAndClaimEdge.score.confidence * scoreAndClaimEdge.score.relevance; // Add up all the strength of the children

        childrenRelevance += scoreAndClaimEdge.score.relevance; //Add up the relevance separately so we can do a weighted agerage later
      } else {
        childrenConfidence -= scoreAndClaimEdge.score.confidence * scoreAndClaimEdge.score.relevance;
        childrenRelevance += scoreAndClaimEdge.score.relevance;
      }
    }

    if (scoreAndClaimEdge.claimEdge.affects === 'relevance') {
      // Process Relevance child claims
      if (scoreAndClaimEdge.claimEdge.pro) {
        newScore.relevance += scoreAndClaimEdge.score.confidence; // Add up all the strength of the children
      } else {
        newScore.relevance -= scoreAndClaimEdge.score.confidence;
      }
    }
  });

  if (childrenRelevance === 0) {
    // Protect against division by zero
    newScore.confidence = 0;
  } else {
    //Calculate the score
    newScore.confidence = childrenConfidence / childrenRelevance;
  }

  if (!reversable && newScore.confidence < 0) {
    // If it is not reversable then do not let it go negative
    newScore.confidence = 0;
  }

  if (Object.is(newScore.confidence, -0)) {
    // Protect against negative zero 
    newScore.confidence = 0;
  }

  if (sourceClaimId !== undefined) {
    newScore.sourceClaimId = sourceClaimId;
  }

  return newScore;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm91cFNjb3Jlc0J5U2NvcGVzLnRzIl0sIm5hbWVzIjpbImdyb3VwU2NvcmVzQnlTY29wZXMiLCJzY29yZUFuZENsYWltRWRnZXMiLCJyZXZlcnNhYmxlIiwic291cmNlQ2xhaW1JZCIsIm5ld1Njb3JlIiwiU2NvcmUiLCJjaGlsZHJlbkNvbmZpZGVuY2UiLCJjaGlsZHJlblJlbGV2YW5jZSIsImZpbHRlciIsImMiLCJjbGFpbUVkZ2UiLCJhZmZlY3RzIiwiQWZmZWN0cyIsIkNvbmZpZGVuY2UiLCJsZW5ndGgiLCJmb3JFYWNoIiwic2NvcmVBbmRDbGFpbUVkZ2UiLCJwcm8iLCJzY29yZSIsImNvbmZpZGVuY2UiLCJyZWxldmFuY2UiLCJPYmplY3QiLCJpcyIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBOzs7OztBQUtPLFNBQVNBLG1CQUFULEdBWUw7QUFBQSxNQVZFQyxrQkFVRix1RUFWNEMsRUFVNUM7QUFBQSxNQUZFQyxVQUVGLHVFQUZlLElBRWY7QUFBQSxNQURFQyxhQUNGLHVFQURzQixZQUFHLEVBQUgsQ0FDdEI7QUFDRSxNQUFNQyxRQUFlLEdBQUcsSUFBSUMsWUFBSixFQUF4QixDQURGLENBRUU7QUFDQTs7QUFDQSxNQUFJQyxrQkFBa0IsR0FBRyxDQUF6QjtBQUNBLE1BQUlDLGlCQUFpQixHQUFHLENBQXhCOztBQUVBLE1BQUlOLGtCQUFrQixDQUFDTyxNQUFuQixDQUEwQixVQUFBQyxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDQyxTQUFGLENBQVlDLE9BQVosS0FBd0JDLGlCQUFRQyxVQUFwQztBQUFBLEdBQTNCLEVBQTJFQyxNQUEzRSxHQUFvRixDQUF4RixFQUEyRjtBQUN2RjtBQUNBO0FBQ0FSLElBQUFBLGtCQUFrQixHQUFHLENBQXJCO0FBQ0FDLElBQUFBLGlCQUFpQixHQUFHLENBQXBCO0FBQ0g7O0FBRUROLEVBQUFBLGtCQUFrQixDQUFDYyxPQUFuQixDQUEyQixVQUFDQyxpQkFBRCxFQUF1QjtBQUM5QztBQUNBLFFBQUlBLGlCQUFpQixDQUFDTixTQUFsQixDQUE0QkMsT0FBNUIsS0FBd0NDLGlCQUFRQyxVQUFwRCxFQUFnRTtBQUM1RDtBQUNBLFVBQUlHLGlCQUFpQixDQUFDTixTQUFsQixDQUE0Qk8sR0FBaEMsRUFBcUM7QUFDakNYLFFBQUFBLGtCQUFrQixJQUFJVSxpQkFBaUIsQ0FBQ0UsS0FBbEIsQ0FBd0JDLFVBQXhCLEdBQXFDSCxpQkFBaUIsQ0FBQ0UsS0FBbEIsQ0FBd0JFLFNBQW5GLENBRGlDLENBQzZEOztBQUM5RmIsUUFBQUEsaUJBQWlCLElBQUlTLGlCQUFpQixDQUFDRSxLQUFsQixDQUF3QkUsU0FBN0MsQ0FGaUMsQ0FFdUI7QUFDM0QsT0FIRCxNQUdPO0FBQ0hkLFFBQUFBLGtCQUFrQixJQUFJVSxpQkFBaUIsQ0FBQ0UsS0FBbEIsQ0FBd0JDLFVBQXhCLEdBQXFDSCxpQkFBaUIsQ0FBQ0UsS0FBbEIsQ0FBd0JFLFNBQW5GO0FBQ0FiLFFBQUFBLGlCQUFpQixJQUFJUyxpQkFBaUIsQ0FBQ0UsS0FBbEIsQ0FBd0JFLFNBQTdDO0FBQ0g7QUFDSjs7QUFFRCxRQUFJSixpQkFBaUIsQ0FBQ04sU0FBbEIsQ0FBNEJDLE9BQTVCLEtBQXdDLFdBQTVDLEVBQXlEO0FBQ3JEO0FBQ0EsVUFBSUssaUJBQWlCLENBQUNOLFNBQWxCLENBQTRCTyxHQUFoQyxFQUFxQztBQUNqQ2IsUUFBQUEsUUFBUSxDQUFDZ0IsU0FBVCxJQUFzQkosaUJBQWlCLENBQUNFLEtBQWxCLENBQXdCQyxVQUE5QyxDQURpQyxDQUN5QjtBQUM3RCxPQUZELE1BRU87QUFDSGYsUUFBQUEsUUFBUSxDQUFDZ0IsU0FBVCxJQUFzQkosaUJBQWlCLENBQUNFLEtBQWxCLENBQXdCQyxVQUE5QztBQUNIO0FBQ0o7QUFDSixHQXJCRDs7QUF1QkEsTUFBSVosaUJBQWlCLEtBQUssQ0FBMUIsRUFBNkI7QUFDekI7QUFDQUgsSUFBQUEsUUFBUSxDQUFDZSxVQUFULEdBQXNCLENBQXRCO0FBQ0gsR0FIRCxNQUdPO0FBQ0g7QUFDQWYsSUFBQUEsUUFBUSxDQUFDZSxVQUFULEdBQXNCYixrQkFBa0IsR0FBR0MsaUJBQTNDO0FBQ0g7O0FBRUQsTUFBSSxDQUFDTCxVQUFELElBQWVFLFFBQVEsQ0FBQ2UsVUFBVCxHQUFzQixDQUF6QyxFQUE0QztBQUN4QztBQUNBZixJQUFBQSxRQUFRLENBQUNlLFVBQVQsR0FBc0IsQ0FBdEI7QUFDSDs7QUFFRCxNQUFJRSxNQUFNLENBQUNDLEVBQVAsQ0FBVWxCLFFBQVEsQ0FBQ2UsVUFBbkIsRUFBK0IsQ0FBQyxDQUFoQyxDQUFKLEVBQXdDO0FBQ3BDO0FBQ0FmLElBQUFBLFFBQVEsQ0FBQ2UsVUFBVCxHQUFzQixDQUF0QjtBQUNIOztBQUVELE1BQUloQixhQUFhLEtBQUtvQixTQUF0QixFQUFpQztBQUM3Qm5CLElBQUFBLFFBQVEsQ0FBQ0QsYUFBVCxHQUF5QkEsYUFBekI7QUFDSDs7QUFHRCxTQUFPQyxRQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZmZlY3RzIH0gZnJvbSBcIi4vZGF0YU1vZGVscy9BZmZlY3RzXCJcbmltcG9ydCB7IFNjb3JlIH0gZnJvbSBcIi4vZGF0YU1vZGVscy9TY29yZVwiO1xuaW1wb3J0IHsgSWQsIElEIH0gZnJvbSBcIi4vZGF0YU1vZGVscy9JZFwiO1xuaW1wb3J0IHsgU2NvcmVBbmRDbGFpbUVkZ2UgfSBmcm9tIFwiLi9kYXRhTW9kZWxzL1Njb3JlQW5kQ2xhaW1FZGdlXCI7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhIG5ldyBzY29yZSBiYXNlZCBvbiB0aGUgY2hpbGQgc2NvcmVzIGFuZCBob3cgdGhheSB3cmUgbGlua2VkIChieSBlZGdlZCkgdGhlIGNsYWltIHRoaXMgc2NvcmUgaXMgZm9yLlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB0YWtlIGludG8gYWNjb3VudCBzY29wZXMuXG4gKiBUaGUgY2FsbGVyIG9mIHRoaXMgZnVjdGlvbiBzaG91bGQgb25seSBwdXQgdGhlIGNoaWxkcmVuIGFuZCBzY29yZXMgaW50byB0aGlzIGFycmF5IHRoYXQgYXJlIHdpdGhpbiBzY29wZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwU2NvcmVzQnlTY29wZXMoXG4gICAgLyoqQW4gYXJyYXkgb2YgZ3JvdXBlZCBlZGdlcyBhbmQgY2xhaW1zKi9cbiAgICBzY29yZUFuZENsYWltRWRnZXM6IFNjb3JlQW5kQ2xhaW1FZGdlW10gPSBbXSxcbiAgICAvLyAvKiogQW4gYXJyYXkgb2Ygc2NvcmVzIGZvciBjaGlsZCBjbGFpbXMgbGlua2VkIHRvIHRoZSBjbGFpbSB0aGlzIHNjb3JlIGlzIGZvci4gKi9cbiAgICAvLyBjaGlsZFNjb3JlczogU2NvcmVbXSA9IFtdLFxuICAgIC8vIC8qKiBJcyB0aGlzIHNjb3JlIHBybyBvZiBpdCdzIHBhcmVudCAob3IgZmFsc2UgaWYgaXQgaXMgYSBjb24pICovXG4gICAgLy8gcHJvID0gdHJ1ZSxcbiAgICAvLyAvKiogSG93IGRvZXMgdGhpcyBzY29yZSBhZmZlY3QgaXQncyBwYXJlbnQgKi9cbiAgICAvLyBhZmZlY3RzID0gQWZmZWN0cy5Db25maWRlbmNlLFxuICAgIC8vIC8qKiBDYW4gdGhpcyBzY29yZSBmYWxsIGJlbG93IGEgMCBjb25maWRlbmNlIChoYXZlIGEgbmVnYXRpdmUgY29uZmlkZW5jZSkgKi9cbiAgICByZXZlcnNhYmxlID0gdHJ1ZSxcbiAgICBzb3VyY2VDbGFpbUlkOiBJZCA9IElEKFwiXCIpLFxuKSB7XG4gICAgY29uc3QgbmV3U2NvcmU6IFNjb3JlID0gbmV3IFNjb3JlKCk7XG4gICAgLy8gbmV3U2NvcmUuYWZmZWN0cyA9IGFmZmVjdHM7XG4gICAgLy8gbmV3U2NvcmUucmV2ZXJzYWJsZSA9IHJldmVyc2FibGVcbiAgICBsZXQgY2hpbGRyZW5Db25maWRlbmNlID0gMFxuICAgIGxldCBjaGlsZHJlblJlbGV2YW5jZSA9IDBcblxuICAgIGlmIChzY29yZUFuZENsYWltRWRnZXMuZmlsdGVyKGMgPT4gYy5jbGFpbUVkZ2UuYWZmZWN0cyA9PT0gQWZmZWN0cy5Db25maWRlbmNlKS5sZW5ndGggPCAxKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBjaGlsZHJlbiB0aGF0IGFmZmVjdCB0aGUgY29uZmlkZW5jZSBvZiB0aGUgY2xhaW1cbiAgICAgICAgLy8gdGhlbiBhc3N1bWUgdGhlIGNsYWltIGlzIDEwMCUgY29uZmlkZW50IGFuZCBzdGFydCBzdHJlbmd0aCBhbmQgcmVsZXZhbmNlIGF0IDFcbiAgICAgICAgY2hpbGRyZW5Db25maWRlbmNlID0gMTtcbiAgICAgICAgY2hpbGRyZW5SZWxldmFuY2UgPSAxO1xuICAgIH1cblxuICAgIHNjb3JlQW5kQ2xhaW1FZGdlcy5mb3JFYWNoKChzY29yZUFuZENsYWltRWRnZSkgPT4ge1xuICAgICAgICAvLyBMb29wIHRocm91Z2ggdGhlIGNoaWxkIHNjb3JlcyBhbmQgZGV0ZXJtaW5lIHRoZSBzY29yZSBvZiB0aGUgcGFyZW50LlxuICAgICAgICBpZiAoc2NvcmVBbmRDbGFpbUVkZ2UuY2xhaW1FZGdlLmFmZmVjdHMgPT09IEFmZmVjdHMuQ29uZmlkZW5jZSkge1xuICAgICAgICAgICAgLy8gUHJvY2VzcyBlZGdlcyB0aGF0IGFmZmVjdCBjb25maWRlbmNlXG4gICAgICAgICAgICBpZiAoc2NvcmVBbmRDbGFpbUVkZ2UuY2xhaW1FZGdlLnBybykge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuQ29uZmlkZW5jZSArPSBzY29yZUFuZENsYWltRWRnZS5zY29yZS5jb25maWRlbmNlICogc2NvcmVBbmRDbGFpbUVkZ2Uuc2NvcmUucmVsZXZhbmNlOyAvLyBBZGQgdXAgYWxsIHRoZSBzdHJlbmd0aCBvZiB0aGUgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICBjaGlsZHJlblJlbGV2YW5jZSArPSBzY29yZUFuZENsYWltRWRnZS5zY29yZS5yZWxldmFuY2U7IC8vQWRkIHVwIHRoZSByZWxldmFuY2Ugc2VwYXJhdGVseSBzbyB3ZSBjYW4gZG8gYSB3ZWlnaHRlZCBhZ2VyYWdlIGxhdGVyXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuQ29uZmlkZW5jZSAtPSBzY29yZUFuZENsYWltRWRnZS5zY29yZS5jb25maWRlbmNlICogc2NvcmVBbmRDbGFpbUVkZ2Uuc2NvcmUucmVsZXZhbmNlO1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuUmVsZXZhbmNlICs9IHNjb3JlQW5kQ2xhaW1FZGdlLnNjb3JlLnJlbGV2YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzY29yZUFuZENsYWltRWRnZS5jbGFpbUVkZ2UuYWZmZWN0cyA9PT0gJ3JlbGV2YW5jZScpIHtcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgUmVsZXZhbmNlIGNoaWxkIGNsYWltc1xuICAgICAgICAgICAgaWYgKHNjb3JlQW5kQ2xhaW1FZGdlLmNsYWltRWRnZS5wcm8pIHtcbiAgICAgICAgICAgICAgICBuZXdTY29yZS5yZWxldmFuY2UgKz0gc2NvcmVBbmRDbGFpbUVkZ2Uuc2NvcmUuY29uZmlkZW5jZTsgLy8gQWRkIHVwIGFsbCB0aGUgc3RyZW5ndGggb2YgdGhlIGNoaWxkcmVuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld1Njb3JlLnJlbGV2YW5jZSAtPSBzY29yZUFuZENsYWltRWRnZS5zY29yZS5jb25maWRlbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoY2hpbGRyZW5SZWxldmFuY2UgPT09IDApIHtcbiAgICAgICAgLy8gUHJvdGVjdCBhZ2FpbnN0IGRpdmlzaW9uIGJ5IHplcm9cbiAgICAgICAgbmV3U2NvcmUuY29uZmlkZW5jZSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy9DYWxjdWxhdGUgdGhlIHNjb3JlXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSBjaGlsZHJlbkNvbmZpZGVuY2UgLyBjaGlsZHJlblJlbGV2YW5jZTtcbiAgICB9XG5cbiAgICBpZiAoIXJldmVyc2FibGUgJiYgbmV3U2NvcmUuY29uZmlkZW5jZSA8IDApIHtcbiAgICAgICAgLy8gSWYgaXQgaXMgbm90IHJldmVyc2FibGUgdGhlbiBkbyBub3QgbGV0IGl0IGdvIG5lZ2F0aXZlXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAwXG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5pcyhuZXdTY29yZS5jb25maWRlbmNlLCAtMCkpIHtcbiAgICAgICAgLy8gUHJvdGVjdCBhZ2FpbnN0IG5lZ2F0aXZlIHplcm8gXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAwO1xuICAgIH1cblxuICAgIGlmIChzb3VyY2VDbGFpbUlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3U2NvcmUuc291cmNlQ2xhaW1JZCA9IHNvdXJjZUNsYWltSWRcbiAgICB9XG5cblxuICAgIHJldHVybiBuZXdTY29yZTtcbn1cblxuIl19
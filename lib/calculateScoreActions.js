"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScoreActions = calculateScoreActions;

var _Score = require("./dataModels/Score");

var _Action = require("./dataModels/Action");

var _calculateScore = require("./calculateScore");

var _RepositoryLocalReactive = require("./repositories/RepositoryLocalReactive");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Calculates the score actions based on a list of actions
 */
async function calculateScoreActions({
  actions = [],
  repository = new _RepositoryLocalReactive.RepositoryLocalReactive(),
  calculator = _calculateScore.calculateScore
} = {}) {
  const scoreActions = [];
  const claimIdsToScore = [];
  const topScoreIds = [];
  await repository.notify(actions);

  for (const action of actions) {
    // find claims that may need scores changed
    if (action.type == 'add_claim' || action.type == 'modify_claim') {
      claimIdsToScore.push(action.dataId);
    } // //Add scores for new Score Tree
    // //action.oldData = the claim to start the new score tree from
    // //TODO: above is an unexpected use of oldData. See if this should be changed or documented as an exception
    // //action.newData = the base top score for the new score tree
    // //action.dataId = the new ID for the Score Tree
    // if (action.type == 'add_scoretree') {
    //     claimIdsToScore.push(action.oldData.id)
    //     const claim = await repository.getClaim(action.oldData.id);
    //     if (claim) {
    //         const newAction = new Action(action.newData, {}, "add_score", action.newData.id);
    //         scoreActions.push(newAction);
    //         repository.notify([newAction]);
    //     }
    // }


    if (action.type == "add_score") {
      const score = action.newData;
      claimIdsToScore.push(score.sourceClaimId);
    } //Add scores if edges adds new children to claims in score trees


    if (action.type == 'add_claimEdge' || action.type == 'modify_claimEdge') {
      const claimEdge = action.newData;
      claimIdsToScore.push(claimEdge.parentId);
    } //Walk up the scores for each claim to the top


    for (const claimId of claimIdsToScore) {
      const scoresForTheClaim = await repository.getScoresByClaimId(claimId);

      for (const claimScore of scoresForTheClaim) {
        // for each score, walk up the tree looking for the top (the first score to not have a parentId)
        let currentScore = claimScore;
        let topScoreId = claimScore.id;

        while ((_currentScore = currentScore) === null || _currentScore === void 0 ? void 0 : _currentScore.parentScoreId) {
          var _currentScore;

          topScoreId = currentScore.id;
          currentScore = await repository.getScore(currentScore.parentScoreId);
        }

        if (topScoreId) {
          topScoreIds.push(topScoreId);
        }
      }
    } //Re-calc all top scores with possible changed claims


    for (const topScoreId of topScoreIds) {
      const topScore = await repository.getScore(topScoreId);

      if (topScore) {
        await createBlankMissingScores(repository, topScoreId, topScore.sourceClaimId || "", scoreActions);
        await repository.notify(scoreActions);
        await calculateScoreTree(repository, topScore, calculator, scoreActions);
      }
    }
  }

  return scoreActions;
} //Create Blank Missing Scores


async function createBlankMissingScores(repository, currentScoreId, currentClaimId, actions) {
  const edges = await repository.getClaimEdgesByParentId(currentClaimId);
  const scores = await repository.getChildrenByScoreId(currentScoreId);

  for (const edge of edges) {
    //see if there is a matching child score for the child edge
    let score = scores.find(({
      sourceClaimId
    }) => sourceClaimId === edge.childId);

    if (!score) {
      //Create a new Score and attach it to it's parent
      score = new _Score.Score(edge.childId, currentScoreId, undefined, edge.pro, edge.affects);
      actions.push(new _Action.Action(score, undefined, "add_score", score.id));
    } //Recurse and through children


    await createBlankMissingScores(repository, score.id, edge.childId, actions);
  }
} //This function assume that all scores already exist


async function calculateScoreTree(repository, currentScore, calculator = _calculateScore.calculateScore, actions) {
  const oldScores = await repository.getChildrenByScoreId(currentScore.id);
  const newScores = [];

  for (const oldScore of oldScores) {
    //Calculate Children
    //TODO: remove any scores to calculate based on formulas
    newScores.push((await calculateScoreTree(repository, oldScore, calculator, actions)));
  }

  const newScoreFragment = calculator({
    childScores: newScores,
    reversible: currentScore.reversible
  }); //TODO: Modify the newScore based on any formulas
  //TODO: Should we add the new scores to the repository (If they are different form the old score?)

  const newScore = _objectSpread({}, currentScore, {}, newScoreFragment);

  if ((0, _Score.differentScores)(currentScore, newScore)) {
    actions.push(new _Action.Action(newScore, undefined, "add_score", newScore.id));
  }

  return newScore;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScoreActions = calculateScoreActions;

var _Score = require("./dataModels/Score");

var _Action = require("./dataModels/Action");

var _calculateScore = require("./calculateScore");

var _RepositoryLocalPure = require("./repositories/RepositoryLocalPure");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Calculates the score actions based on a list of actions
 */
async function calculateScoreActions({
  actions = [],
  repository = new _RepositoryLocalPure.RepositoryLocalPure(),
  calculator = _calculateScore.calculateScore
} = {}) {
  const scoreActions = [];
  const claimIdsToScore = [];
  const ScoreTreeIds = [];
  await repository.notify(actions);

  for (const action of actions) {
    // find claims that may need scores changed
    if (action.type == 'add_claim' || action.type == 'modify_claim') {
      claimIdsToScore.push(action.dataId);
    }

    if (action.type == "add_score") {
      let score = action.newData;

      if (!score.parentScoreId) {
        const scoreTemp = await repository.getScore(action.dataId);

        if (scoreTemp) {
          score = scoreTemp;
        }
      }

      claimIdsToScore.push(score.sourceClaimId);
    } //Add scores if edges adds new children to claims in score trees


    if (action.type == 'add_claimEdge' || action.type == 'modify_claimEdge') {
      let claimEdge = action.newData;

      if (!claimEdge.parentId) {
        const claimEdgeTemp = await repository.getClaimEdge(action.dataId);

        if (claimEdgeTemp) {
          claimEdge = claimEdgeTemp;
        }
      }

      claimIdsToScore.push(claimEdge.parentId);
    } //TODO: If an edge changes then modify the existing scores to match


    if (action.type == 'modify_claimEdge') {
      let claimEdge = await repository.getClaimEdge(action.dataId);
      claimEdge = _objectSpread({}, claimEdge, {}, action.newData);

      if (claimEdge) {
        action.newData;
        const scores = await repository.getScoresBySourceId(claimEdge.id);

        for (const score of scores) {
          //TODO: Where should I put this? It is modifying am object. If it is reactive i should just change the data. If pure it should be a new object.
          //For now I will modify it but it may not trigger updates in a pure library (React)
          //This change should also probably be centralized somewhere to reduce the chance of inconsistent bugs. I think it will happen in multiple paces
          //Nope, it is an action so it should always be a new object. If it goes into a reactive respoitory then it will modify the actual object
          //Should I group these actions or just throw them in one at a time like I am doing
          if (score.pro != claimEdge.pro || score.affects != claimEdge.affects) {
            const action = new _Action.Action({
              pro: claimEdge.pro,
              affects: claimEdge.affects,
              priority: claimEdge.priority
            }, score, "modify_score", score.id);
            scoreActions.push(action);
            await repository.notify([action]);
          }
        }
      }
    }

    if (action.type == 'delete_claimEdge') {
      const oldClaimEdge = action.oldData;
      claimIdsToScore.push(oldClaimEdge.parentId);
    }

    if (action.type == 'add_scoreTree') {
      const scoreTree = action.newData;
      ScoreTreeIds.push(scoreTree.id);
    }
  } //Walk up the scores for each claim to the top


  for (const claimId of claimIdsToScore) {
    for (const claimScore of await repository.getScoresBySourceId(claimId)) {
      ScoreTreeIds.push(claimScore.scoreTreeId);
    }
  } //Re-calc all Score Trees with possible changed claims


  for (const scoreTreeId of ScoreTreeIds) {
    const scoreTree = await repository.getScoreTree(scoreTreeId);

    if (scoreTree) {
      const missingScoreActions = [];
      let mainScore = await repository.getScore(scoreTree.topScoreId);

      if (!mainScore) {
        mainScore = new _Score.Score(scoreTree.sourceClaimId, scoreTree.id);
        mainScore.id = scoreTree.topScoreId;
        missingScoreActions.push(new _Action.Action(mainScore, undefined, "add_score"));
      }

      await createBlankMissingScores(repository, scoreTree.topScoreId, scoreTree.sourceClaimId || "", missingScoreActions, scoreTreeId);

      if (missingScoreActions.length > 0) {
        await repository.notify(missingScoreActions);
      }

      const scoreTreeActions = [];
      const newMainScore = await calculateScoreDescendants(repository, mainScore, calculator, scoreTreeActions);

      if (missingScoreActions.length > 0) {
        await repository.notify(scoreTreeActions);
      }

      const fractionActions = [];
      await calculateFractions(repository, mainScore, fractionActions);

      if (fractionActions.length > 0) {
        await repository.notify(fractionActions);
      }

      scoreActions.push(...missingScoreActions, ...scoreTreeActions, ...fractionActions);

      if (scoreTree.descendantCount != newMainScore.descendantCount) {
        let newScoreTreePartial = {
          descendantCount: newMainScore.descendantCount
        };
        let oldScoreTreePartial = {
          descendantCount: scoreTree.descendantCount
        };
        scoreActions.push(new _Action.Action(newScoreTreePartial, oldScoreTreePartial, "modify_scoreTree", scoreTree.id));
      }
    }
  } //TODO: Review this decision: Feed the score actions back into the repository so this repository is up to date in case it is used 


  await repository.notify(scoreActions);
  return scoreActions;
} //Create Blank Missing Scores


async function createBlankMissingScores(repository, currentScoreId, currentClaimId, actions, scoreTreeId) {
  const edges = await repository.getClaimEdgesByParentId(currentClaimId);
  const scores = await repository.getChildrenByScoreId(currentScoreId);

  for (const edge of edges) {
    //see if there is a matching child score for the child edge
    let score = scores.find(({
      sourceClaimId
    }) => sourceClaimId === edge.childId);

    if (!score) {
      //Create a new Score and attach it to it's parent
      const u = undefined;
      score = new _Score.Score(edge.childId, scoreTreeId, currentScoreId, edge.id, undefined, edge.pro, edge.affects, u, u, u, edge.priority);
      actions.push(new _Action.Action(score, undefined, "add_score", score.id));
    } //Recurse and through children


    await createBlankMissingScores(repository, score.id, edge.childId, actions, scoreTreeId);
  }
} //This function assume that all scores already exist


async function calculateScoreDescendants(repository, currentScore, calculator = _calculateScore.calculateScore, actions) {
  const oldChildScores = await repository.getChildrenByScoreId(currentScore.id);
  const newChildScores = [];
  let newDescendantCount = 0;

  for (const oldChildScore of oldChildScores) {
    //Calculate Children
    //TODO: remove any scores to calculate based on formulas that exclude scores
    const newScore = await calculateScoreDescendants(repository, oldChildScore, calculator, actions);
    newChildScores.push(newScore);
    newDescendantCount += newScore.descendantCount + 1;
  }

  const newScoreFragment = calculator({
    childScores: newChildScores
  }); //update any newChildScores that changed

  for (const newChildScore of newChildScores) {
    // TODO: Is this slow accessing the data store again for this data or do we assume it is cached if it is in an external DB
    const oldChildScore = await repository.getScore(newChildScore.id);

    if (oldChildScore && (0, _Score.hasItemChanged)(oldChildScore, newChildScore)) {
      actions.push(new _Action.Action(newChildScore, undefined, "modify_score"));
    }
  } //TODO: Modify the newScore based on any formulas


  const newScore = _objectSpread({}, currentScore, {}, newScoreFragment, {
    descendantCount: newDescendantCount
  });

  if ((0, _Score.hasItemChanged)(currentScore, newScore)) {
    actions.push(new _Action.Action(newScore, undefined, "modify_score"));
  }

  return newScore;
}

async function calculateFractions(repository, parentScore, actions) {
  const oldChildScores = await repository.getChildrenByScoreId(parentScore.id);
  const newScores = []; //Count up total relevance

  let totalRelevance = 0;

  for (const oldScore of oldChildScores) {
    if (oldScore.affects === "confidence") {
      totalRelevance += oldScore.relevance;
    }
  }

  if (totalRelevance === 0) {
    totalRelevance = 1;
  }

  for (const oldChildScore of oldChildScores) {
    const newChildFraction = oldChildScore.relevance / totalRelevance * parentScore.fraction;

    const newChildScore = _objectSpread({}, oldChildScore, {
      fraction: newChildFraction
    });

    if (newChildFraction != oldChildScore.fraction) {
      actions.push(new _Action.Action(newChildScore, undefined, "modify_score"));
    }

    await calculateFractions(repository, newChildScore, actions);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
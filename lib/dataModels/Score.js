"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasItemChanged = hasItemChanged;
exports.Score = void 0;

var _newId = require("../newId");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Stores the score for a claim. Just a data transfer object. Does not contain any logic.
 */
class Score {
  constructor(sourceClaimId, scoreTreeId, parentScoreId = undefined, sourceEdgeId = undefined, reversible = false, pro = true, affects = "confidence", confidence = 1, relevance = 1, id = (0, _newId.newId)(), priority = "", content = "", fraction = 1, descendantCount = 0) {
    this.sourceClaimId = sourceClaimId;
    this.scoreTreeId = scoreTreeId;
    this.parentScoreId = parentScoreId;
    this.sourceEdgeId = sourceEdgeId;
    this.reversible = reversible;
    this.pro = pro;
    this.affects = affects;
    this.confidence = confidence;
    this.relevance = relevance;
    this.id = id;
    this.priority = priority;
    this.content = content;
    this.fraction = fraction;
    this.descendantCount = descendantCount;

    _defineProperty(this, "type", 'score');

    _defineProperty(this, "childrenAveragingWeight", 1);

    _defineProperty(this, "childrenConfidenceWeight", 1);

    _defineProperty(this, "childrenRelevanceWeight", 1);

    _defineProperty(this, "childrenWeight", 1);

    _defineProperty(this, "weight", 1);

    _defineProperty(this, "percentOfWeight", 1);

    _defineProperty(this, "pointsPro", 1);

    _defineProperty(this, "pointsCon", 0);

    _defineProperty(this, "childrenPointsPro", 0);

    _defineProperty(this, "childrenPointsCon", 0);
  }

}
/** Compare two scores to see if they are different in what the score is.
 *  Just compares confidence and relavance
 */


exports.Score = Score;

function hasItemChanged(scoreA, scoreB) {
  return !(JSON.stringify(scoreA, Object.keys(scoreA).sort()) === JSON.stringify(scoreB, Object.keys(scoreB).sort()));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhTW9kZWxzL1Njb3JlLnRzIl0sIm5hbWVzIjpbIlNjb3JlIiwiY29uc3RydWN0b3IiLCJzb3VyY2VDbGFpbUlkIiwic2NvcmVUcmVlSWQiLCJwYXJlbnRTY29yZUlkIiwidW5kZWZpbmVkIiwic291cmNlRWRnZUlkIiwicmV2ZXJzaWJsZSIsInBybyIsImFmZmVjdHMiLCJjb25maWRlbmNlIiwicmVsZXZhbmNlIiwiaWQiLCJwcmlvcml0eSIsImNvbnRlbnQiLCJmcmFjdGlvbiIsImRlc2NlbmRhbnRDb3VudCIsImhhc0l0ZW1DaGFuZ2VkIiwic2NvcmVBIiwic2NvcmVCIiwiSlNPTiIsInN0cmluZ2lmeSIsIk9iamVjdCIsImtleXMiLCJzb3J0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBSUE7OztBQUdPLE1BQU1BLEtBQU4sQ0FBNEI7QUFHL0JDLEVBQUFBLFdBQVcsQ0FFQUMsYUFGQSxFQUlBQyxXQUpBLEVBTUFDLGFBQWlDLEdBQUdDLFNBTnBDLEVBUUFDLFlBQWdDLEdBQUdELFNBUm5DLEVBVUFFLFVBQW1CLEdBQUcsS0FWdEIsRUFZQUMsR0FBWSxHQUFHLElBWmYsRUFlQUMsT0FBZ0IsR0FBRyxZQWZuQixFQWdCQUMsVUFBa0IsR0FBRyxDQWhCckIsRUFtQkFDLFNBQWlCLEdBQUcsQ0FuQnBCLEVBb0JBQyxFQUFVLEdBQUcsbUJBcEJiLEVBcUJBQyxRQUFnQixHQUFHLEVBckJuQixFQXNCQUMsT0FBZSxHQUFHLEVBdEJsQixFQXdCQUMsUUFBZ0IsR0FBRyxDQXhCbkIsRUF5QkFDLGVBQXVCLEdBQUcsQ0F6QjFCLEVBMEJUO0FBQUEsU0F4QlNkLGFBd0JULEdBeEJTQSxhQXdCVDtBQUFBLFNBdEJTQyxXQXNCVCxHQXRCU0EsV0FzQlQ7QUFBQSxTQXBCU0MsYUFvQlQsR0FwQlNBLGFBb0JUO0FBQUEsU0FsQlNFLFlBa0JULEdBbEJTQSxZQWtCVDtBQUFBLFNBaEJTQyxVQWdCVCxHQWhCU0EsVUFnQlQ7QUFBQSxTQWRTQyxHQWNULEdBZFNBLEdBY1Q7QUFBQSxTQVhTQyxPQVdULEdBWFNBLE9BV1Q7QUFBQSxTQVZTQyxVQVVULEdBVlNBLFVBVVQ7QUFBQSxTQVBTQyxTQU9ULEdBUFNBLFNBT1Q7QUFBQSxTQU5TQyxFQU1ULEdBTlNBLEVBTVQ7QUFBQSxTQUxTQyxRQUtULEdBTFNBLFFBS1Q7QUFBQSxTQUpTQyxPQUlULEdBSlNBLE9BSVQ7QUFBQSxTQUZTQyxRQUVULEdBRlNBLFFBRVQ7QUFBQSxTQURTQyxlQUNULEdBRFNBLGVBQ1Q7O0FBQUEsa0NBNUJnQixPQTRCaEI7O0FBQUEscURBR3VDLENBSHZDOztBQUFBLHNEQUl3QyxDQUp4Qzs7QUFBQSxxREFLdUMsQ0FMdkM7O0FBQUEsNENBTThCLENBTjlCOztBQUFBLG9DQU9zQixDQVB0Qjs7QUFBQSw2Q0FRK0IsQ0FSL0I7O0FBQUEsdUNBU3lCLENBVHpCOztBQUFBLHVDQVV5QixDQVZ6Qjs7QUFBQSwrQ0FXaUMsQ0FYakM7O0FBQUEsK0NBWWlDLENBWmpDO0FBQ0Q7O0FBOUI4QjtBQTRDbkM7Ozs7Ozs7QUFHTyxTQUFTQyxjQUFULENBQXdCQyxNQUF4QixFQUFzQ0MsTUFBdEMsRUFBb0Q7QUFDdkQsU0FBTyxFQUNIQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUgsTUFBZixFQUF1QkksTUFBTSxDQUFDQyxJQUFQLENBQVlMLE1BQVosRUFBb0JNLElBQXBCLEVBQXZCLE1BQ0FKLElBQUksQ0FBQ0MsU0FBTCxDQUFlRixNQUFmLEVBQXVCRyxNQUFNLENBQUNDLElBQVAsQ0FBWUosTUFBWixFQUFvQkssSUFBcEIsRUFBdkIsQ0FGRyxDQUFQO0FBSUgiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJZCB9IGZyb20gXCIuLi9uZXdJZFwiO1xyXG5pbXBvcnQgeyBBZmZlY3RzIH0gZnJvbSBcIi4vQWZmZWN0c1wiO1xyXG5pbXBvcnQgeyBJdGVtIH0gZnJvbSBcIi4vSXRlbVwiO1xyXG5pbXBvcnQgeyBJdGVtVHlwZXMgfSBmcm9tIFwiLi5cIjtcclxuLyoqXHJcbiAqIFN0b3JlcyB0aGUgc2NvcmUgZm9yIGEgY2xhaW0uIEp1c3QgYSBkYXRhIHRyYW5zZmVyIG9iamVjdC4gRG9lcyBub3QgY29udGFpbiBhbnkgbG9naWMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2NvcmUgaW1wbGVtZW50cyBJdGVtIHtcclxuICAgIHR5cGU6IEl0ZW1UeXBlcyA9ICdzY29yZSdcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAvKiogVGhlIGNsYWltIHRvIHdoaWNoIHRoaXMgc2NvcmUgYmVsb25ncyAqL1xyXG4gICAgICAgIHB1YmxpYyBzb3VyY2VDbGFpbUlkOiBzdHJpbmcsXHJcbiAgICAgICAgLyoqIFRoZSB0b3Agb2YgdGhlIHRyZWUgb2Ygc2NvcmVzIHRoYXQgdGhpcyBiZWxvbmdzIHRvLiBVc2VkIGZvciBpbmRleGluZyAqL1xyXG4gICAgICAgIHB1YmxpYyBzY29yZVRyZWVJZDogc3RyaW5nLFxyXG4gICAgICAgIC8qKiBUaGUgcGFyZW50IG9mIHRoaXMgc2NvcmUgaW4gdGhlIHNjb3JlIHRyZWUgZ3JhcGggKi9cclxuICAgICAgICBwdWJsaWMgcGFyZW50U2NvcmVJZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxyXG4gICAgICAgIC8qKiBUaGUgRWRnZSB0byB3aGljaCB0aGlzIHNjb3JlIGJlbG9uZ3MgKi9cclxuICAgICAgICBwdWJsaWMgc291cmNlRWRnZUlkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsXHJcblxyXG4gICAgICAgIHB1YmxpYyByZXZlcnNpYmxlOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICAgICAgLyoqIElzIHRoaXMgc2NvcmUgYSBwcm8gb2YgaXQncyBwYXJlbnQgKGZhbHNlIGlmIGl0IGlzIGEgY29uKSAqL1xyXG4gICAgICAgIHB1YmxpYyBwcm86IGJvb2xlYW4gPSB0cnVlLFxyXG4gICAgICAgIC8qKiBob3cgY29uZmlkZW50IHdlIHNvdWxkIGJlIGluIHRoZSBjbGFpbS4gKEFLQSBUcnVlKSAqL1xyXG4gICAgICAgIC8qKiBIb3cgdGhlIGNoaWxkIGFmZmVjdHMgdGhlIHBhcmVudCBzY29yZSAqL1xyXG4gICAgICAgIHB1YmxpYyBhZmZlY3RzOiBBZmZlY3RzID0gXCJjb25maWRlbmNlXCIsXHJcbiAgICAgICAgcHVibGljIGNvbmZpZGVuY2U6IG51bWJlciA9IDEsXHJcbiAgICAgICAgLyoqIEhvdyByZWxldmVudCB0aGlzIGNsYWltIGlzIHRvIGl0J3MgcGFyZW50IGNsYWltLiBSYW5nZXMgZnJvbSAwIHRvIGluZmluaXR5LlxyXG4gICAgICAgICAqIEEgbXVsdGlwbGllciBzZXQgYnkgYWxsIHRoZSBjaGlsZCBlZGdlcyB0aGF0IGFmZmVjdCAncmVsZXZhbmNlJyovXHJcbiAgICAgICAgcHVibGljIHJlbGV2YW5jZTogbnVtYmVyID0gMSxcclxuICAgICAgICBwdWJsaWMgaWQ6IHN0cmluZyA9IG5ld0lkKCksXHJcbiAgICAgICAgcHVibGljIHByaW9yaXR5OiBzdHJpbmcgPSBcIlwiLFxyXG4gICAgICAgIHB1YmxpYyBjb250ZW50OiBzdHJpbmcgPSBcIlwiLFxyXG4gICAgICAgIC8qKiBXaGF0IGZyYWN0aW9uIG9mIHRyZWUgaXMgdGhpcyBzY29yZSBhbmQgaXQncyBkZXNjZW5kYW50cyByZXNwb25zaWJsZSBmb3IgKi9cclxuICAgICAgICBwdWJsaWMgZnJhY3Rpb246IG51bWJlciA9IDEsXHJcbiAgICAgICAgcHVibGljIGRlc2NlbmRhbnRDb3VudDogbnVtYmVyID0gMCxcclxuICAgICkge1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjaGlsZHJlbkF2ZXJhZ2luZ1dlaWdodDogbnVtYmVyID0gMTtcclxuICAgIHB1YmxpYyBjaGlsZHJlbkNvbmZpZGVuY2VXZWlnaHQ6IG51bWJlciA9IDE7XHJcbiAgICBwdWJsaWMgY2hpbGRyZW5SZWxldmFuY2VXZWlnaHQ6IG51bWJlciA9IDE7XHJcbiAgICBwdWJsaWMgY2hpbGRyZW5XZWlnaHQ6IG51bWJlciA9IDE7XHJcbiAgICBwdWJsaWMgd2VpZ2h0OiBudW1iZXIgPSAxO1xyXG4gICAgcHVibGljIHBlcmNlbnRPZldlaWdodDogbnVtYmVyID0gMTtcclxuICAgIHB1YmxpYyBwb2ludHNQcm86IG51bWJlciA9IDE7XHJcbiAgICBwdWJsaWMgcG9pbnRzQ29uOiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIGNoaWxkcmVuUG9pbnRzUHJvOiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIGNoaWxkcmVuUG9pbnRzQ29uOiBudW1iZXIgPSAwO1xyXG59XHJcblxyXG4vKiogQ29tcGFyZSB0d28gc2NvcmVzIHRvIHNlZSBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgaW4gd2hhdCB0aGUgc2NvcmUgaXMuXHJcbiAqICBKdXN0IGNvbXBhcmVzIGNvbmZpZGVuY2UgYW5kIHJlbGF2YW5jZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc0l0ZW1DaGFuZ2VkKHNjb3JlQTogSXRlbSwgc2NvcmVCOiBJdGVtKSB7XHJcbiAgICByZXR1cm4gIShcclxuICAgICAgICBKU09OLnN0cmluZ2lmeShzY29yZUEsIE9iamVjdC5rZXlzKHNjb3JlQSkuc29ydCgpKSA9PT1cclxuICAgICAgICBKU09OLnN0cmluZ2lmeShzY29yZUIsIE9iamVjdC5rZXlzKHNjb3JlQikuc29ydCgpKVxyXG4gICAgKVxyXG59Il19
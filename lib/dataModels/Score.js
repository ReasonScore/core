"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.differentScores = differentScores;
exports.Score = void 0;

var _newId = require("../newId");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Stores the score for a claim. Just a data transfer object. Does not contain any logic.
 */
class Score {
  constructor(sourceClaimId, topScoreId, parentScoreId = undefined, sourceEdgeId = undefined, reversible = false, pro = true, affects = "confidence", confidence = 1, relevance = 1, id = (0, _newId.newId)()) {
    this.sourceClaimId = sourceClaimId;
    this.topScoreId = topScoreId;
    this.parentScoreId = parentScoreId;
    this.sourceEdgeId = sourceEdgeId;
    this.reversible = reversible;
    this.pro = pro;
    this.affects = affects;
    this.confidence = confidence;
    this.relevance = relevance;
    this.id = id;

    _defineProperty(this, "type", 'score');
  }

}
/** Compare two scores to see if they are different in what the score is.
 *  Just compares confidence and relavance
 */


exports.Score = Score;

function differentScores(scoreA, scoreB) {
  return !(scoreA.confidence == scoreB.confidence && scoreA.relevance == scoreB.relevance && scoreA.pro == scoreB.pro);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhTW9kZWxzL1Njb3JlLnRzIl0sIm5hbWVzIjpbIlNjb3JlIiwiY29uc3RydWN0b3IiLCJzb3VyY2VDbGFpbUlkIiwidG9wU2NvcmVJZCIsInBhcmVudFNjb3JlSWQiLCJ1bmRlZmluZWQiLCJzb3VyY2VFZGdlSWQiLCJyZXZlcnNpYmxlIiwicHJvIiwiYWZmZWN0cyIsImNvbmZpZGVuY2UiLCJyZWxldmFuY2UiLCJpZCIsImRpZmZlcmVudFNjb3JlcyIsInNjb3JlQSIsInNjb3JlQiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUlBOzs7QUFHTyxNQUFNQSxLQUFOLENBQW9EO0FBR3ZEQyxFQUFBQSxXQUFXLENBRUFDLGFBRkEsRUFJQUMsVUFKQSxFQU1BQyxhQUFpQyxHQUFHQyxTQU5wQyxFQVFBQyxZQUFnQyxHQUFHRCxTQVJuQyxFQVVBRSxVQUFtQixHQUFHLEtBVnRCLEVBWUFDLEdBQVksR0FBRyxJQVpmLEVBZUFDLE9BQWdCLEdBQUcsWUFmbkIsRUFnQkFDLFVBQWtCLEdBQUcsQ0FoQnJCLEVBbUJBQyxTQUFpQixHQUFHLENBbkJwQixFQW9CQUMsRUFBVSxHQUFHLG1CQXBCYixFQXFCVDtBQUFBLFNBbkJTVixhQW1CVCxHQW5CU0EsYUFtQlQ7QUFBQSxTQWpCU0MsVUFpQlQsR0FqQlNBLFVBaUJUO0FBQUEsU0FmU0MsYUFlVCxHQWZTQSxhQWVUO0FBQUEsU0FiU0UsWUFhVCxHQWJTQSxZQWFUO0FBQUEsU0FYU0MsVUFXVCxHQVhTQSxVQVdUO0FBQUEsU0FUU0MsR0FTVCxHQVRTQSxHQVNUO0FBQUEsU0FOU0MsT0FNVCxHQU5TQSxPQU1UO0FBQUEsU0FMU0MsVUFLVCxHQUxTQSxVQUtUO0FBQUEsU0FGU0MsU0FFVCxHQUZTQSxTQUVUO0FBQUEsU0FEU0MsRUFDVCxHQURTQSxFQUNUOztBQUFBLGtDQXZCZ0IsT0F1QmhCO0FBQ0Q7O0FBekJzRDtBQTRCM0Q7Ozs7Ozs7QUFHTyxTQUFTQyxlQUFULENBQXlCQyxNQUF6QixFQUF5Q0MsTUFBekMsRUFBeUQ7QUFDNUQsU0FBTyxFQUNIRCxNQUFNLENBQUNKLFVBQVAsSUFBcUJLLE1BQU0sQ0FBQ0wsVUFBNUIsSUFDR0ksTUFBTSxDQUFDSCxTQUFQLElBQW9CSSxNQUFNLENBQUNKLFNBRDlCLElBRUdHLE1BQU0sQ0FBQ04sR0FBUCxJQUFjTyxNQUFNLENBQUNQLEdBSHJCLENBQVA7QUFLSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5ld0lkIH0gZnJvbSBcIi4uL25ld0lkXCI7XHJcbmltcG9ydCB7IEFmZmVjdHMgfSBmcm9tIFwiLi9BZmZlY3RzXCI7XHJcbmltcG9ydCB7IEl0ZW0gfSBmcm9tIFwiLi9JdGVtXCI7XHJcbmltcG9ydCB7IEl0ZW1UeXBlcyB9IGZyb20gXCIuLlwiO1xyXG4vKipcclxuICogU3RvcmVzIHRoZSBzY29yZSBmb3IgYSBjbGFpbS4gSnVzdCBhIGRhdGEgdHJhbnNmZXIgb2JqZWN0LiBEb2VzIG5vdCBjb250YWluIGFueSBsb2dpYy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTY29yZSBpbXBsZW1lbnRzIGlTY29yZSwgaVNjb3JlRnJhZ21lbnQsIEl0ZW0ge1xyXG4gICAgdHlwZTogSXRlbVR5cGVzID0gJ3Njb3JlJ1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIC8qKiBUaGUgY2xhaW0gdG8gd2hpY2ggdGhpcyBzY29yZSBiZWxvbmdzICovXHJcbiAgICAgICAgcHVibGljIHNvdXJjZUNsYWltSWQ6IHN0cmluZyxcclxuICAgICAgICAvKiogVGhlIHRvcCBvZiB0aGUgdHJlZSBvZiBzY29yZXMgdGhhdCB0aGlzIGJlbG9uZ3MgdG8uIFVzZWQgZm9yIGluZGV4aW5nICovXHJcbiAgICAgICAgcHVibGljIHRvcFNjb3JlSWQ6IHN0cmluZyxcclxuICAgICAgICAvKiogVGhlIHBhcmVudCBvZiB0aGlzIHNjb3JlIGluIHRoZSBzY29yZSB0cmVlIGdyYXBoICovXHJcbiAgICAgICAgcHVibGljIHBhcmVudFNjb3JlSWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCxcclxuICAgICAgICAvKiogVGhlIEVkZ2UgdG8gd2hpY2ggdGhpcyBzY29yZSBiZWxvbmdzICovXHJcbiAgICAgICAgcHVibGljIHNvdXJjZUVkZ2VJZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxyXG5cclxuICAgICAgICBwdWJsaWMgcmV2ZXJzaWJsZTogYm9vbGVhbiA9IGZhbHNlLFxyXG4gICAgICAgIC8qKiBJcyB0aGlzIHNjb3JlIGEgcHJvIG9mIGl0J3MgcGFyZW50IChmYWxzZSBpZiBpdCBpcyBhIGNvbikgKi9cclxuICAgICAgICBwdWJsaWMgcHJvOiBib29sZWFuID0gdHJ1ZSxcclxuICAgICAgICAvKiogaG93IGNvbmZpZGVudCB3ZSBzb3VsZCBiZSBpbiB0aGUgY2xhaW0uIChBS0EgVHJ1ZSkgKi9cclxuICAgICAgICAvKiogSG93IHRoZSBjaGlsZCBhZmZlY3RzIHRoZSBwYXJlbnQgc2NvcmUgKi9cclxuICAgICAgICBwdWJsaWMgYWZmZWN0czogQWZmZWN0cyA9IFwiY29uZmlkZW5jZVwiLFxyXG4gICAgICAgIHB1YmxpYyBjb25maWRlbmNlOiBudW1iZXIgPSAxLFxyXG4gICAgICAgIC8qKiBIb3cgcmVsZXZlbnQgdGhpcyBjbGFpbSBpcyB0byBpdCdzIHBhcmVudCBjbGFpbS4gUmFuZ2VzIGZyb20gMCB0byBpbmZpbml0eS5cclxuICAgICAgICAgKiBBIG11bHRpcGxpZXIgc2V0IGJ5IGFsbCB0aGUgY2hpbGQgZWRnZXMgdGhhdCBhZmZlY3QgJ3JlbGV2YW5jZScqL1xyXG4gICAgICAgIHB1YmxpYyByZWxldmFuY2U6IG51bWJlciA9IDEsXHJcbiAgICAgICAgcHVibGljIGlkOiBzdHJpbmcgPSBuZXdJZCgpLFxyXG4gICAgKSB7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBDb21wYXJlIHR3byBzY29yZXMgdG8gc2VlIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBpbiB3aGF0IHRoZSBzY29yZSBpcy5cclxuICogIEp1c3QgY29tcGFyZXMgY29uZmlkZW5jZSBhbmQgcmVsYXZhbmNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW50U2NvcmVzKHNjb3JlQTogaVNjb3JlLCBzY29yZUI6IGlTY29yZSkge1xyXG4gICAgcmV0dXJuICEoXHJcbiAgICAgICAgc2NvcmVBLmNvbmZpZGVuY2UgPT0gc2NvcmVCLmNvbmZpZGVuY2VcclxuICAgICAgICAmJiBzY29yZUEucmVsZXZhbmNlID09IHNjb3JlQi5yZWxldmFuY2VcclxuICAgICAgICAmJiBzY29yZUEucHJvID09IHNjb3JlQi5wcm9cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBpU2NvcmUge1xyXG4gICAgLyoqIFRoZSBjbGFpbSB0byB3aGljaCB0aGlzIHNjb3JlIGJlbG9uZ3MgKi9cclxuICAgIHNvdXJjZUNsYWltSWQ6IHN0cmluZyxcclxuICAgIC8qKiBUaGUgRWRnZSB0byB3aGljaCB0aGlzIHNjb3JlIGJlbG9uZ3MgKi9cclxuICAgIHNvdXJjZUVkZ2VJZD86IHN0cmluZyxcclxuICAgIC8qKiBUaGUgdG9wIG9mIHRoZSB0cmVlIG9mIHNjb3JlcyB0aGF0IHRoaXMgYmVsb25ncyB0by4gVXNlZCBmb3IgaW5kZXhpbmcgKi9cclxuICAgIHRvcFNjb3JlSWQ6IHN0cmluZyxcclxuICAgIC8qKiBUaGUgcGFyZW50IG9mIHRoaXMgc2NvcmUgaW4gdGhlIHNjb3JlIHRyZWUgZ3JhcGggKi9cclxuICAgIHBhcmVudFNjb3JlSWQ/OiBzdHJpbmcsXHJcbiAgICByZXZlcnNpYmxlOiBib29sZWFuLFxyXG4gICAgLyoqIElzIHRoaXMgc2NvcmUgYSBwcm8gb2YgaXQncyBwYXJlbnQgKGZhbHNlIGlmIGl0IGlzIGEgY29uKSAqL1xyXG4gICAgcHJvOiBib29sZWFuLFxyXG4gICAgLyoqIGhvdyBjb25maWRlbnQgd2Ugc291bGQgYmUgaW4gdGhlIGNsYWltLiAoQUtBIFRydWUpICovXHJcbiAgICAvKiogSG93IHRoZSBjaGlsZCBhZmZlY3RzIHRoZSBwYXJlbnQgc2NvcmUgKi9cclxuICAgIGFmZmVjdHM6IEFmZmVjdHMsXHJcbiAgICAvKiogaG93IGNvbmZpZGVudCB3ZSBzb3VsZCBiZSBpbiB0aGUgY2xhaW0uIChBS0EgVHJ1ZSkgKi9cclxuICAgIGNvbmZpZGVuY2U6IG51bWJlcixcclxuICAgIC8qKiBIb3cgcmVsZXZlbnQgdGhpcyBjbGFpbSBpcyB0byBpdCdzIHBhcmVudCBjbGFpbS4gUmFuZ2VzIGZyb20gMCB0byBpbmZpbml0eS5cclxuICAgICAqIEEgbXVsdGlwbGllciBzZXQgYnkgYWxsIHRoZSBjaGlsZCBlZGdlcyB0aGF0IGFmZmVjdCAncmVsZXZhbmNlJyovXHJcbiAgICByZWxldmFuY2U6IG51bWJlcixcclxuICAgIGlkOiBzdHJpbmcsXHJcbiAgICB0eXBlOiBJdGVtVHlwZXMsXHJcbiAgICAvKiogYWxsb3cgZm9yIG90aGVyIHByb3BlcnRpZXMgYnkgZXh0ZXJuYWwgaW1wbGVtZW50YXRpb25zICovXHJcbiAgICBbb3RoZXJzOiBzdHJpbmddOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgaVNjb3JlRnJhZ21lbnQge1xyXG4gICAgcmV2ZXJzaWJsZT86IGJvb2xlYW4sXHJcbiAgICAvKiogSXMgdGhpcyBzY29yZSBhIHBybyBvZiBpdCdzIHBhcmVudCAoZmFsc2UgaWYgaXQgaXMgYSBjb24pICovXHJcbiAgICBwcm8/OiBib29sZWFuLFxyXG4gICAgLyoqIEhvdyB0aGUgY2hpbGQgYWZmZWN0cyB0aGUgcGFyZW50IHNjb3JlICovXHJcbiAgICBhZmZlY3RzPzogQWZmZWN0cyxcclxuICAgIC8qKiBob3cgY29uZmlkZW50IHdlIHNvdWxkIGJlIGluIHRoZSBjbGFpbS4gKEFLQSBUcnVlKSAqL1xyXG4gICAgY29uZmlkZW5jZT86IG51bWJlcixcclxuICAgIC8qKiBIb3cgcmVsZXZlbnQgdGhpcyBjbGFpbSBpcyB0byBpdCdzIHBhcmVudCBjbGFpbS4gUmFuZ2VzIGZyb20gMCB0byBpbmZpbml0eS5cclxuICAgICAqIEEgbXVsdGlwbGllciBzZXQgYnkgYWxsIHRoZSBjaGlsZCBlZGdlcyB0aGF0IGFmZmVjdCAncmVsZXZhbmNlJyovXHJcbiAgICByZWxldmFuY2U/OiBudW1iZXIsXHJcbiAgICAvKiogYWxsb3cgZm9yIG90aGVyIHByb3BlcnRpZXMgYnkgZXh0ZXJuYWwgaW1wbGVtZW50YXRpb25zICovXHJcbiAgICBbb3RoZXJzOiBzdHJpbmddOiBhbnk7XHJcbn0iXX0=
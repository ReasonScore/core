"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Score = void 0;

var _newId = require("../newId");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Stores the score for a claim. Just a data transfer object. Does not contain any logic.
 */
class Score {
  constructor(sourceClaimId, scoreTreeId, parentScoreId = undefined, sourceEdgeId = undefined, reversible = false, pro = true, affects = "confidence", confidence = 1, relevance = 1, id = (0, _newId.newId)(), priority = "", content = "", fraction = 1, descendantCount = 0) {
    this.sourceClaimId = sourceClaimId;
    this.scoreTreeId = scoreTreeId;
    this.parentScoreId = parentScoreId;
    this.sourceEdgeId = sourceEdgeId;
    this.reversible = reversible;
    this.pro = pro;
    this.affects = affects;
    this.confidence = confidence;
    this.relevance = relevance;
    this.id = id;
    this.priority = priority;
    this.content = content;
    this.fraction = fraction;
    this.descendantCount = descendantCount;

    _defineProperty(this, "type", 'score');

    _defineProperty(this, "childrenAveragingWeight", 1);

    _defineProperty(this, "childrenConfidenceWeight", 1);

    _defineProperty(this, "childrenRelevanceWeight", 1);

    _defineProperty(this, "childrenWeight", 1);

    _defineProperty(this, "weight", 1);

    _defineProperty(this, "percentOfWeight", 1);
  }

}

exports.Score = Score;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhTW9kZWxzL1Njb3JlLnRzIl0sIm5hbWVzIjpbIlNjb3JlIiwiY29uc3RydWN0b3IiLCJzb3VyY2VDbGFpbUlkIiwic2NvcmVUcmVlSWQiLCJwYXJlbnRTY29yZUlkIiwidW5kZWZpbmVkIiwic291cmNlRWRnZUlkIiwicmV2ZXJzaWJsZSIsInBybyIsImFmZmVjdHMiLCJjb25maWRlbmNlIiwicmVsZXZhbmNlIiwiaWQiLCJwcmlvcml0eSIsImNvbnRlbnQiLCJmcmFjdGlvbiIsImRlc2NlbmRhbnRDb3VudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBSUE7OztBQUdPLE1BQU1BLEtBQU4sQ0FBNEI7QUFHL0JDLEVBQUFBLFdBQVcsQ0FFQUMsYUFGQSxFQUlBQyxXQUpBLEVBTUFDLGFBQWlDLEdBQUdDLFNBTnBDLEVBUUFDLFlBQWdDLEdBQUdELFNBUm5DLEVBVUFFLFVBQW1CLEdBQUcsS0FWdEIsRUFZQUMsR0FBWSxHQUFHLElBWmYsRUFlQUMsT0FBZ0IsR0FBRyxZQWZuQixFQWdCQUMsVUFBa0IsR0FBRyxDQWhCckIsRUFtQkFDLFNBQWlCLEdBQUcsQ0FuQnBCLEVBb0JBQyxFQUFVLEdBQUcsbUJBcEJiLEVBcUJBQyxRQUFnQixHQUFHLEVBckJuQixFQXNCQUMsT0FBZSxHQUFHLEVBdEJsQixFQXdCQUMsUUFBZ0IsR0FBRyxDQXhCbkIsRUF5QkFDLGVBQXVCLEdBQUcsQ0F6QjFCLEVBMEJUO0FBQUEsU0F4QlNkLGFBd0JULEdBeEJTQSxhQXdCVDtBQUFBLFNBdEJTQyxXQXNCVCxHQXRCU0EsV0FzQlQ7QUFBQSxTQXBCU0MsYUFvQlQsR0FwQlNBLGFBb0JUO0FBQUEsU0FsQlNFLFlBa0JULEdBbEJTQSxZQWtCVDtBQUFBLFNBaEJTQyxVQWdCVCxHQWhCU0EsVUFnQlQ7QUFBQSxTQWRTQyxHQWNULEdBZFNBLEdBY1Q7QUFBQSxTQVhTQyxPQVdULEdBWFNBLE9BV1Q7QUFBQSxTQVZTQyxVQVVULEdBVlNBLFVBVVQ7QUFBQSxTQVBTQyxTQU9ULEdBUFNBLFNBT1Q7QUFBQSxTQU5TQyxFQU1ULEdBTlNBLEVBTVQ7QUFBQSxTQUxTQyxRQUtULEdBTFNBLFFBS1Q7QUFBQSxTQUpTQyxPQUlULEdBSlNBLE9BSVQ7QUFBQSxTQUZTQyxRQUVULEdBRlNBLFFBRVQ7QUFBQSxTQURTQyxlQUNULEdBRFNBLGVBQ1Q7O0FBQUEsa0NBNUJnQixPQTRCaEI7O0FBQUEscURBR3VDLENBSHZDOztBQUFBLHNEQUl3QyxDQUp4Qzs7QUFBQSxxREFLdUMsQ0FMdkM7O0FBQUEsNENBTThCLENBTjlCOztBQUFBLG9DQU9zQixDQVB0Qjs7QUFBQSw2Q0FRK0IsQ0FSL0I7QUFDRDs7QUE5QjhCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmV3SWQgfSBmcm9tIFwiLi4vbmV3SWRcIjtcclxuaW1wb3J0IHsgQWZmZWN0cyB9IGZyb20gXCIuL0FmZmVjdHNcIjtcclxuaW1wb3J0IHsgSXRlbSB9IGZyb20gXCIuL0l0ZW1cIjtcclxuaW1wb3J0IHsgSXRlbVR5cGVzIH0gZnJvbSBcIi4uXCI7XHJcbi8qKlxyXG4gKiBTdG9yZXMgdGhlIHNjb3JlIGZvciBhIGNsYWltLiBKdXN0IGEgZGF0YSB0cmFuc2ZlciBvYmplY3QuIERvZXMgbm90IGNvbnRhaW4gYW55IGxvZ2ljLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNjb3JlIGltcGxlbWVudHMgSXRlbSB7XHJcbiAgICB0eXBlOiBJdGVtVHlwZXMgPSAnc2NvcmUnXHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgLyoqIFRoZSBjbGFpbSB0byB3aGljaCB0aGlzIHNjb3JlIGJlbG9uZ3MgKi9cclxuICAgICAgICBwdWJsaWMgc291cmNlQ2xhaW1JZDogc3RyaW5nLFxyXG4gICAgICAgIC8qKiBUaGUgdG9wIG9mIHRoZSB0cmVlIG9mIHNjb3JlcyB0aGF0IHRoaXMgYmVsb25ncyB0by4gVXNlZCBmb3IgaW5kZXhpbmcgKi9cclxuICAgICAgICBwdWJsaWMgc2NvcmVUcmVlSWQ6IHN0cmluZyxcclxuICAgICAgICAvKiogVGhlIHBhcmVudCBvZiB0aGlzIHNjb3JlIGluIHRoZSBzY29yZSB0cmVlIGdyYXBoICovXHJcbiAgICAgICAgcHVibGljIHBhcmVudFNjb3JlSWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCxcclxuICAgICAgICAvKiogVGhlIEVkZ2UgdG8gd2hpY2ggdGhpcyBzY29yZSBiZWxvbmdzICovXHJcbiAgICAgICAgcHVibGljIHNvdXJjZUVkZ2VJZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxyXG5cclxuICAgICAgICBwdWJsaWMgcmV2ZXJzaWJsZTogYm9vbGVhbiA9IGZhbHNlLFxyXG4gICAgICAgIC8qKiBJcyB0aGlzIHNjb3JlIGEgcHJvIG9mIGl0J3MgcGFyZW50IChmYWxzZSBpZiBpdCBpcyBhIGNvbikgKi9cclxuICAgICAgICBwdWJsaWMgcHJvOiBib29sZWFuID0gdHJ1ZSxcclxuICAgICAgICAvKiogaG93IGNvbmZpZGVudCB3ZSBzb3VsZCBiZSBpbiB0aGUgY2xhaW0uIChBS0EgVHJ1ZSkgKi9cclxuICAgICAgICAvKiogSG93IHRoZSBjaGlsZCBhZmZlY3RzIHRoZSBwYXJlbnQgc2NvcmUgKi9cclxuICAgICAgICBwdWJsaWMgYWZmZWN0czogQWZmZWN0cyA9IFwiY29uZmlkZW5jZVwiLFxyXG4gICAgICAgIHB1YmxpYyBjb25maWRlbmNlOiBudW1iZXIgPSAxLFxyXG4gICAgICAgIC8qKiBIb3cgcmVsZXZlbnQgdGhpcyBjbGFpbSBpcyB0byBpdCdzIHBhcmVudCBjbGFpbS4gUmFuZ2VzIGZyb20gMCB0byBpbmZpbml0eS5cclxuICAgICAgICAgKiBBIG11bHRpcGxpZXIgc2V0IGJ5IGFsbCB0aGUgY2hpbGQgZWRnZXMgdGhhdCBhZmZlY3QgJ3JlbGV2YW5jZScqL1xyXG4gICAgICAgIHB1YmxpYyByZWxldmFuY2U6IG51bWJlciA9IDEsXHJcbiAgICAgICAgcHVibGljIGlkOiBzdHJpbmcgPSBuZXdJZCgpLFxyXG4gICAgICAgIHB1YmxpYyBwcmlvcml0eTogc3RyaW5nID0gXCJcIixcclxuICAgICAgICBwdWJsaWMgY29udGVudDogc3RyaW5nID0gXCJcIixcclxuICAgICAgICAvKiogV2hhdCBmcmFjdGlvbiBvZiB0cmVlIGlzIHRoaXMgc2NvcmUgYW5kIGl0J3MgZGVzY2VuZGFudHMgcmVzcG9uc2libGUgZm9yICovXHJcbiAgICAgICAgcHVibGljIGZyYWN0aW9uOiBudW1iZXIgPSAxLFxyXG4gICAgICAgIHB1YmxpYyBkZXNjZW5kYW50Q291bnQ6IG51bWJlciA9IDAsXHJcbiAgICApIHtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2hpbGRyZW5BdmVyYWdpbmdXZWlnaHQ6IG51bWJlciA9IDE7XHJcbiAgICBwdWJsaWMgY2hpbGRyZW5Db25maWRlbmNlV2VpZ2h0OiBudW1iZXIgPSAxO1xyXG4gICAgcHVibGljIGNoaWxkcmVuUmVsZXZhbmNlV2VpZ2h0OiBudW1iZXIgPSAxO1xyXG4gICAgcHVibGljIGNoaWxkcmVuV2VpZ2h0OiBudW1iZXIgPSAxO1xyXG4gICAgcHVibGljIHdlaWdodDogbnVtYmVyID0gMTtcclxuICAgIHB1YmxpYyBwZXJjZW50T2ZXZWlnaHQ6IG51bWJlciA9IDE7XHJcbn1cclxuXHJcbiJdfQ==
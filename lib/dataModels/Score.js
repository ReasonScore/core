"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Score = void 0;

var _newId = require("../newId");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Stores the score for a claim. Just a data transfer object. Does not contain any logic.
 */
class Score {
  constructor(sourceClaimId, scoreTreeId, parentScoreId = null, sourceEdgeId = null, reversible = false, pro = true, affects = "confidence", confidence = 1, relevance = 1, id = (0, _newId.newId)(), priority = "", content = "") {
    this.sourceClaimId = sourceClaimId;
    this.scoreTreeId = scoreTreeId;
    this.parentScoreId = parentScoreId;
    this.sourceEdgeId = sourceEdgeId;
    this.reversible = reversible;
    this.pro = pro;
    this.affects = affects;
    this.confidence = confidence;
    this.relevance = relevance;
    this.id = id;
    this.priority = priority;
    this.content = content;

    _defineProperty(this, "type", 'score');

    _defineProperty(this, "descendantCount", 0);

    _defineProperty(this, "generation", 0);

    _defineProperty(this, "fractionSimple", 1);

    _defineProperty(this, "fraction", 1);

    _defineProperty(this, "childrenAveragingWeight", 1);

    _defineProperty(this, "childrenConfidenceWeight", 1);

    _defineProperty(this, "childrenRelevanceWeight", 1);

    _defineProperty(this, "childrenWeight", 1);

    _defineProperty(this, "weight", 1);

    _defineProperty(this, "percentOfWeight", 1);
  } // //TODO:Experimental
  // public childrenProWeight: number = 0;
  // public childrenConWeight: number = 0;
  // public percentAgreeWeight: number = 0;
  // public parentFractionSimple: number = 0;


}

exports.Score = Score;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhTW9kZWxzL1Njb3JlLnRzIl0sIm5hbWVzIjpbIlNjb3JlIiwiY29uc3RydWN0b3IiLCJzb3VyY2VDbGFpbUlkIiwic2NvcmVUcmVlSWQiLCJwYXJlbnRTY29yZUlkIiwic291cmNlRWRnZUlkIiwicmV2ZXJzaWJsZSIsInBybyIsImFmZmVjdHMiLCJjb25maWRlbmNlIiwicmVsZXZhbmNlIiwiaWQiLCJwcmlvcml0eSIsImNvbnRlbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUlBOzs7QUFHTyxNQUFNQSxLQUFOLENBQTRCO0FBRy9CQyxFQUFBQSxXQUFXLENBRUFDLGFBRkEsRUFJQUMsV0FKQSxFQU1BQyxhQUE0QixHQUFHLElBTi9CLEVBUUFDLFlBQTJCLEdBQUcsSUFSOUIsRUFVQUMsVUFBbUIsR0FBRyxLQVZ0QixFQVlBQyxHQUFZLEdBQUcsSUFaZixFQWVBQyxPQUFnQixHQUFHLFlBZm5CLEVBZ0JBQyxVQUFrQixHQUFHLENBaEJyQixFQW1CQUMsU0FBaUIsR0FBRyxDQW5CcEIsRUFvQkFDLEVBQVUsR0FBRyxtQkFwQmIsRUFxQkFDLFFBQWdCLEdBQUcsRUFyQm5CLEVBc0JBQyxPQUFlLEdBQUcsRUF0QmxCLEVBdUJUO0FBQUEsU0FyQlNYLGFBcUJULEdBckJTQSxhQXFCVDtBQUFBLFNBbkJTQyxXQW1CVCxHQW5CU0EsV0FtQlQ7QUFBQSxTQWpCU0MsYUFpQlQsR0FqQlNBLGFBaUJUO0FBQUEsU0FmU0MsWUFlVCxHQWZTQSxZQWVUO0FBQUEsU0FiU0MsVUFhVCxHQWJTQSxVQWFUO0FBQUEsU0FYU0MsR0FXVCxHQVhTQSxHQVdUO0FBQUEsU0FSU0MsT0FRVCxHQVJTQSxPQVFUO0FBQUEsU0FQU0MsVUFPVCxHQVBTQSxVQU9UO0FBQUEsU0FKU0MsU0FJVCxHQUpTQSxTQUlUO0FBQUEsU0FIU0MsRUFHVCxHQUhTQSxFQUdUO0FBQUEsU0FGU0MsUUFFVCxHQUZTQSxRQUVUO0FBQUEsU0FEU0MsT0FDVCxHQURTQSxPQUNUOztBQUFBLGtDQXpCZ0IsT0F5QmhCOztBQUFBLDZDQUcrQixDQUgvQjs7QUFBQSx3Q0FJMEIsQ0FKMUI7O0FBQUEsNENBTzhCLENBUDlCOztBQUFBLHNDQVN3QixDQVR4Qjs7QUFBQSxxREFXdUMsQ0FYdkM7O0FBQUEsc0RBWXdDLENBWnhDOztBQUFBLHFEQWF1QyxDQWJ2Qzs7QUFBQSw0Q0FjOEIsQ0FkOUI7O0FBQUEsb0NBZXNCLENBZnRCOztBQUFBLDZDQWdCK0IsQ0FoQi9CO0FBQ0QsR0EzQjhCLENBNEMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFoRCtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmV3SWQgfSBmcm9tIFwiLi4vbmV3SWRcIjtcclxuaW1wb3J0IHsgQWZmZWN0cyB9IGZyb20gXCIuL0FmZmVjdHNcIjtcclxuaW1wb3J0IHsgSXRlbSB9IGZyb20gXCIuL0l0ZW1cIjtcclxuaW1wb3J0IHsgSXRlbVR5cGVzIH0gZnJvbSBcIi4uXCI7XHJcbi8qKlxyXG4gKiBTdG9yZXMgdGhlIHNjb3JlIGZvciBhIGNsYWltLiBKdXN0IGEgZGF0YSB0cmFuc2ZlciBvYmplY3QuIERvZXMgbm90IGNvbnRhaW4gYW55IGxvZ2ljLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNjb3JlIGltcGxlbWVudHMgSXRlbSB7XHJcbiAgICB0eXBlOiBJdGVtVHlwZXMgPSAnc2NvcmUnXHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgLyoqIFRoZSBjbGFpbSB0byB3aGljaCB0aGlzIHNjb3JlIGJlbG9uZ3MgKi9cclxuICAgICAgICBwdWJsaWMgc291cmNlQ2xhaW1JZDogc3RyaW5nLFxyXG4gICAgICAgIC8qKiBUaGUgdG9wIG9mIHRoZSB0cmVlIG9mIHNjb3JlcyB0aGF0IHRoaXMgYmVsb25ncyB0by4gVXNlZCBmb3IgaW5kZXhpbmcgKi9cclxuICAgICAgICBwdWJsaWMgc2NvcmVUcmVlSWQ6IHN0cmluZyxcclxuICAgICAgICAvKiogVGhlIHBhcmVudCBvZiB0aGlzIHNjb3JlIGluIHRoZSBzY29yZSB0cmVlIGdyYXBoICovXHJcbiAgICAgICAgcHVibGljIHBhcmVudFNjb3JlSWQ6IHN0cmluZyB8IG51bGwgPSBudWxsLCAvLyBVc2UgbnVsbCBiZWNhdXNlIEZpcmVzdG9yZSBkb2VzIG5vdCBhbGxvdyB1bmRlZmluZWRcclxuICAgICAgICAvKiogVGhlIEVkZ2UgdG8gd2hpY2ggdGhpcyBzY29yZSBiZWxvbmdzICovXHJcbiAgICAgICAgcHVibGljIHNvdXJjZUVkZ2VJZDogc3RyaW5nIHwgbnVsbCA9IG51bGwsXHJcblxyXG4gICAgICAgIHB1YmxpYyByZXZlcnNpYmxlOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICAgICAgLyoqIElzIHRoaXMgc2NvcmUgYSBwcm8gb2YgaXQncyBwYXJlbnQgKGZhbHNlIGlmIGl0IGlzIGEgY29uKSAqL1xyXG4gICAgICAgIHB1YmxpYyBwcm86IGJvb2xlYW4gPSB0cnVlLFxyXG4gICAgICAgIC8qKiBob3cgY29uZmlkZW50IHdlIHNvdWxkIGJlIGluIHRoZSBjbGFpbS4gKEFLQSBUcnVlKSAqL1xyXG4gICAgICAgIC8qKiBIb3cgdGhlIGNoaWxkIGFmZmVjdHMgdGhlIHBhcmVudCBzY29yZSAqL1xyXG4gICAgICAgIHB1YmxpYyBhZmZlY3RzOiBBZmZlY3RzID0gXCJjb25maWRlbmNlXCIsXHJcbiAgICAgICAgcHVibGljIGNvbmZpZGVuY2U6IG51bWJlciA9IDEsXHJcbiAgICAgICAgLyoqIEhvdyByZWxldmVudCB0aGlzIGNsYWltIGlzIHRvIGl0J3MgcGFyZW50IGNsYWltLiBSYW5nZXMgZnJvbSAwIHRvIGluZmluaXR5LlxyXG4gICAgICAgICAqIEEgbXVsdGlwbGllciBzZXQgYnkgYWxsIHRoZSBjaGlsZCBlZGdlcyB0aGF0IGFmZmVjdCAncmVsZXZhbmNlJyovXHJcbiAgICAgICAgcHVibGljIHJlbGV2YW5jZTogbnVtYmVyID0gMSxcclxuICAgICAgICBwdWJsaWMgaWQ6IHN0cmluZyA9IG5ld0lkKCksXHJcbiAgICAgICAgcHVibGljIHByaW9yaXR5OiBzdHJpbmcgPSBcIlwiLFxyXG4gICAgICAgIHB1YmxpYyBjb250ZW50OiBzdHJpbmcgPSBcIlwiLFxyXG4gICAgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc2NlbmRhbnRDb3VudDogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBnZW5lcmF0aW9uOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKiBXaGF0IGZyYWN0aW9uIG9mIHRyZWUgaXMgdGhpcyBkaXNyZWdhcmRpbmcgYWxsIHNjb3JlcyAqL1xyXG4gICAgcHVibGljIGZyYWN0aW9uU2ltcGxlOiBudW1iZXIgPSAxO1xyXG4gICAgLyoqIFdoYXQgZnJhY3Rpb24gb2YgbWFpblNjb3JlIGlzIHRoaXMgc2NvcmUgYW5kIGl0J3MgZGVzY2VuZGFudHMgcmVzcG9uc2libGUgZm9yICovXHJcbiAgICBwdWJsaWMgZnJhY3Rpb246IG51bWJlciA9IDE7XHJcblxyXG4gICAgcHVibGljIGNoaWxkcmVuQXZlcmFnaW5nV2VpZ2h0OiBudW1iZXIgPSAxO1xyXG4gICAgcHVibGljIGNoaWxkcmVuQ29uZmlkZW5jZVdlaWdodDogbnVtYmVyID0gMTtcclxuICAgIHB1YmxpYyBjaGlsZHJlblJlbGV2YW5jZVdlaWdodDogbnVtYmVyID0gMTtcclxuICAgIHB1YmxpYyBjaGlsZHJlbldlaWdodDogbnVtYmVyID0gMTtcclxuICAgIHB1YmxpYyB3ZWlnaHQ6IG51bWJlciA9IDE7XHJcbiAgICBwdWJsaWMgcGVyY2VudE9mV2VpZ2h0OiBudW1iZXIgPSAxO1xyXG5cclxuICAgIC8vIC8vVE9ETzpFeHBlcmltZW50YWxcclxuICAgIC8vIHB1YmxpYyBjaGlsZHJlblByb1dlaWdodDogbnVtYmVyID0gMDtcclxuICAgIC8vIHB1YmxpYyBjaGlsZHJlbkNvbldlaWdodDogbnVtYmVyID0gMDtcclxuICAgIC8vIHB1YmxpYyBwZXJjZW50QWdyZWVXZWlnaHQ6IG51bWJlciA9IDA7XHJcbiAgICAvLyBwdWJsaWMgcGFyZW50RnJhY3Rpb25TaW1wbGU6IG51bWJlciA9IDA7XHJcbn1cclxuXHJcbiJdfQ==
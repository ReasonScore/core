"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.differentScores = differentScores;
exports.Score = void 0;

var _newId = require("../newId");

/**
 * Stores the score for a claim. Just a data transfer object. Does not contain any logic.
 */
class Score {
  constructor(sourceClaimId, topScoreId, parentScoreId = undefined, sourceEdgeId = undefined, reversible = false, pro = true, affects = "confidence", confidence = 1, relevance = 1, id = (0, _newId.newId)()) {
    this.sourceClaimId = sourceClaimId;
    this.topScoreId = topScoreId;
    this.parentScoreId = parentScoreId;
    this.sourceEdgeId = sourceEdgeId;
    this.reversible = reversible;
    this.pro = pro;
    this.affects = affects;
    this.confidence = confidence;
    this.relevance = relevance;
    this.id = id;
  }

}
/** Compare two scores to see if they are different in what the score is.
 *  Just compares confidence and relavance
 */


exports.Score = Score;

function differentScores(scoreA, scoreB) {
  return !(scoreA.confidence == scoreB.confidence && scoreA.relevance == scoreB.relevance && scoreA.pro == scoreB.pro);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhTW9kZWxzL1Njb3JlLnRzIl0sIm5hbWVzIjpbIlNjb3JlIiwiY29uc3RydWN0b3IiLCJzb3VyY2VDbGFpbUlkIiwidG9wU2NvcmVJZCIsInBhcmVudFNjb3JlSWQiLCJ1bmRlZmluZWQiLCJzb3VyY2VFZGdlSWQiLCJyZXZlcnNpYmxlIiwicHJvIiwiYWZmZWN0cyIsImNvbmZpZGVuY2UiLCJyZWxldmFuY2UiLCJpZCIsImRpZmZlcmVudFNjb3JlcyIsInNjb3JlQSIsInNjb3JlQiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFFQTs7O0FBR08sTUFBTUEsS0FBTixDQUE4QztBQUNqREMsRUFBQUEsV0FBVyxDQUVBQyxhQUZBLEVBSUFDLFVBSkEsRUFNQUMsYUFBaUMsR0FBR0MsU0FOcEMsRUFRQUMsWUFBZ0MsR0FBR0QsU0FSbkMsRUFVQUUsVUFBbUIsR0FBRyxLQVZ0QixFQVlBQyxHQUFZLEdBQUcsSUFaZixFQWVBQyxPQUFnQixHQUFHLFlBZm5CLEVBZ0JBQyxVQUFrQixHQUFHLENBaEJyQixFQW1CQUMsU0FBaUIsR0FBRyxDQW5CcEIsRUFvQkFDLEVBQVUsR0FBRyxtQkFwQmIsRUFxQlQ7QUFBQSxTQW5CU1YsYUFtQlQsR0FuQlNBLGFBbUJUO0FBQUEsU0FqQlNDLFVBaUJULEdBakJTQSxVQWlCVDtBQUFBLFNBZlNDLGFBZVQsR0FmU0EsYUFlVDtBQUFBLFNBYlNFLFlBYVQsR0FiU0EsWUFhVDtBQUFBLFNBWFNDLFVBV1QsR0FYU0EsVUFXVDtBQUFBLFNBVFNDLEdBU1QsR0FUU0EsR0FTVDtBQUFBLFNBTlNDLE9BTVQsR0FOU0EsT0FNVDtBQUFBLFNBTFNDLFVBS1QsR0FMU0EsVUFLVDtBQUFBLFNBRlNDLFNBRVQsR0FGU0EsU0FFVDtBQUFBLFNBRFNDLEVBQ1QsR0FEU0EsRUFDVDtBQUNEOztBQXZCZ0Q7QUEwQnJEOzs7Ozs7O0FBR08sU0FBU0MsZUFBVCxDQUF5QkMsTUFBekIsRUFBeUNDLE1BQXpDLEVBQXlEO0FBQzVELFNBQU8sRUFDSEQsTUFBTSxDQUFDSixVQUFQLElBQXFCSyxNQUFNLENBQUNMLFVBQTVCLElBQ0dJLE1BQU0sQ0FBQ0gsU0FBUCxJQUFvQkksTUFBTSxDQUFDSixTQUQ5QixJQUVHRyxNQUFNLENBQUNOLEdBQVAsSUFBY08sTUFBTSxDQUFDUCxHQUhyQixDQUFQO0FBS0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJZCB9IGZyb20gXCIuLi9uZXdJZFwiO1xyXG5pbXBvcnQgeyBBZmZlY3RzIH0gZnJvbSBcIi4vQWZmZWN0c1wiO1xyXG4vKipcclxuICogU3RvcmVzIHRoZSBzY29yZSBmb3IgYSBjbGFpbS4gSnVzdCBhIGRhdGEgdHJhbnNmZXIgb2JqZWN0LiBEb2VzIG5vdCBjb250YWluIGFueSBsb2dpYy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTY29yZSBpbXBsZW1lbnRzIGlTY29yZSwgaVNjb3JlRnJhZ21lbnQge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgLyoqIFRoZSBjbGFpbSB0byB3aGljaCB0aGlzIHNjb3JlIGJlbG9uZ3MgKi9cclxuICAgICAgICBwdWJsaWMgc291cmNlQ2xhaW1JZDogc3RyaW5nLFxyXG4gICAgICAgIC8qKiBUaGUgdG9wIG9mIHRoZSB0cmVlIG9mIHNjb3JlcyB0aGF0IHRoaXMgYmVsb25ncyB0by4gVXNlZCBmb3IgaW5kZXhpbmcgKi9cclxuICAgICAgICBwdWJsaWMgdG9wU2NvcmVJZDogc3RyaW5nLFxyXG4gICAgICAgIC8qKiBUaGUgcGFyZW50IG9mIHRoaXMgc2NvcmUgaW4gdGhlIHNjb3JlIHRyZWUgZ3JhcGggKi9cclxuICAgICAgICBwdWJsaWMgcGFyZW50U2NvcmVJZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxyXG4gICAgICAgIC8qKiBUaGUgRWRnZSB0byB3aGljaCB0aGlzIHNjb3JlIGJlbG9uZ3MgKi9cclxuICAgICAgICBwdWJsaWMgc291cmNlRWRnZUlkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsXHJcblxyXG4gICAgICAgIHB1YmxpYyByZXZlcnNpYmxlOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICAgICAgLyoqIElzIHRoaXMgc2NvcmUgYSBwcm8gb2YgaXQncyBwYXJlbnQgKGZhbHNlIGlmIGl0IGlzIGEgY29uKSAqL1xyXG4gICAgICAgIHB1YmxpYyBwcm86IGJvb2xlYW4gPSB0cnVlLFxyXG4gICAgICAgIC8qKiBob3cgY29uZmlkZW50IHdlIHNvdWxkIGJlIGluIHRoZSBjbGFpbS4gKEFLQSBUcnVlKSAqL1xyXG4gICAgICAgIC8qKiBIb3cgdGhlIGNoaWxkIGFmZmVjdHMgdGhlIHBhcmVudCBzY29yZSAqL1xyXG4gICAgICAgIHB1YmxpYyBhZmZlY3RzOiBBZmZlY3RzID0gXCJjb25maWRlbmNlXCIsXHJcbiAgICAgICAgcHVibGljIGNvbmZpZGVuY2U6IG51bWJlciA9IDEsXHJcbiAgICAgICAgLyoqIEhvdyByZWxldmVudCB0aGlzIGNsYWltIGlzIHRvIGl0J3MgcGFyZW50IGNsYWltLiBSYW5nZXMgZnJvbSAwIHRvIGluZmluaXR5LlxyXG4gICAgICAgICAqIEEgbXVsdGlwbGllciBzZXQgYnkgYWxsIHRoZSBjaGlsZCBlZGdlcyB0aGF0IGFmZmVjdCAncmVsZXZhbmNlJyovXHJcbiAgICAgICAgcHVibGljIHJlbGV2YW5jZTogbnVtYmVyID0gMSxcclxuICAgICAgICBwdWJsaWMgaWQ6IHN0cmluZyA9IG5ld0lkKCksXHJcbiAgICApIHtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIENvbXBhcmUgdHdvIHNjb3JlcyB0byBzZWUgaWYgdGhleSBhcmUgZGlmZmVyZW50IGluIHdoYXQgdGhlIHNjb3JlIGlzLlxyXG4gKiAgSnVzdCBjb21wYXJlcyBjb25maWRlbmNlIGFuZCByZWxhdmFuY2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkaWZmZXJlbnRTY29yZXMoc2NvcmVBOiBpU2NvcmUsIHNjb3JlQjogaVNjb3JlKSB7XHJcbiAgICByZXR1cm4gIShcclxuICAgICAgICBzY29yZUEuY29uZmlkZW5jZSA9PSBzY29yZUIuY29uZmlkZW5jZVxyXG4gICAgICAgICYmIHNjb3JlQS5yZWxldmFuY2UgPT0gc2NvcmVCLnJlbGV2YW5jZVxyXG4gICAgICAgICYmIHNjb3JlQS5wcm8gPT0gc2NvcmVCLnByb1xyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIGlTY29yZSB7XHJcbiAgICAvKiogVGhlIGNsYWltIHRvIHdoaWNoIHRoaXMgc2NvcmUgYmVsb25ncyAqL1xyXG4gICAgc291cmNlQ2xhaW1JZDogc3RyaW5nLFxyXG4gICAgLyoqIFRoZSBFZGdlIHRvIHdoaWNoIHRoaXMgc2NvcmUgYmVsb25ncyAqL1xyXG4gICAgc291cmNlRWRnZUlkPzogc3RyaW5nLFxyXG4gICAgLyoqIFRoZSB0b3Agb2YgdGhlIHRyZWUgb2Ygc2NvcmVzIHRoYXQgdGhpcyBiZWxvbmdzIHRvLiBVc2VkIGZvciBpbmRleGluZyAqL1xyXG4gICAgdG9wU2NvcmVJZDogc3RyaW5nLFxyXG4gICAgLyoqIFRoZSBwYXJlbnQgb2YgdGhpcyBzY29yZSBpbiB0aGUgc2NvcmUgdHJlZSBncmFwaCAqL1xyXG4gICAgcGFyZW50U2NvcmVJZD86IHN0cmluZyxcclxuICAgIHJldmVyc2libGU6IGJvb2xlYW4sXHJcbiAgICAvKiogSXMgdGhpcyBzY29yZSBhIHBybyBvZiBpdCdzIHBhcmVudCAoZmFsc2UgaWYgaXQgaXMgYSBjb24pICovXHJcbiAgICBwcm86IGJvb2xlYW4sXHJcbiAgICAvKiogaG93IGNvbmZpZGVudCB3ZSBzb3VsZCBiZSBpbiB0aGUgY2xhaW0uIChBS0EgVHJ1ZSkgKi9cclxuICAgIC8qKiBIb3cgdGhlIGNoaWxkIGFmZmVjdHMgdGhlIHBhcmVudCBzY29yZSAqL1xyXG4gICAgYWZmZWN0czogQWZmZWN0cyxcclxuICAgIC8qKiBob3cgY29uZmlkZW50IHdlIHNvdWxkIGJlIGluIHRoZSBjbGFpbS4gKEFLQSBUcnVlKSAqL1xyXG4gICAgY29uZmlkZW5jZTogbnVtYmVyLFxyXG4gICAgLyoqIEhvdyByZWxldmVudCB0aGlzIGNsYWltIGlzIHRvIGl0J3MgcGFyZW50IGNsYWltLiBSYW5nZXMgZnJvbSAwIHRvIGluZmluaXR5LlxyXG4gICAgICogQSBtdWx0aXBsaWVyIHNldCBieSBhbGwgdGhlIGNoaWxkIGVkZ2VzIHRoYXQgYWZmZWN0ICdyZWxldmFuY2UnKi9cclxuICAgIHJlbGV2YW5jZTogbnVtYmVyLFxyXG4gICAgaWQ6IHN0cmluZyxcclxuICAgIC8qKiBhbGxvdyBmb3Igb3RoZXIgcHJvcGVydGllcyBieSBleHRlcm5hbCBpbXBsZW1lbnRhdGlvbnMgKi9cclxuICAgIFtvdGhlcnM6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBpU2NvcmVGcmFnbWVudCB7XHJcbiAgICByZXZlcnNpYmxlPzogYm9vbGVhbixcclxuICAgIC8qKiBJcyB0aGlzIHNjb3JlIGEgcHJvIG9mIGl0J3MgcGFyZW50IChmYWxzZSBpZiBpdCBpcyBhIGNvbikgKi9cclxuICAgIHBybz86IGJvb2xlYW4sXHJcbiAgICAvKiogSG93IHRoZSBjaGlsZCBhZmZlY3RzIHRoZSBwYXJlbnQgc2NvcmUgKi9cclxuICAgIGFmZmVjdHM/OiBBZmZlY3RzLFxyXG4gICAgLyoqIGhvdyBjb25maWRlbnQgd2Ugc291bGQgYmUgaW4gdGhlIGNsYWltLiAoQUtBIFRydWUpICovXHJcbiAgICBjb25maWRlbmNlPzogbnVtYmVyLFxyXG4gICAgLyoqIEhvdyByZWxldmVudCB0aGlzIGNsYWltIGlzIHRvIGl0J3MgcGFyZW50IGNsYWltLiBSYW5nZXMgZnJvbSAwIHRvIGluZmluaXR5LlxyXG4gICAgICogQSBtdWx0aXBsaWVyIHNldCBieSBhbGwgdGhlIGNoaWxkIGVkZ2VzIHRoYXQgYWZmZWN0ICdyZWxldmFuY2UnKi9cclxuICAgIHJlbGV2YW5jZT86IG51bWJlcixcclxufSJdfQ==
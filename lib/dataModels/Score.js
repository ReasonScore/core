"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.differentScores = differentScores;
exports.Score = void 0;

var _newId = require("../newId");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Stores the score for a claim. Just a data transfer object. Does not contain any logic.
 */
class Score {
  constructor(sourceClaimId, scoreTreeId, parentScoreId = undefined, sourceEdgeId = undefined, reversible = false, pro = true, affects = "confidence", confidence = 1, relevance = 1, id = (0, _newId.newId)(), priority = "", content = "", fraction = 1, descendantCount = 0) {
    this.sourceClaimId = sourceClaimId;
    this.scoreTreeId = scoreTreeId;
    this.parentScoreId = parentScoreId;
    this.sourceEdgeId = sourceEdgeId;
    this.reversible = reversible;
    this.pro = pro;
    this.affects = affects;
    this.confidence = confidence;
    this.relevance = relevance;
    this.id = id;
    this.priority = priority;
    this.content = content;
    this.fraction = fraction;
    this.descendantCount = descendantCount;

    _defineProperty(this, "type", 'score');
  }

}
/** Compare two scores to see if they are different in what the score is.
 *  Just compares confidence and relavance
 */


exports.Score = Score;

function differentScores(scoreA, scoreB) {
  return !(JSON.stringify(scoreA, Object.keys(scoreA).sort()) === JSON.stringify(scoreB, Object.keys(scoreB).sort()));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhTW9kZWxzL1Njb3JlLnRzIl0sIm5hbWVzIjpbIlNjb3JlIiwiY29uc3RydWN0b3IiLCJzb3VyY2VDbGFpbUlkIiwic2NvcmVUcmVlSWQiLCJwYXJlbnRTY29yZUlkIiwidW5kZWZpbmVkIiwic291cmNlRWRnZUlkIiwicmV2ZXJzaWJsZSIsInBybyIsImFmZmVjdHMiLCJjb25maWRlbmNlIiwicmVsZXZhbmNlIiwiaWQiLCJwcmlvcml0eSIsImNvbnRlbnQiLCJmcmFjdGlvbiIsImRlc2NlbmRhbnRDb3VudCIsImRpZmZlcmVudFNjb3JlcyIsInNjb3JlQSIsInNjb3JlQiIsIkpTT04iLCJzdHJpbmdpZnkiLCJPYmplY3QiLCJrZXlzIiwic29ydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUlBOzs7QUFHTyxNQUFNQSxLQUFOLENBQW9EO0FBR3ZEQyxFQUFBQSxXQUFXLENBRUFDLGFBRkEsRUFJQUMsV0FKQSxFQU1BQyxhQUFpQyxHQUFHQyxTQU5wQyxFQVFBQyxZQUFnQyxHQUFHRCxTQVJuQyxFQVVBRSxVQUFtQixHQUFHLEtBVnRCLEVBWUFDLEdBQVksR0FBRyxJQVpmLEVBZUFDLE9BQWdCLEdBQUcsWUFmbkIsRUFnQkFDLFVBQWtCLEdBQUcsQ0FoQnJCLEVBbUJBQyxTQUFpQixHQUFHLENBbkJwQixFQW9CQUMsRUFBVSxHQUFHLG1CQXBCYixFQXFCQUMsUUFBZ0IsR0FBRyxFQXJCbkIsRUFzQkFDLE9BQWUsR0FBRyxFQXRCbEIsRUF3QkFDLFFBQWdCLEdBQUcsQ0F4Qm5CLEVBeUJBQyxlQUF1QixHQUFHLENBekIxQixFQTBCVDtBQUFBLFNBeEJTZCxhQXdCVCxHQXhCU0EsYUF3QlQ7QUFBQSxTQXRCU0MsV0FzQlQsR0F0QlNBLFdBc0JUO0FBQUEsU0FwQlNDLGFBb0JULEdBcEJTQSxhQW9CVDtBQUFBLFNBbEJTRSxZQWtCVCxHQWxCU0EsWUFrQlQ7QUFBQSxTQWhCU0MsVUFnQlQsR0FoQlNBLFVBZ0JUO0FBQUEsU0FkU0MsR0FjVCxHQWRTQSxHQWNUO0FBQUEsU0FYU0MsT0FXVCxHQVhTQSxPQVdUO0FBQUEsU0FWU0MsVUFVVCxHQVZTQSxVQVVUO0FBQUEsU0FQU0MsU0FPVCxHQVBTQSxTQU9UO0FBQUEsU0FOU0MsRUFNVCxHQU5TQSxFQU1UO0FBQUEsU0FMU0MsUUFLVCxHQUxTQSxRQUtUO0FBQUEsU0FKU0MsT0FJVCxHQUpTQSxPQUlUO0FBQUEsU0FGU0MsUUFFVCxHQUZTQSxRQUVUO0FBQUEsU0FEU0MsZUFDVCxHQURTQSxlQUNUOztBQUFBLGtDQTVCZ0IsT0E0QmhCO0FBQ0Q7O0FBOUJzRDtBQWlDM0Q7Ozs7Ozs7QUFHTyxTQUFTQyxlQUFULENBQXlCQyxNQUF6QixFQUF5Q0MsTUFBekMsRUFBeUQ7QUFFNUQsU0FBTyxFQUNIQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUgsTUFBZixFQUF1QkksTUFBTSxDQUFDQyxJQUFQLENBQVlMLE1BQVosRUFBb0JNLElBQXBCLEVBQXZCLE1BQ0FKLElBQUksQ0FBQ0MsU0FBTCxDQUFlRixNQUFmLEVBQXVCRyxNQUFNLENBQUNDLElBQVAsQ0FBWUosTUFBWixFQUFvQkssSUFBcEIsRUFBdkIsQ0FGRyxDQUFQO0FBSUgiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJZCB9IGZyb20gXCIuLi9uZXdJZFwiO1xyXG5pbXBvcnQgeyBBZmZlY3RzIH0gZnJvbSBcIi4vQWZmZWN0c1wiO1xyXG5pbXBvcnQgeyBJdGVtIH0gZnJvbSBcIi4vSXRlbVwiO1xyXG5pbXBvcnQgeyBJdGVtVHlwZXMgfSBmcm9tIFwiLi5cIjtcclxuLyoqXHJcbiAqIFN0b3JlcyB0aGUgc2NvcmUgZm9yIGEgY2xhaW0uIEp1c3QgYSBkYXRhIHRyYW5zZmVyIG9iamVjdC4gRG9lcyBub3QgY29udGFpbiBhbnkgbG9naWMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2NvcmUgaW1wbGVtZW50cyBpU2NvcmUsIGlTY29yZUZyYWdtZW50LCBJdGVtIHtcclxuICAgIHR5cGU6IEl0ZW1UeXBlcyA9ICdzY29yZSdcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAvKiogVGhlIGNsYWltIHRvIHdoaWNoIHRoaXMgc2NvcmUgYmVsb25ncyAqL1xyXG4gICAgICAgIHB1YmxpYyBzb3VyY2VDbGFpbUlkOiBzdHJpbmcsXHJcbiAgICAgICAgLyoqIFRoZSB0b3Agb2YgdGhlIHRyZWUgb2Ygc2NvcmVzIHRoYXQgdGhpcyBiZWxvbmdzIHRvLiBVc2VkIGZvciBpbmRleGluZyAqL1xyXG4gICAgICAgIHB1YmxpYyBzY29yZVRyZWVJZDogc3RyaW5nLFxyXG4gICAgICAgIC8qKiBUaGUgcGFyZW50IG9mIHRoaXMgc2NvcmUgaW4gdGhlIHNjb3JlIHRyZWUgZ3JhcGggKi9cclxuICAgICAgICBwdWJsaWMgcGFyZW50U2NvcmVJZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxyXG4gICAgICAgIC8qKiBUaGUgRWRnZSB0byB3aGljaCB0aGlzIHNjb3JlIGJlbG9uZ3MgKi9cclxuICAgICAgICBwdWJsaWMgc291cmNlRWRnZUlkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsXHJcblxyXG4gICAgICAgIHB1YmxpYyByZXZlcnNpYmxlOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICAgICAgLyoqIElzIHRoaXMgc2NvcmUgYSBwcm8gb2YgaXQncyBwYXJlbnQgKGZhbHNlIGlmIGl0IGlzIGEgY29uKSAqL1xyXG4gICAgICAgIHB1YmxpYyBwcm86IGJvb2xlYW4gPSB0cnVlLFxyXG4gICAgICAgIC8qKiBob3cgY29uZmlkZW50IHdlIHNvdWxkIGJlIGluIHRoZSBjbGFpbS4gKEFLQSBUcnVlKSAqL1xyXG4gICAgICAgIC8qKiBIb3cgdGhlIGNoaWxkIGFmZmVjdHMgdGhlIHBhcmVudCBzY29yZSAqL1xyXG4gICAgICAgIHB1YmxpYyBhZmZlY3RzOiBBZmZlY3RzID0gXCJjb25maWRlbmNlXCIsXHJcbiAgICAgICAgcHVibGljIGNvbmZpZGVuY2U6IG51bWJlciA9IDEsXHJcbiAgICAgICAgLyoqIEhvdyByZWxldmVudCB0aGlzIGNsYWltIGlzIHRvIGl0J3MgcGFyZW50IGNsYWltLiBSYW5nZXMgZnJvbSAwIHRvIGluZmluaXR5LlxyXG4gICAgICAgICAqIEEgbXVsdGlwbGllciBzZXQgYnkgYWxsIHRoZSBjaGlsZCBlZGdlcyB0aGF0IGFmZmVjdCAncmVsZXZhbmNlJyovXHJcbiAgICAgICAgcHVibGljIHJlbGV2YW5jZTogbnVtYmVyID0gMSxcclxuICAgICAgICBwdWJsaWMgaWQ6IHN0cmluZyA9IG5ld0lkKCksXHJcbiAgICAgICAgcHVibGljIHByaW9yaXR5OiBzdHJpbmcgPSBcIlwiLFxyXG4gICAgICAgIHB1YmxpYyBjb250ZW50OiBzdHJpbmcgPSBcIlwiLFxyXG4gICAgICAgIC8qKiBXaGF0IGZyYWN0aW9uIG9mIHRyZWUgaXMgdGhpcyBzY29yZSBhbmQgaXQncyBkZXNjZW5kYW50cyByZXNwb25zaWJsZSBmb3IgKi9cclxuICAgICAgICBwdWJsaWMgZnJhY3Rpb246IG51bWJlciA9IDEsXHJcbiAgICAgICAgcHVibGljIGRlc2NlbmRhbnRDb3VudDogbnVtYmVyID0gMCxcclxuICAgICkge1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQ29tcGFyZSB0d28gc2NvcmVzIHRvIHNlZSBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgaW4gd2hhdCB0aGUgc2NvcmUgaXMuXHJcbiAqICBKdXN0IGNvbXBhcmVzIGNvbmZpZGVuY2UgYW5kIHJlbGF2YW5jZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZlcmVudFNjb3JlcyhzY29yZUE6IGlTY29yZSwgc2NvcmVCOiBpU2NvcmUpIHtcclxuXHJcbiAgICByZXR1cm4gIShcclxuICAgICAgICBKU09OLnN0cmluZ2lmeShzY29yZUEsIE9iamVjdC5rZXlzKHNjb3JlQSkuc29ydCgpKSA9PT1cclxuICAgICAgICBKU09OLnN0cmluZ2lmeShzY29yZUIsIE9iamVjdC5rZXlzKHNjb3JlQikuc29ydCgpKVxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIGlTY29yZSB7XHJcbiAgICAvKiogVGhlIGNsYWltIHRvIHdoaWNoIHRoaXMgc2NvcmUgYmVsb25ncyAqL1xyXG4gICAgc291cmNlQ2xhaW1JZDogc3RyaW5nLFxyXG4gICAgLyoqIFRoZSBFZGdlIHRvIHdoaWNoIHRoaXMgc2NvcmUgYmVsb25ncyAqL1xyXG4gICAgc291cmNlRWRnZUlkPzogc3RyaW5nLFxyXG4gICAgLyoqIFRoZSB0b3Agb2YgdGhlIHRyZWUgb2Ygc2NvcmVzIHRoYXQgdGhpcyBiZWxvbmdzIHRvLiBVc2VkIGZvciBpbmRleGluZyAqL1xyXG4gICAgc2NvcmVUcmVlSWQ6IHN0cmluZyxcclxuICAgIC8qKiBUaGUgcGFyZW50IG9mIHRoaXMgc2NvcmUgaW4gdGhlIHNjb3JlIHRyZWUgZ3JhcGggKi9cclxuICAgIHBhcmVudFNjb3JlSWQ/OiBzdHJpbmcsXHJcbiAgICByZXZlcnNpYmxlOiBib29sZWFuLFxyXG4gICAgLyoqIElzIHRoaXMgc2NvcmUgYSBwcm8gb2YgaXQncyBwYXJlbnQgKGZhbHNlIGlmIGl0IGlzIGEgY29uKSAqL1xyXG4gICAgcHJvOiBib29sZWFuLFxyXG4gICAgLyoqIGhvdyBjb25maWRlbnQgd2Ugc291bGQgYmUgaW4gdGhlIGNsYWltLiAoQUtBIFRydWUpICovXHJcbiAgICAvKiogSG93IHRoZSBjaGlsZCBhZmZlY3RzIHRoZSBwYXJlbnQgc2NvcmUgKi9cclxuICAgIGFmZmVjdHM6IEFmZmVjdHMsXHJcbiAgICAvKiogaG93IGNvbmZpZGVudCB3ZSBzb3VsZCBiZSBpbiB0aGUgY2xhaW0uIChBS0EgVHJ1ZSkgKi9cclxuICAgIGNvbmZpZGVuY2U6IG51bWJlcixcclxuICAgIC8qKiBIb3cgcmVsZXZlbnQgdGhpcyBjbGFpbSBpcyB0byBpdCdzIHBhcmVudCBjbGFpbS4gUmFuZ2VzIGZyb20gMCB0byBpbmZpbml0eS5cclxuICAgICAqIEEgbXVsdGlwbGllciBzZXQgYnkgYWxsIHRoZSBjaGlsZCBlZGdlcyB0aGF0IGFmZmVjdCAncmVsZXZhbmNlJyovXHJcbiAgICByZWxldmFuY2U6IG51bWJlcixcclxuICAgIGlkOiBzdHJpbmcsXHJcbiAgICB0eXBlOiBJdGVtVHlwZXMsXHJcbiAgICBwcmlvcml0eTogc3RyaW5nLFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG5cclxuICAgIC8qKiBXaGF0IGZyYWN0aW9uIG9mIHRyZWUgaXMgdGhpcyBzY29yZSBhbmQgaXQncyBkZXNjZW5kYW50cyByZXNwb25zaWJsZSBmb3IgKi9cclxuICAgIGZyYWN0aW9uOiBudW1iZXIsIC8vIFRPRE86IENvbnNpZGVyIG1vdmluZyBvdXRzaWRlIHRoZSBzdGFuZGFyZCBzY29yZS4gSXMgdGhpcyBhIHJhcmUgY2FzZT9cclxuICAgIGRlc2NlbmRhbnRDb3VudDogbnVtYmVyLCAvLyBUT0RPOiBDb25zaWRlciBtb3Zpbmcgb3V0c2lkZSB0aGUgc3RhbmRhcmQgc2NvcmUuIElzIHRoaXMgYSByYXJlIGNhc2U/XHJcblxyXG4gICAgLyoqIGFsbG93IGZvciBvdGhlciBwcm9wZXJ0aWVzIGJ5IGV4dGVybmFsIGltcGxlbWVudGF0aW9ucyAqL1xyXG4gICAgLy8gW290aGVyczogc3RyaW5nXTogYW55O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIGlTY29yZUZyYWdtZW50IHtcclxuICAgIHJldmVyc2libGU/OiBib29sZWFuLFxyXG4gICAgLyoqIElzIHRoaXMgc2NvcmUgYSBwcm8gb2YgaXQncyBwYXJlbnQgKGZhbHNlIGlmIGl0IGlzIGEgY29uKSAqL1xyXG4gICAgcHJvPzogYm9vbGVhbixcclxuICAgIC8qKiBIb3cgdGhlIGNoaWxkIGFmZmVjdHMgdGhlIHBhcmVudCBzY29yZSAqL1xyXG4gICAgYWZmZWN0cz86IEFmZmVjdHMsXHJcbiAgICAvKiogaG93IGNvbmZpZGVudCB3ZSBzb3VsZCBiZSBpbiB0aGUgY2xhaW0uIChBS0EgVHJ1ZSkgKi9cclxuICAgIGNvbmZpZGVuY2U/OiBudW1iZXIsXHJcbiAgICAvKiogSG93IHJlbGV2ZW50IHRoaXMgY2xhaW0gaXMgdG8gaXQncyBwYXJlbnQgY2xhaW0uIFJhbmdlcyBmcm9tIDAgdG8gaW5maW5pdHkuXHJcbiAgICAgKiBBIG11bHRpcGxpZXIgc2V0IGJ5IGFsbCB0aGUgY2hpbGQgZWRnZXMgdGhhdCBhZmZlY3QgJ3JlbGV2YW5jZScqL1xyXG4gICAgcmVsZXZhbmNlPzogbnVtYmVyLFxyXG4gICAgcHJpb3JpdHk/OiBzdHJpbmcsXHJcbiAgICAvKiogV2hhdCBmcmFjdGlvbiBvZiB0cmVlIGlzIHRoaXMgc2NvcmUgYW5kIGl0J3MgZGVzY2VuZGFudHMgcmVzcG9uc2libGUgZm9yICovXHJcbiAgICBmcmFjdGlvbj86IG51bWJlcixcclxuICAgIGRlc2NlbmRhbnRDb3VudD86IG51bWJlcixcclxuICAgIC8qKiBhbGxvdyBmb3Igb3RoZXIgcHJvcGVydGllcyBieSBleHRlcm5hbCBpbXBsZW1lbnRhdGlvbnMgKi9cclxuICAgIC8vIFtvdGhlcnM6IHN0cmluZ106IGFueTtcclxufSJdfQ==
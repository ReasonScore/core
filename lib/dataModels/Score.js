"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.differentScores = differentScores;
exports.Score = void 0;

var _newId = require("../newId");

/**
 * Stores the score for a claim. Just a data transfer object. Does not contain any logic.
 */
class Score {
  constructor(sourceClaimId = "", parentScoreId = undefined, reversible = false, pro = true, affects = "confidence", confidence = 1, relevance = 1, id = (0, _newId.newId)()) {
    this.sourceClaimId = sourceClaimId;
    this.parentScoreId = parentScoreId;
    this.reversible = reversible;
    this.pro = pro;
    this.affects = affects;
    this.confidence = confidence;
    this.relevance = relevance;
    this.id = id;
  }

}
/** Compare two scores to see if they are different in what the score is.
 *  Just compares confidence and relavance
 */


exports.Score = Score;

function differentScores(scoreA, scoreB) {
  return !(scoreA.confidence == scoreB.confidence && scoreA.relevance == scoreB.relevance && scoreA.pro == scoreB.pro);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhTW9kZWxzL1Njb3JlLnRzIl0sIm5hbWVzIjpbIlNjb3JlIiwiY29uc3RydWN0b3IiLCJzb3VyY2VDbGFpbUlkIiwicGFyZW50U2NvcmVJZCIsInVuZGVmaW5lZCIsInJldmVyc2libGUiLCJwcm8iLCJhZmZlY3RzIiwiY29uZmlkZW5jZSIsInJlbGV2YW5jZSIsImlkIiwiZGlmZmVyZW50U2NvcmVzIiwic2NvcmVBIiwic2NvcmVCIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUVBOzs7QUFHTyxNQUFNQSxLQUFOLENBQThDO0FBQ2pEQyxFQUFBQSxXQUFXLENBRUFDLGFBQXFCLEdBQUcsRUFGeEIsRUFJQUMsYUFBaUMsR0FBR0MsU0FKcEMsRUFLQUMsVUFBbUIsR0FBRyxLQUx0QixFQU9BQyxHQUFZLEdBQUcsSUFQZixFQVVBQyxPQUFnQixHQUFHLFlBVm5CLEVBV0FDLFVBQWtCLEdBQUcsQ0FYckIsRUFjQUMsU0FBaUIsR0FBRyxDQWRwQixFQWVBQyxFQUFVLEdBQUcsbUJBZmIsRUFnQlQ7QUFBQSxTQWRTUixhQWNULEdBZFNBLGFBY1Q7QUFBQSxTQVpTQyxhQVlULEdBWlNBLGFBWVQ7QUFBQSxTQVhTRSxVQVdULEdBWFNBLFVBV1Q7QUFBQSxTQVRTQyxHQVNULEdBVFNBLEdBU1Q7QUFBQSxTQU5TQyxPQU1ULEdBTlNBLE9BTVQ7QUFBQSxTQUxTQyxVQUtULEdBTFNBLFVBS1Q7QUFBQSxTQUZTQyxTQUVULEdBRlNBLFNBRVQ7QUFBQSxTQURTQyxFQUNULEdBRFNBLEVBQ1Q7QUFDRDs7QUFsQmdEO0FBcUJyRDs7Ozs7OztBQUdPLFNBQVNDLGVBQVQsQ0FBeUJDLE1BQXpCLEVBQXlDQyxNQUF6QyxFQUF5RDtBQUM1RCxTQUFPLEVBQ0hELE1BQU0sQ0FBQ0osVUFBUCxJQUFxQkssTUFBTSxDQUFDTCxVQUE1QixJQUNHSSxNQUFNLENBQUNILFNBQVAsSUFBb0JJLE1BQU0sQ0FBQ0osU0FEOUIsSUFFR0csTUFBTSxDQUFDTixHQUFQLElBQWNPLE1BQU0sQ0FBQ1AsR0FIckIsQ0FBUDtBQUtIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmV3SWQgfSBmcm9tIFwiLi4vbmV3SWRcIjtcclxuaW1wb3J0IHsgQWZmZWN0cyB9IGZyb20gXCIuL0FmZmVjdHNcIjtcclxuLyoqXHJcbiAqIFN0b3JlcyB0aGUgc2NvcmUgZm9yIGEgY2xhaW0uIEp1c3QgYSBkYXRhIHRyYW5zZmVyIG9iamVjdC4gRG9lcyBub3QgY29udGFpbiBhbnkgbG9naWMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2NvcmUgaW1wbGVtZW50cyBpU2NvcmUsIGlTY29yZUZyYWdtZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIC8qKiBUaGUgY2xhaW0gdG8gd2hpY2ggdGhpcyBzY29yZSBiZWxvbmdzICovXHJcbiAgICAgICAgcHVibGljIHNvdXJjZUNsYWltSWQ6IHN0cmluZyA9IFwiXCIsICAvL1RPRE86IFNob3VsZCB3ZSBjaGFuZ2UgdGhpcyB0byBhbHNvIGJlIGFuIGVkZ2Ugc28gd2UgY2FuIGhhdmUgYSBjbGFpbSBleGlzdCB0d2ljZSB3aXRoIHRoZSBzYW1lIHBhcmVudD9cclxuICAgICAgICAvKiogVGhlIHBhcmVudCBvZiB0aGlzIHNjb3JlIGluIHRoZSBzY29yZSB0cmVlIGdyYXBoICovXHJcbiAgICAgICAgcHVibGljIHBhcmVudFNjb3JlSWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCxcclxuICAgICAgICBwdWJsaWMgcmV2ZXJzaWJsZTogYm9vbGVhbiA9IGZhbHNlLFxyXG4gICAgICAgIC8qKiBJcyB0aGlzIHNjb3JlIGEgcHJvIG9mIGl0J3MgcGFyZW50IChmYWxzZSBpZiBpdCBpcyBhIGNvbikgKi9cclxuICAgICAgICBwdWJsaWMgcHJvOiBib29sZWFuID0gdHJ1ZSxcclxuICAgICAgICAvKiogaG93IGNvbmZpZGVudCB3ZSBzb3VsZCBiZSBpbiB0aGUgY2xhaW0uIChBS0EgVHJ1ZSkgKi9cclxuICAgICAgICAvKiogSG93IHRoZSBjaGlsZCBhZmZlY3RzIHRoZSBwYXJlbnQgc2NvcmUgKi9cclxuICAgICAgICBwdWJsaWMgYWZmZWN0czogQWZmZWN0cyA9IFwiY29uZmlkZW5jZVwiLFxyXG4gICAgICAgIHB1YmxpYyBjb25maWRlbmNlOiBudW1iZXIgPSAxLFxyXG4gICAgICAgIC8qKiBIb3cgcmVsZXZlbnQgdGhpcyBjbGFpbSBpcyB0byBpdCdzIHBhcmVudCBjbGFpbS4gUmFuZ2VzIGZyb20gMCB0byBpbmZpbml0eS5cclxuICAgICAgICAgKiBBIG11bHRpcGxpZXIgc2V0IGJ5IGFsbCB0aGUgY2hpbGQgZWRnZXMgdGhhdCBhZmZlY3QgJ3JlbGV2YW5jZScqL1xyXG4gICAgICAgIHB1YmxpYyByZWxldmFuY2U6IG51bWJlciA9IDEsXHJcbiAgICAgICAgcHVibGljIGlkOiBzdHJpbmcgPSBuZXdJZCgpLFxyXG4gICAgKSB7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBDb21wYXJlIHR3byBzY29yZXMgdG8gc2VlIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBpbiB3aGF0IHRoZSBzY29yZSBpcy5cclxuICogIEp1c3QgY29tcGFyZXMgY29uZmlkZW5jZSBhbmQgcmVsYXZhbmNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW50U2NvcmVzKHNjb3JlQTogaVNjb3JlLCBzY29yZUI6IGlTY29yZSkge1xyXG4gICAgcmV0dXJuICEoXHJcbiAgICAgICAgc2NvcmVBLmNvbmZpZGVuY2UgPT0gc2NvcmVCLmNvbmZpZGVuY2VcclxuICAgICAgICAmJiBzY29yZUEucmVsZXZhbmNlID09IHNjb3JlQi5yZWxldmFuY2VcclxuICAgICAgICAmJiBzY29yZUEucHJvID09IHNjb3JlQi5wcm9cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBpU2NvcmUge1xyXG4gICAgLyoqIFRoZSBjbGFpbSB0byB3aGljaCB0aGlzIHNjb3JlIGJlbG9uZ3MgKi9cclxuICAgIHNvdXJjZUNsYWltSWQ6IHN0cmluZyxcclxuICAgIC8qKiBUaGUgcGFyZW50IG9mIHRoaXMgc2NvcmUgaW4gdGhlIHNjb3JlIHRyZWUgZ3JhcGggKi9cclxuICAgIHBhcmVudFNjb3JlSWQ6IHN0cmluZyB8IHVuZGVmaW5lZCxcclxuICAgIHJldmVyc2libGU6IGJvb2xlYW4sXHJcbiAgICAvKiogSXMgdGhpcyBzY29yZSBhIHBybyBvZiBpdCdzIHBhcmVudCAoZmFsc2UgaWYgaXQgaXMgYSBjb24pICovXHJcbiAgICBwcm86IGJvb2xlYW4sXHJcbiAgICAvKiogaG93IGNvbmZpZGVudCB3ZSBzb3VsZCBiZSBpbiB0aGUgY2xhaW0uIChBS0EgVHJ1ZSkgKi9cclxuICAgIC8qKiBIb3cgdGhlIGNoaWxkIGFmZmVjdHMgdGhlIHBhcmVudCBzY29yZSAqL1xyXG4gICAgYWZmZWN0czogQWZmZWN0cyxcclxuICAgIC8qKiBob3cgY29uZmlkZW50IHdlIHNvdWxkIGJlIGluIHRoZSBjbGFpbS4gKEFLQSBUcnVlKSAqL1xyXG4gICAgY29uZmlkZW5jZTogbnVtYmVyLFxyXG4gICAgLyoqIEhvdyByZWxldmVudCB0aGlzIGNsYWltIGlzIHRvIGl0J3MgcGFyZW50IGNsYWltLiBSYW5nZXMgZnJvbSAwIHRvIGluZmluaXR5LlxyXG4gICAgICogQSBtdWx0aXBsaWVyIHNldCBieSBhbGwgdGhlIGNoaWxkIGVkZ2VzIHRoYXQgYWZmZWN0ICdyZWxldmFuY2UnKi9cclxuICAgIHJlbGV2YW5jZTogbnVtYmVyLFxyXG4gICAgaWQ6IHN0cmluZyxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBpU2NvcmVGcmFnbWVudCB7XHJcbiAgICByZXZlcnNpYmxlPzogYm9vbGVhbixcclxuICAgIC8qKiBJcyB0aGlzIHNjb3JlIGEgcHJvIG9mIGl0J3MgcGFyZW50IChmYWxzZSBpZiBpdCBpcyBhIGNvbikgKi9cclxuICAgIHBybz86IGJvb2xlYW4sXHJcbiAgICAvKiogaG93IGNvbmZpZGVudCB3ZSBzb3VsZCBiZSBpbiB0aGUgY2xhaW0uIChBS0EgVHJ1ZSkgKi9cclxuICAgIC8qKiBIb3cgdGhlIGNoaWxkIGFmZmVjdHMgdGhlIHBhcmVudCBzY29yZSAqL1xyXG4gICAgYWZmZWN0cz86IEFmZmVjdHMsXHJcbiAgICAvKiogaG93IGNvbmZpZGVudCB3ZSBzb3VsZCBiZSBpbiB0aGUgY2xhaW0uIChBS0EgVHJ1ZSkgKi9cclxuICAgIGNvbmZpZGVuY2U/OiBudW1iZXIsXHJcbiAgICAvKiogSG93IHJlbGV2ZW50IHRoaXMgY2xhaW0gaXMgdG8gaXQncyBwYXJlbnQgY2xhaW0uIFJhbmdlcyBmcm9tIDAgdG8gaW5maW5pdHkuXHJcbiAgICAgKiBBIG11bHRpcGxpZXIgc2V0IGJ5IGFsbCB0aGUgY2hpbGQgZWRnZXMgdGhhdCBhZmZlY3QgJ3JlbGV2YW5jZScqL1xyXG4gICAgcmVsZXZhbmNlPzogbnVtYmVyLFxyXG59Il19
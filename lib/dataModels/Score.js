"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.differentScores = differentScores;
exports.Score = void 0;

var _newId = require("../newId");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Stores the score for a claim. Just a data transfer object. Does not contain any logic.
 */
class Score {
  constructor(sourceClaimId, topScoreId, parentScoreId = undefined, sourceEdgeId = undefined, reversible = false, pro = true, affects = "confidence", confidence = 1, relevance = 1, id = (0, _newId.newId)(), priority = "") {
    this.sourceClaimId = sourceClaimId;
    this.topScoreId = topScoreId;
    this.parentScoreId = parentScoreId;
    this.sourceEdgeId = sourceEdgeId;
    this.reversible = reversible;
    this.pro = pro;
    this.affects = affects;
    this.confidence = confidence;
    this.relevance = relevance;
    this.id = id;
    this.priority = priority;

    _defineProperty(this, "type", 'score');
  }

}
/** Compare two scores to see if they are different in what the score is.
 *  Just compares confidence and relavance
 */


exports.Score = Score;

function differentScores(scoreA, scoreB) {
  return !(scoreA.confidence == scoreB.confidence && scoreA.relevance == scoreB.relevance && scoreA.pro == scoreB.pro && scoreA.priority == scoreB.priority);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhTW9kZWxzL1Njb3JlLnRzIl0sIm5hbWVzIjpbIlNjb3JlIiwiY29uc3RydWN0b3IiLCJzb3VyY2VDbGFpbUlkIiwidG9wU2NvcmVJZCIsInBhcmVudFNjb3JlSWQiLCJ1bmRlZmluZWQiLCJzb3VyY2VFZGdlSWQiLCJyZXZlcnNpYmxlIiwicHJvIiwiYWZmZWN0cyIsImNvbmZpZGVuY2UiLCJyZWxldmFuY2UiLCJpZCIsInByaW9yaXR5IiwiZGlmZmVyZW50U2NvcmVzIiwic2NvcmVBIiwic2NvcmVCIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBSUE7OztBQUdPLE1BQU1BLEtBQU4sQ0FBb0Q7QUFHdkRDLEVBQUFBLFdBQVcsQ0FFQUMsYUFGQSxFQUlBQyxVQUpBLEVBTUFDLGFBQWlDLEdBQUdDLFNBTnBDLEVBUUFDLFlBQWdDLEdBQUdELFNBUm5DLEVBVUFFLFVBQW1CLEdBQUcsS0FWdEIsRUFZQUMsR0FBWSxHQUFHLElBWmYsRUFlQUMsT0FBZ0IsR0FBRyxZQWZuQixFQWdCQUMsVUFBa0IsR0FBRyxDQWhCckIsRUFtQkFDLFNBQWlCLEdBQUcsQ0FuQnBCLEVBb0JBQyxFQUFVLEdBQUcsbUJBcEJiLEVBcUJBQyxRQUFnQixHQUFHLEVBckJuQixFQXNCVDtBQUFBLFNBcEJTWCxhQW9CVCxHQXBCU0EsYUFvQlQ7QUFBQSxTQWxCU0MsVUFrQlQsR0FsQlNBLFVBa0JUO0FBQUEsU0FoQlNDLGFBZ0JULEdBaEJTQSxhQWdCVDtBQUFBLFNBZFNFLFlBY1QsR0FkU0EsWUFjVDtBQUFBLFNBWlNDLFVBWVQsR0FaU0EsVUFZVDtBQUFBLFNBVlNDLEdBVVQsR0FWU0EsR0FVVDtBQUFBLFNBUFNDLE9BT1QsR0FQU0EsT0FPVDtBQUFBLFNBTlNDLFVBTVQsR0FOU0EsVUFNVDtBQUFBLFNBSFNDLFNBR1QsR0FIU0EsU0FHVDtBQUFBLFNBRlNDLEVBRVQsR0FGU0EsRUFFVDtBQUFBLFNBRFNDLFFBQ1QsR0FEU0EsUUFDVDs7QUFBQSxrQ0F4QmdCLE9Bd0JoQjtBQUNEOztBQTFCc0Q7QUE2QjNEOzs7Ozs7O0FBR08sU0FBU0MsZUFBVCxDQUF5QkMsTUFBekIsRUFBeUNDLE1BQXpDLEVBQXlEO0FBQzVELFNBQU8sRUFDSEQsTUFBTSxDQUFDTCxVQUFQLElBQXFCTSxNQUFNLENBQUNOLFVBQTVCLElBQ0dLLE1BQU0sQ0FBQ0osU0FBUCxJQUFvQkssTUFBTSxDQUFDTCxTQUQ5QixJQUVHSSxNQUFNLENBQUNQLEdBQVAsSUFBY1EsTUFBTSxDQUFDUixHQUZ4QixJQUdHTyxNQUFNLENBQUNGLFFBQVAsSUFBbUJHLE1BQU0sQ0FBQ0gsUUFKMUIsQ0FBUDtBQU1IIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmV3SWQgfSBmcm9tIFwiLi4vbmV3SWRcIjtcclxuaW1wb3J0IHsgQWZmZWN0cyB9IGZyb20gXCIuL0FmZmVjdHNcIjtcclxuaW1wb3J0IHsgSXRlbSB9IGZyb20gXCIuL0l0ZW1cIjtcclxuaW1wb3J0IHsgSXRlbVR5cGVzIH0gZnJvbSBcIi4uXCI7XHJcbi8qKlxyXG4gKiBTdG9yZXMgdGhlIHNjb3JlIGZvciBhIGNsYWltLiBKdXN0IGEgZGF0YSB0cmFuc2ZlciBvYmplY3QuIERvZXMgbm90IGNvbnRhaW4gYW55IGxvZ2ljLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNjb3JlIGltcGxlbWVudHMgaVNjb3JlLCBpU2NvcmVGcmFnbWVudCwgSXRlbSB7XHJcbiAgICB0eXBlOiBJdGVtVHlwZXMgPSAnc2NvcmUnXHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgLyoqIFRoZSBjbGFpbSB0byB3aGljaCB0aGlzIHNjb3JlIGJlbG9uZ3MgKi9cclxuICAgICAgICBwdWJsaWMgc291cmNlQ2xhaW1JZDogc3RyaW5nLFxyXG4gICAgICAgIC8qKiBUaGUgdG9wIG9mIHRoZSB0cmVlIG9mIHNjb3JlcyB0aGF0IHRoaXMgYmVsb25ncyB0by4gVXNlZCBmb3IgaW5kZXhpbmcgKi9cclxuICAgICAgICBwdWJsaWMgdG9wU2NvcmVJZDogc3RyaW5nLFxyXG4gICAgICAgIC8qKiBUaGUgcGFyZW50IG9mIHRoaXMgc2NvcmUgaW4gdGhlIHNjb3JlIHRyZWUgZ3JhcGggKi9cclxuICAgICAgICBwdWJsaWMgcGFyZW50U2NvcmVJZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxyXG4gICAgICAgIC8qKiBUaGUgRWRnZSB0byB3aGljaCB0aGlzIHNjb3JlIGJlbG9uZ3MgKi9cclxuICAgICAgICBwdWJsaWMgc291cmNlRWRnZUlkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsXHJcblxyXG4gICAgICAgIHB1YmxpYyByZXZlcnNpYmxlOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICAgICAgLyoqIElzIHRoaXMgc2NvcmUgYSBwcm8gb2YgaXQncyBwYXJlbnQgKGZhbHNlIGlmIGl0IGlzIGEgY29uKSAqL1xyXG4gICAgICAgIHB1YmxpYyBwcm86IGJvb2xlYW4gPSB0cnVlLFxyXG4gICAgICAgIC8qKiBob3cgY29uZmlkZW50IHdlIHNvdWxkIGJlIGluIHRoZSBjbGFpbS4gKEFLQSBUcnVlKSAqL1xyXG4gICAgICAgIC8qKiBIb3cgdGhlIGNoaWxkIGFmZmVjdHMgdGhlIHBhcmVudCBzY29yZSAqL1xyXG4gICAgICAgIHB1YmxpYyBhZmZlY3RzOiBBZmZlY3RzID0gXCJjb25maWRlbmNlXCIsXHJcbiAgICAgICAgcHVibGljIGNvbmZpZGVuY2U6IG51bWJlciA9IDEsXHJcbiAgICAgICAgLyoqIEhvdyByZWxldmVudCB0aGlzIGNsYWltIGlzIHRvIGl0J3MgcGFyZW50IGNsYWltLiBSYW5nZXMgZnJvbSAwIHRvIGluZmluaXR5LlxyXG4gICAgICAgICAqIEEgbXVsdGlwbGllciBzZXQgYnkgYWxsIHRoZSBjaGlsZCBlZGdlcyB0aGF0IGFmZmVjdCAncmVsZXZhbmNlJyovXHJcbiAgICAgICAgcHVibGljIHJlbGV2YW5jZTogbnVtYmVyID0gMSxcclxuICAgICAgICBwdWJsaWMgaWQ6IHN0cmluZyA9IG5ld0lkKCksXHJcbiAgICAgICAgcHVibGljIHByaW9yaXR5OiBzdHJpbmcgPSBcIlwiLFxyXG4gICAgKSB7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBDb21wYXJlIHR3byBzY29yZXMgdG8gc2VlIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBpbiB3aGF0IHRoZSBzY29yZSBpcy5cclxuICogIEp1c3QgY29tcGFyZXMgY29uZmlkZW5jZSBhbmQgcmVsYXZhbmNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW50U2NvcmVzKHNjb3JlQTogaVNjb3JlLCBzY29yZUI6IGlTY29yZSkge1xyXG4gICAgcmV0dXJuICEoXHJcbiAgICAgICAgc2NvcmVBLmNvbmZpZGVuY2UgPT0gc2NvcmVCLmNvbmZpZGVuY2VcclxuICAgICAgICAmJiBzY29yZUEucmVsZXZhbmNlID09IHNjb3JlQi5yZWxldmFuY2VcclxuICAgICAgICAmJiBzY29yZUEucHJvID09IHNjb3JlQi5wcm9cclxuICAgICAgICAmJiBzY29yZUEucHJpb3JpdHkgPT0gc2NvcmVCLnByaW9yaXR5XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgaVNjb3JlIHtcclxuICAgIC8qKiBUaGUgY2xhaW0gdG8gd2hpY2ggdGhpcyBzY29yZSBiZWxvbmdzICovXHJcbiAgICBzb3VyY2VDbGFpbUlkOiBzdHJpbmcsXHJcbiAgICAvKiogVGhlIEVkZ2UgdG8gd2hpY2ggdGhpcyBzY29yZSBiZWxvbmdzICovXHJcbiAgICBzb3VyY2VFZGdlSWQ/OiBzdHJpbmcsXHJcbiAgICAvKiogVGhlIHRvcCBvZiB0aGUgdHJlZSBvZiBzY29yZXMgdGhhdCB0aGlzIGJlbG9uZ3MgdG8uIFVzZWQgZm9yIGluZGV4aW5nICovXHJcbiAgICB0b3BTY29yZUlkOiBzdHJpbmcsXHJcbiAgICAvKiogVGhlIHBhcmVudCBvZiB0aGlzIHNjb3JlIGluIHRoZSBzY29yZSB0cmVlIGdyYXBoICovXHJcbiAgICBwYXJlbnRTY29yZUlkPzogc3RyaW5nLFxyXG4gICAgcmV2ZXJzaWJsZTogYm9vbGVhbixcclxuICAgIC8qKiBJcyB0aGlzIHNjb3JlIGEgcHJvIG9mIGl0J3MgcGFyZW50IChmYWxzZSBpZiBpdCBpcyBhIGNvbikgKi9cclxuICAgIHBybzogYm9vbGVhbixcclxuICAgIC8qKiBob3cgY29uZmlkZW50IHdlIHNvdWxkIGJlIGluIHRoZSBjbGFpbS4gKEFLQSBUcnVlKSAqL1xyXG4gICAgLyoqIEhvdyB0aGUgY2hpbGQgYWZmZWN0cyB0aGUgcGFyZW50IHNjb3JlICovXHJcbiAgICBhZmZlY3RzOiBBZmZlY3RzLFxyXG4gICAgLyoqIGhvdyBjb25maWRlbnQgd2Ugc291bGQgYmUgaW4gdGhlIGNsYWltLiAoQUtBIFRydWUpICovXHJcbiAgICBjb25maWRlbmNlOiBudW1iZXIsXHJcbiAgICAvKiogSG93IHJlbGV2ZW50IHRoaXMgY2xhaW0gaXMgdG8gaXQncyBwYXJlbnQgY2xhaW0uIFJhbmdlcyBmcm9tIDAgdG8gaW5maW5pdHkuXHJcbiAgICAgKiBBIG11bHRpcGxpZXIgc2V0IGJ5IGFsbCB0aGUgY2hpbGQgZWRnZXMgdGhhdCBhZmZlY3QgJ3JlbGV2YW5jZScqL1xyXG4gICAgcmVsZXZhbmNlOiBudW1iZXIsXHJcbiAgICBpZDogc3RyaW5nLFxyXG4gICAgdHlwZTogSXRlbVR5cGVzLFxyXG4gICAgcHJpb3JpdHk6IHN0cmluZyxcclxuXHJcbiAgICAvKiogYWxsb3cgZm9yIG90aGVyIHByb3BlcnRpZXMgYnkgZXh0ZXJuYWwgaW1wbGVtZW50YXRpb25zICovXHJcbiAgICBbb3RoZXJzOiBzdHJpbmddOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgaVNjb3JlRnJhZ21lbnQge1xyXG4gICAgcmV2ZXJzaWJsZT86IGJvb2xlYW4sXHJcbiAgICAvKiogSXMgdGhpcyBzY29yZSBhIHBybyBvZiBpdCdzIHBhcmVudCAoZmFsc2UgaWYgaXQgaXMgYSBjb24pICovXHJcbiAgICBwcm8/OiBib29sZWFuLFxyXG4gICAgLyoqIEhvdyB0aGUgY2hpbGQgYWZmZWN0cyB0aGUgcGFyZW50IHNjb3JlICovXHJcbiAgICBhZmZlY3RzPzogQWZmZWN0cyxcclxuICAgIC8qKiBob3cgY29uZmlkZW50IHdlIHNvdWxkIGJlIGluIHRoZSBjbGFpbS4gKEFLQSBUcnVlKSAqL1xyXG4gICAgY29uZmlkZW5jZT86IG51bWJlcixcclxuICAgIC8qKiBIb3cgcmVsZXZlbnQgdGhpcyBjbGFpbSBpcyB0byBpdCdzIHBhcmVudCBjbGFpbS4gUmFuZ2VzIGZyb20gMCB0byBpbmZpbml0eS5cclxuICAgICAqIEEgbXVsdGlwbGllciBzZXQgYnkgYWxsIHRoZSBjaGlsZCBlZGdlcyB0aGF0IGFmZmVjdCAncmVsZXZhbmNlJyovXHJcbiAgICByZWxldmFuY2U/OiBudW1iZXIsXHJcbiAgICBwcmlvcml0eT86IHN0cmluZyxcclxuXHJcbiAgICAvKiogYWxsb3cgZm9yIG90aGVyIHByb3BlcnRpZXMgYnkgZXh0ZXJuYWwgaW1wbGVtZW50YXRpb25zICovXHJcbiAgICBbb3RoZXJzOiBzdHJpbmddOiBhbnk7XHJcbn0iXX0=
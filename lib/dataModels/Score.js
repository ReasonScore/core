"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.differentScores = differentScores;
exports.Score = void 0;

var _newId = require("../newId");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Stores the score for a claim. Just a data transfer object. Does not contain any logic.
 */
class Score {
  constructor(sourceClaimId, scoreTreeId, parentScoreId = undefined, sourceEdgeId = undefined, reversible = false, pro = true, affects = "confidence", confidence = 1, relevance = 1, id = (0, _newId.newId)(), priority = "", content = "") {
    this.sourceClaimId = sourceClaimId;
    this.scoreTreeId = scoreTreeId;
    this.parentScoreId = parentScoreId;
    this.sourceEdgeId = sourceEdgeId;
    this.reversible = reversible;
    this.pro = pro;
    this.affects = affects;
    this.confidence = confidence;
    this.relevance = relevance;
    this.id = id;
    this.priority = priority;
    this.content = content;

    _defineProperty(this, "type", 'score');
  }

}
/** Compare two scores to see if they are different in what the score is.
 *  Just compares confidence and relavance
 */


exports.Score = Score;

function differentScores(scoreA, scoreB) {
  return !(scoreA.confidence == scoreB.confidence && scoreA.relevance == scoreB.relevance && scoreA.pro == scoreB.pro && scoreA.priority == scoreB.priority);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhTW9kZWxzL1Njb3JlLnRzIl0sIm5hbWVzIjpbIlNjb3JlIiwiY29uc3RydWN0b3IiLCJzb3VyY2VDbGFpbUlkIiwic2NvcmVUcmVlSWQiLCJwYXJlbnRTY29yZUlkIiwidW5kZWZpbmVkIiwic291cmNlRWRnZUlkIiwicmV2ZXJzaWJsZSIsInBybyIsImFmZmVjdHMiLCJjb25maWRlbmNlIiwicmVsZXZhbmNlIiwiaWQiLCJwcmlvcml0eSIsImNvbnRlbnQiLCJkaWZmZXJlbnRTY29yZXMiLCJzY29yZUEiLCJzY29yZUIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFJQTs7O0FBR08sTUFBTUEsS0FBTixDQUFvRDtBQUd2REMsRUFBQUEsV0FBVyxDQUVBQyxhQUZBLEVBSUFDLFdBSkEsRUFNQUMsYUFBaUMsR0FBR0MsU0FOcEMsRUFRQUMsWUFBZ0MsR0FBR0QsU0FSbkMsRUFVQUUsVUFBbUIsR0FBRyxLQVZ0QixFQVlBQyxHQUFZLEdBQUcsSUFaZixFQWVBQyxPQUFnQixHQUFHLFlBZm5CLEVBZ0JBQyxVQUFrQixHQUFHLENBaEJyQixFQW1CQUMsU0FBaUIsR0FBRyxDQW5CcEIsRUFvQkFDLEVBQVUsR0FBRyxtQkFwQmIsRUFxQkFDLFFBQWdCLEdBQUcsRUFyQm5CLEVBc0JBQyxPQUFlLEdBQUcsRUF0QmxCLEVBdUJUO0FBQUEsU0FyQlNaLGFBcUJULEdBckJTQSxhQXFCVDtBQUFBLFNBbkJTQyxXQW1CVCxHQW5CU0EsV0FtQlQ7QUFBQSxTQWpCU0MsYUFpQlQsR0FqQlNBLGFBaUJUO0FBQUEsU0FmU0UsWUFlVCxHQWZTQSxZQWVUO0FBQUEsU0FiU0MsVUFhVCxHQWJTQSxVQWFUO0FBQUEsU0FYU0MsR0FXVCxHQVhTQSxHQVdUO0FBQUEsU0FSU0MsT0FRVCxHQVJTQSxPQVFUO0FBQUEsU0FQU0MsVUFPVCxHQVBTQSxVQU9UO0FBQUEsU0FKU0MsU0FJVCxHQUpTQSxTQUlUO0FBQUEsU0FIU0MsRUFHVCxHQUhTQSxFQUdUO0FBQUEsU0FGU0MsUUFFVCxHQUZTQSxRQUVUO0FBQUEsU0FEU0MsT0FDVCxHQURTQSxPQUNUOztBQUFBLGtDQXpCZ0IsT0F5QmhCO0FBQ0Q7O0FBM0JzRDtBQThCM0Q7Ozs7Ozs7QUFHTyxTQUFTQyxlQUFULENBQXlCQyxNQUF6QixFQUF5Q0MsTUFBekMsRUFBeUQ7QUFDNUQsU0FBTyxFQUNIRCxNQUFNLENBQUNOLFVBQVAsSUFBcUJPLE1BQU0sQ0FBQ1AsVUFBNUIsSUFDR00sTUFBTSxDQUFDTCxTQUFQLElBQW9CTSxNQUFNLENBQUNOLFNBRDlCLElBRUdLLE1BQU0sQ0FBQ1IsR0FBUCxJQUFjUyxNQUFNLENBQUNULEdBRnhCLElBR0dRLE1BQU0sQ0FBQ0gsUUFBUCxJQUFtQkksTUFBTSxDQUFDSixRQUoxQixDQUFQO0FBTUgiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJZCB9IGZyb20gXCIuLi9uZXdJZFwiO1xyXG5pbXBvcnQgeyBBZmZlY3RzIH0gZnJvbSBcIi4vQWZmZWN0c1wiO1xyXG5pbXBvcnQgeyBJdGVtIH0gZnJvbSBcIi4vSXRlbVwiO1xyXG5pbXBvcnQgeyBJdGVtVHlwZXMgfSBmcm9tIFwiLi5cIjtcclxuLyoqXHJcbiAqIFN0b3JlcyB0aGUgc2NvcmUgZm9yIGEgY2xhaW0uIEp1c3QgYSBkYXRhIHRyYW5zZmVyIG9iamVjdC4gRG9lcyBub3QgY29udGFpbiBhbnkgbG9naWMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2NvcmUgaW1wbGVtZW50cyBpU2NvcmUsIGlTY29yZUZyYWdtZW50LCBJdGVtIHtcclxuICAgIHR5cGU6IEl0ZW1UeXBlcyA9ICdzY29yZSdcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAvKiogVGhlIGNsYWltIHRvIHdoaWNoIHRoaXMgc2NvcmUgYmVsb25ncyAqL1xyXG4gICAgICAgIHB1YmxpYyBzb3VyY2VDbGFpbUlkOiBzdHJpbmcsXHJcbiAgICAgICAgLyoqIFRoZSB0b3Agb2YgdGhlIHRyZWUgb2Ygc2NvcmVzIHRoYXQgdGhpcyBiZWxvbmdzIHRvLiBVc2VkIGZvciBpbmRleGluZyAqL1xyXG4gICAgICAgIHB1YmxpYyBzY29yZVRyZWVJZDogc3RyaW5nLFxyXG4gICAgICAgIC8qKiBUaGUgcGFyZW50IG9mIHRoaXMgc2NvcmUgaW4gdGhlIHNjb3JlIHRyZWUgZ3JhcGggKi9cclxuICAgICAgICBwdWJsaWMgcGFyZW50U2NvcmVJZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxyXG4gICAgICAgIC8qKiBUaGUgRWRnZSB0byB3aGljaCB0aGlzIHNjb3JlIGJlbG9uZ3MgKi9cclxuICAgICAgICBwdWJsaWMgc291cmNlRWRnZUlkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsXHJcblxyXG4gICAgICAgIHB1YmxpYyByZXZlcnNpYmxlOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICAgICAgLyoqIElzIHRoaXMgc2NvcmUgYSBwcm8gb2YgaXQncyBwYXJlbnQgKGZhbHNlIGlmIGl0IGlzIGEgY29uKSAqL1xyXG4gICAgICAgIHB1YmxpYyBwcm86IGJvb2xlYW4gPSB0cnVlLFxyXG4gICAgICAgIC8qKiBob3cgY29uZmlkZW50IHdlIHNvdWxkIGJlIGluIHRoZSBjbGFpbS4gKEFLQSBUcnVlKSAqL1xyXG4gICAgICAgIC8qKiBIb3cgdGhlIGNoaWxkIGFmZmVjdHMgdGhlIHBhcmVudCBzY29yZSAqL1xyXG4gICAgICAgIHB1YmxpYyBhZmZlY3RzOiBBZmZlY3RzID0gXCJjb25maWRlbmNlXCIsXHJcbiAgICAgICAgcHVibGljIGNvbmZpZGVuY2U6IG51bWJlciA9IDEsXHJcbiAgICAgICAgLyoqIEhvdyByZWxldmVudCB0aGlzIGNsYWltIGlzIHRvIGl0J3MgcGFyZW50IGNsYWltLiBSYW5nZXMgZnJvbSAwIHRvIGluZmluaXR5LlxyXG4gICAgICAgICAqIEEgbXVsdGlwbGllciBzZXQgYnkgYWxsIHRoZSBjaGlsZCBlZGdlcyB0aGF0IGFmZmVjdCAncmVsZXZhbmNlJyovXHJcbiAgICAgICAgcHVibGljIHJlbGV2YW5jZTogbnVtYmVyID0gMSxcclxuICAgICAgICBwdWJsaWMgaWQ6IHN0cmluZyA9IG5ld0lkKCksXHJcbiAgICAgICAgcHVibGljIHByaW9yaXR5OiBzdHJpbmcgPSBcIlwiLFxyXG4gICAgICAgIHB1YmxpYyBjb250ZW50OiBzdHJpbmcgPSBcIlwiLFxyXG4gICAgKSB7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBDb21wYXJlIHR3byBzY29yZXMgdG8gc2VlIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBpbiB3aGF0IHRoZSBzY29yZSBpcy5cclxuICogIEp1c3QgY29tcGFyZXMgY29uZmlkZW5jZSBhbmQgcmVsYXZhbmNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW50U2NvcmVzKHNjb3JlQTogaVNjb3JlLCBzY29yZUI6IGlTY29yZSkge1xyXG4gICAgcmV0dXJuICEoXHJcbiAgICAgICAgc2NvcmVBLmNvbmZpZGVuY2UgPT0gc2NvcmVCLmNvbmZpZGVuY2VcclxuICAgICAgICAmJiBzY29yZUEucmVsZXZhbmNlID09IHNjb3JlQi5yZWxldmFuY2VcclxuICAgICAgICAmJiBzY29yZUEucHJvID09IHNjb3JlQi5wcm9cclxuICAgICAgICAmJiBzY29yZUEucHJpb3JpdHkgPT0gc2NvcmVCLnByaW9yaXR5XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgaVNjb3JlIHtcclxuICAgIC8qKiBUaGUgY2xhaW0gdG8gd2hpY2ggdGhpcyBzY29yZSBiZWxvbmdzICovXHJcbiAgICBzb3VyY2VDbGFpbUlkOiBzdHJpbmcsXHJcbiAgICAvKiogVGhlIEVkZ2UgdG8gd2hpY2ggdGhpcyBzY29yZSBiZWxvbmdzICovXHJcbiAgICBzb3VyY2VFZGdlSWQ/OiBzdHJpbmcsXHJcbiAgICAvKiogVGhlIHRvcCBvZiB0aGUgdHJlZSBvZiBzY29yZXMgdGhhdCB0aGlzIGJlbG9uZ3MgdG8uIFVzZWQgZm9yIGluZGV4aW5nICovXHJcbiAgICBzY29yZVRyZWVJZDogc3RyaW5nLFxyXG4gICAgLyoqIFRoZSBwYXJlbnQgb2YgdGhpcyBzY29yZSBpbiB0aGUgc2NvcmUgdHJlZSBncmFwaCAqL1xyXG4gICAgcGFyZW50U2NvcmVJZD86IHN0cmluZyxcclxuICAgIHJldmVyc2libGU6IGJvb2xlYW4sXHJcbiAgICAvKiogSXMgdGhpcyBzY29yZSBhIHBybyBvZiBpdCdzIHBhcmVudCAoZmFsc2UgaWYgaXQgaXMgYSBjb24pICovXHJcbiAgICBwcm86IGJvb2xlYW4sXHJcbiAgICAvKiogaG93IGNvbmZpZGVudCB3ZSBzb3VsZCBiZSBpbiB0aGUgY2xhaW0uIChBS0EgVHJ1ZSkgKi9cclxuICAgIC8qKiBIb3cgdGhlIGNoaWxkIGFmZmVjdHMgdGhlIHBhcmVudCBzY29yZSAqL1xyXG4gICAgYWZmZWN0czogQWZmZWN0cyxcclxuICAgIC8qKiBob3cgY29uZmlkZW50IHdlIHNvdWxkIGJlIGluIHRoZSBjbGFpbS4gKEFLQSBUcnVlKSAqL1xyXG4gICAgY29uZmlkZW5jZTogbnVtYmVyLFxyXG4gICAgLyoqIEhvdyByZWxldmVudCB0aGlzIGNsYWltIGlzIHRvIGl0J3MgcGFyZW50IGNsYWltLiBSYW5nZXMgZnJvbSAwIHRvIGluZmluaXR5LlxyXG4gICAgICogQSBtdWx0aXBsaWVyIHNldCBieSBhbGwgdGhlIGNoaWxkIGVkZ2VzIHRoYXQgYWZmZWN0ICdyZWxldmFuY2UnKi9cclxuICAgIHJlbGV2YW5jZTogbnVtYmVyLFxyXG4gICAgaWQ6IHN0cmluZyxcclxuICAgIHR5cGU6IEl0ZW1UeXBlcyxcclxuICAgIHByaW9yaXR5OiBzdHJpbmcsXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcblxyXG4gICAgLyoqIGFsbG93IGZvciBvdGhlciBwcm9wZXJ0aWVzIGJ5IGV4dGVybmFsIGltcGxlbWVudGF0aW9ucyAqL1xyXG4gICAgW290aGVyczogc3RyaW5nXTogYW55O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIGlTY29yZUZyYWdtZW50IHtcclxuICAgIHJldmVyc2libGU/OiBib29sZWFuLFxyXG4gICAgLyoqIElzIHRoaXMgc2NvcmUgYSBwcm8gb2YgaXQncyBwYXJlbnQgKGZhbHNlIGlmIGl0IGlzIGEgY29uKSAqL1xyXG4gICAgcHJvPzogYm9vbGVhbixcclxuICAgIC8qKiBIb3cgdGhlIGNoaWxkIGFmZmVjdHMgdGhlIHBhcmVudCBzY29yZSAqL1xyXG4gICAgYWZmZWN0cz86IEFmZmVjdHMsXHJcbiAgICAvKiogaG93IGNvbmZpZGVudCB3ZSBzb3VsZCBiZSBpbiB0aGUgY2xhaW0uIChBS0EgVHJ1ZSkgKi9cclxuICAgIGNvbmZpZGVuY2U/OiBudW1iZXIsXHJcbiAgICAvKiogSG93IHJlbGV2ZW50IHRoaXMgY2xhaW0gaXMgdG8gaXQncyBwYXJlbnQgY2xhaW0uIFJhbmdlcyBmcm9tIDAgdG8gaW5maW5pdHkuXHJcbiAgICAgKiBBIG11bHRpcGxpZXIgc2V0IGJ5IGFsbCB0aGUgY2hpbGQgZWRnZXMgdGhhdCBhZmZlY3QgJ3JlbGV2YW5jZScqL1xyXG4gICAgcmVsZXZhbmNlPzogbnVtYmVyLFxyXG4gICAgcHJpb3JpdHk/OiBzdHJpbmcsXHJcblxyXG4gICAgLyoqIGFsbG93IGZvciBvdGhlciBwcm9wZXJ0aWVzIGJ5IGV4dGVybmFsIGltcGxlbWVudGF0aW9ucyAqL1xyXG4gICAgW290aGVyczogc3RyaW5nXTogYW55O1xyXG59Il19
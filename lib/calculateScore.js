"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScore = calculateScore;

/**
 * Calculates a new score based on the child scores passed in.
 */
function calculateScore({
  childScores = [],
  reversible = true
} = {}) {
  // TODO: Simplify all this math and maybe break it up between base functionality and additional scoring (like the points)
  const newScore = {
    confidence: 0,
    relevance: 1,
    childrenAveragingWeight: 0,
    childrenConfidenceWeight: 0,
    childrenRelevanceWeight: 0,
    childrenWeight: 0,
    childrenPointsPro: 0,
    childrenPointsCon: 0
  };

  if (childScores.filter(s => s.affects === 'confidence').length < 1) {
    // Defaults if there are no children
    newScore.confidence = 1; // assume 100% confident

    newScore.relevance = 1; // assume 100% relevant

    newScore.childrenAveragingWeight = 1;
    newScore.childrenConfidenceWeight = 1;
    newScore.childrenRelevanceWeight = 1;
    newScore.childrenWeight = 1;
    newScore.childrenPointsPro = 1;
    newScore.childrenPointsCon = 0;
  } //Gather children Weights totals for processing further down


  for (const childScore of childScores) {
    //Ensure calculations for non-reversible scores don't allow the confidence to be below 0
    //TODO: Is this needed in the totals seciton?
    let confidence = childScore.confidence;

    if (!childScore.reversible && childScore.confidence < 0) {
      confidence = 0;
    }

    childScore.weight = Math.abs(confidence) * childScore.relevance; // confidenceWeight * RelevanceWeight
    // @ts-ignore

    newScore.childrenAveragingWeight += 1; // @ts-ignore

    newScore.childrenConfidenceWeight += Math.abs(confidence); // @ts-ignore

    newScore.childrenRelevanceWeight += childScore.relevance; // @ts-ignore

    newScore.childrenWeight += childScore.weight;
  } // Loop through to calculate the final scores


  for (const childScore of childScores) {
    const polarity = childScore.pro ? 1 : -1;

    if (childScore.affects === "confidence") {
      if (newScore.childrenWeight === 0) {
        childScore.percentOfWeight = 0;
        newScore.confidence = 0;
      } else {
        // @ts-ignore
        childScore.percentOfWeight = childScore.weight / // @ts-ignore
        newScore.childrenWeight; // @ts-ignore

        newScore.confidence += childScore.percentOfWeight * childScore.confidence * polarity;

        if (childScore.pro) {
          childScore.pointsPro = childScore.childrenPointsPro * childScore.percentOfWeight;
          childScore.pointsCon = childScore.childrenPointsCon * childScore.percentOfWeight;
        } else {
          childScore.pointsPro = childScore.childrenPointsCon * childScore.percentOfWeight;
          childScore.pointsCon = childScore.childrenPointsPro * childScore.percentOfWeight;
        } // @ts-ignore


        newScore.childrenPointsPro += childScore.pointsPro; // @ts-ignore

        newScore.childrenPointsCon += childScore.pointsCon;
      }
    }

    if (childScore.affects === "relevance") {
      // Process Relevance child claims
      let confidence = childScore.confidence;

      if (!childScore.reversible && childScore.confidence < 0) {
        confidence = 0;
      }

      if (newScore.relevance == undefined) {
        newScore.relevance = 1;
      }

      if (childScore.pro) {
        newScore.relevance += confidence;
      } else {
        newScore.relevance -= confidence / 2;
      }
    }
  }

  if (Object.is(newScore.confidence, -0)) {
    // Protect against negative zero 
    newScore.confidence = 0;
  }

  return newScore;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWxjdWxhdGVTY29yZS50cyJdLCJuYW1lcyI6WyJjYWxjdWxhdGVTY29yZSIsImNoaWxkU2NvcmVzIiwicmV2ZXJzaWJsZSIsIm5ld1Njb3JlIiwiY29uZmlkZW5jZSIsInJlbGV2YW5jZSIsImNoaWxkcmVuQXZlcmFnaW5nV2VpZ2h0IiwiY2hpbGRyZW5Db25maWRlbmNlV2VpZ2h0IiwiY2hpbGRyZW5SZWxldmFuY2VXZWlnaHQiLCJjaGlsZHJlbldlaWdodCIsImNoaWxkcmVuUG9pbnRzUHJvIiwiY2hpbGRyZW5Qb2ludHNDb24iLCJmaWx0ZXIiLCJzIiwiYWZmZWN0cyIsImxlbmd0aCIsImNoaWxkU2NvcmUiLCJ3ZWlnaHQiLCJNYXRoIiwiYWJzIiwicG9sYXJpdHkiLCJwcm8iLCJwZXJjZW50T2ZXZWlnaHQiLCJwb2ludHNQcm8iLCJwb2ludHNDb24iLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJpcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVNBOzs7QUFHTyxTQUFTQSxjQUFULENBQXdCO0FBQUVDLEVBQUFBLFdBQVcsR0FBRyxFQUFoQjtBQUFvQkMsRUFBQUEsVUFBVSxHQUFHO0FBQWpDLElBSzNCLEVBTEcsRUFNVztBQUNkO0FBQ0EsUUFBTUMsUUFBd0IsR0FBRztBQUM3QkMsSUFBQUEsVUFBVSxFQUFFLENBRGlCO0FBRTdCQyxJQUFBQSxTQUFTLEVBQUUsQ0FGa0I7QUFHN0JDLElBQUFBLHVCQUF1QixFQUFFLENBSEk7QUFJN0JDLElBQUFBLHdCQUF3QixFQUFFLENBSkc7QUFLN0JDLElBQUFBLHVCQUF1QixFQUFFLENBTEk7QUFNN0JDLElBQUFBLGNBQWMsRUFBRSxDQU5hO0FBTzdCQyxJQUFBQSxpQkFBaUIsRUFBRSxDQVBVO0FBUTdCQyxJQUFBQSxpQkFBaUIsRUFBRTtBQVJVLEdBQWpDOztBQVdBLE1BQUlWLFdBQVcsQ0FBQ1csTUFBWixDQUFtQkMsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLE9BQUYsS0FBYyxZQUF0QyxFQUFvREMs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QUNNLGVBQWpFO0FBQ0gsU0FuQkUsQ0FxQkg7OztBQUNBbkIsUUFBQUEsUUFBUSxDQUFDTyxpQkFBVCxJQUNJTSxVQUFVLENBQUNPLFNBRGYsQ0F0QkcsQ0F3Qkg7O0FBQ0FwQixRQUFBQSxRQUFRLENBQUNRLGlCQUFULElBQ0lLLFVBQVUsQ0FBQ1EsU0FEZjtBQUVIO0FBQ0o7O0FBRUQsUUFBSVIsVUFBVSxDQUFDRixPQUFYLEtBQXVCLFdBQTNCLEVBQXdDO0FBQ3BDO0FBRUEsVUFBSVYsVUFBVSxHQUFHWSxVQUFVLENBQUNaLFVBQTVCOztBQUNBLFVBQUksQ0FBQ1ksVUFBVSxDQUFDZCxVQUFaLElBQTBCYyxVQUFVLENBQUNaLFVBQVgsR0FBd0IsQ0FBdEQsRUFBeUQ7QUFDckRBLFFBQUFBLFVBQVUsR0FBRyxDQUFiO0FBQ0g7O0FBRUQsVUFBSUQsUUFBUSxDQUFDRSxTQUFULElBQXNCb0IsU0FBMUIsRUFBcUM7QUFDakN0QixRQUFBQSxRQUFRLENBQUNFLFNBQVQsR0FBcUIsQ0FBckI7QUFDSDs7QUFFRCxVQUFJVyxVQUFVLENBQUNLLEdBQWYsRUFBb0I7QUFDaEJsQixRQUFBQSxRQUFRLENBQUNFLFNBQVQsSUFBc0JELFVBQXRCO0FBQ0gsT0FGRCxNQUVPO0FBQ0hELFFBQUFBLFFBQVEsQ0FBQ0UsU0FBVCxJQUFzQkQsVUFBVSxHQUFHLENBQW5DO0FBQ0g7QUFDSjtBQUNKOztBQUdELE1BQUlzQixNQUFNLENBQUNDLEVBQVAsQ0FBVXhCLFFBQVEsQ0FBQ0MsVUFBbkIsRUFBK0IsQ0FBQyxDQUFoQyxDQUFKLEVBQXdDO0FBQ3BDO0FBQ0FELElBQUFBLFFBQVEsQ0FBQ0MsVUFBVCxHQUFzQixDQUF0QjtBQUNIOztBQUVELFNBQU9ELFFBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjb3JlfSBmcm9tIFwiLi9kYXRhTW9kZWxzL1Njb3JlXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIGlDYWxjdWxhdGVTY29yZSB7XHJcbiAgICAoeyBjaGlsZFNjb3JlcyB9OiB7XHJcbiAgICAgICAgLyoqIEFuIGFycmF5IG9mIGdyb3VwZWQgZWRnZXMgYW5kIGNsYWltcyovXHJcbiAgICAgICAgY2hpbGRTY29yZXM/OiBTY29yZVtdO1xyXG4gICAgfSk6IFBhcnRpYWw8U2NvcmU+XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGEgbmV3IHNjb3JlIGJhc2VkIG9uIHRoZSBjaGlsZCBzY29yZXMgcGFzc2VkIGluLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVNjb3JlKHsgY2hpbGRTY29yZXMgPSBbXSwgcmV2ZXJzaWJsZSA9IHRydWUgfToge1xyXG4gICAgLyoqIEFuIGFycmF5IG9mIGdyb3VwZWQgZWRnZXMgYW5kIGNsYWltcyovXHJcbiAgICBjaGlsZFNjb3Jlcz86IFNjb3JlW107XHJcbiAgICAvKiogQ2FuIHRoaXMgc2NvcmUgZmFsbCBiZWxvdyBhIDAgY29uZmlkZW5jZSAoaGF2ZSBhIG5lZ2F0aXZlIGNvbmZpZGVuY2UpICovXHJcbiAgICByZXZlcnNpYmxlPzogYm9vbGVhblxyXG59ID0ge30sXHJcbik6IFBhcnRpYWw8U2NvcmU+IHtcclxuICAgIC8vIFRPRE86IFNpbXBsaWZ5IGFsbCB0aGlzIG1hdGggYW5kIG1heWJlIGJyZWFrIGl0IHVwIGJldHdlZW4gYmFzZSBmdW5jdGlvbmFsaXR5IGFuZCBhZGRpdGlvbmFsIHNjb3JpbmcgKGxpa2UgdGhlIHBvaW50cylcclxuICAgIGNvbnN0IG5ld1Njb3JlOiBQYXJ0aWFsPFNjb3JlPiA9IHtcclxuICAgICAgICBjb25maWRlbmNlOiAwLFxyXG4gICAgICAgIHJlbGV2YW5jZTogMSxcclxuICAgICAgICBjaGlsZHJlbkF2ZXJhZ2luZ1dlaWdodDogMCxcclxuICAgICAgICBjaGlsZHJlbkNvbmZpZGVuY2VXZWlnaHQ6IDAsXHJcbiAgICAgICAgY2hpbGRyZW5SZWxldmFuY2VXZWlnaHQ6IDAsXHJcbiAgICAgICAgY2hpbGRyZW5XZWlnaHQ6IDAsXHJcbiAgICAgICAgY2hpbGRyZW5Qb2ludHNQcm86IDAsXHJcbiAgICAgICAgY2hpbGRyZW5Qb2ludHNDb246IDAsXHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChjaGlsZFNjb3Jlcy5maWx0ZXIocyA9PiBzLmFmZmVjdHMgPT09ICdjb25maWRlbmNlJykubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgIC8vIERlZmF1bHRzIGlmIHRoZXJlIGFyZSBubyBjaGlsZHJlblxyXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAxOyAvLyBhc3N1bWUgMTAwJSBjb25maWRlbnRcclxuICAgICAgICBuZXdTY29yZS5yZWxldmFuY2UgPSAxOyAvLyBhc3N1bWUgMTAwJSByZWxldmFudFxyXG4gICAgICAgIG5ld1Njb3JlLmNoaWxkcmVuQXZlcmFnaW5nV2VpZ2h0ID0gMTtcclxuICAgICAgICBuZXdTY29yZS5jaGlsZHJlbkNvbmZpZGVuY2VXZWlnaHQgPSAxO1xyXG4gICAgICAgIG5ld1Njb3JlLmNoaWxkcmVuUmVsZXZhbmNlV2VpZ2h0ID0gMTtcclxuICAgICAgICBuZXdTY29yZS5jaGlsZHJlbldlaWdodCA9IDE7XHJcbiAgICAgICAgbmV3U2NvcmUuY2hpbGRyZW5Qb2ludHNQcm8gPSAxO1xyXG4gICAgICAgIG5ld1Njb3JlLmNoaWxkcmVuUG9pbnRzQ29uID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvL0dhdGhlciBjaGlsZHJlbiBXZWlnaHRzIHRvdGFscyBmb3IgcHJvY2Vzc2luZyBmdXJ0aGVyIGRvd25cclxuICAgIGZvciAoY29uc3QgY2hpbGRTY29yZSBvZiBjaGlsZFNjb3Jlcykge1xyXG4gICAgICAgIC8vRW5zdXJlIGNhbGN1bGF0aW9ucyBmb3Igbm9uLXJldmVyc2libGUgc2NvcmVzIGRvbid0IGFsbG93IHRoZSBjb25maWRlbmNlIHRvIGJlIGJlbG93IDBcclxuICAgICAgICAvL1RPRE86IElzIHRoaXMgbmVlZGVkIGluIHRoZSB0b3RhbHMgc2VjaXRvbj9cclxuICAgICAgICBsZXQgY29uZmlkZW5jZSA9IGNoaWxkU2NvcmUuY29uZmlkZW5jZVxyXG4gICAgICAgIGlmICghY2hpbGRTY29yZS5yZXZlcnNpYmxlICYmIGNoaWxkU2NvcmUuY29uZmlkZW5jZSA8IDApIHtcclxuICAgICAgICAgICAgY29uZmlkZW5jZSA9IDBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNoaWxkU2NvcmUud2VpZ2h0ID0gTWF0aC5hYnMoY29uZmlkZW5jZSkgKiBjaGlsZFNjb3JlLnJlbGV2YW5jZTsgLy8gY29uZmlkZW5jZVdlaWdodCAqIFJlbGV2YW5jZVdlaWdodFxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBuZXdTY29yZS5jaGlsZHJlbkF2ZXJhZ2luZ1dlaWdodCArPSAxO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBuZXdTY29yZS5jaGlsZHJlbkNvbmZpZGVuY2VXZWlnaHQgKz1cclxuICAgICAgICAgICAgTWF0aC5hYnMoY29uZmlkZW5jZSk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIG5ld1Njb3JlLmNoaWxkcmVuUmVsZXZhbmNlV2VpZ2h0ICs9XHJcbiAgICAgICAgICAgIGNoaWxkU2NvcmUucmVsZXZhbmNlO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBuZXdTY29yZS5jaGlsZHJlbldlaWdodCArPVxyXG4gICAgICAgICAgICBjaGlsZFNjb3JlLndlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBMb29wIHRocm91Z2ggdG8gY2FsY3VsYXRlIHRoZSBmaW5hbCBzY29yZXNcclxuICAgIGZvciAoY29uc3QgY2hpbGRTY29yZSBvZiBjaGlsZFNjb3Jlcykge1xyXG4gICAgICAgIGNvbnN0IHBvbGFyaXR5ID0gY2hpbGRTY29yZS5wcm8gPyAxIDogLTFcclxuXHJcbiAgICAgICAgaWYgKGNoaWxkU2NvcmUuYWZmZWN0cyA9PT0gXCJjb25maWRlbmNlXCIpIHtcclxuICAgICAgICAgICAgaWYgKG5ld1Njb3JlLmNoaWxkcmVuV2VpZ2h0ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZFNjb3JlLnBlcmNlbnRPZldlaWdodCA9IDA7XHJcbiAgICAgICAgICAgICAgICBuZXdTY29yZS5jb25maWRlbmNlID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBjaGlsZFNjb3JlLnBlcmNlbnRPZldlaWdodCA9XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRTY29yZS53ZWlnaHQgL1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBuZXdTY29yZS5jaGlsZHJlbldlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBuZXdTY29yZS5jb25maWRlbmNlICs9XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRTY29yZS5wZXJjZW50T2ZXZWlnaHQgKlxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkU2NvcmUuY29uZmlkZW5jZSAqIHBvbGFyaXR5O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZFNjb3JlLnBybykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkU2NvcmUucG9pbnRzUHJvID0gY2hpbGRTY29yZS5jaGlsZHJlblBvaW50c1BybyAqIGNoaWxkU2NvcmUucGVyY2VudE9mV2VpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkU2NvcmUucG9pbnRzQ29uID0gY2hpbGRTY29yZS5jaGlsZHJlblBvaW50c0NvbiAqIGNoaWxkU2NvcmUucGVyY2VudE9mV2VpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZFNjb3JlLnBvaW50c1BybyA9IGNoaWxkU2NvcmUuY2hpbGRyZW5Qb2ludHNDb24gKiBjaGlsZFNjb3JlLnBlcmNlbnRPZldlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZFNjb3JlLnBvaW50c0NvbiA9IGNoaWxkU2NvcmUuY2hpbGRyZW5Qb2ludHNQcm8gKiBjaGlsZFNjb3JlLnBlcmNlbnRPZldlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBuZXdTY29yZS5jaGlsZHJlblBvaW50c1BybyArPVxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkU2NvcmUucG9pbnRzUHJvO1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgbmV3U2NvcmUuY2hpbGRyZW5Qb2ludHNDb24gKz1cclxuICAgICAgICAgICAgICAgICAgICBjaGlsZFNjb3JlLnBvaW50c0NvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoaWxkU2NvcmUuYWZmZWN0cyA9PT0gXCJyZWxldmFuY2VcIikge1xyXG4gICAgICAgICAgICAvLyBQcm9jZXNzIFJlbGV2YW5jZSBjaGlsZCBjbGFpbXNcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25maWRlbmNlID0gY2hpbGRTY29yZS5jb25maWRlbmNlXHJcbiAgICAgICAgICAgIGlmICghY2hpbGRTY29yZS5yZXZlcnNpYmxlICYmIGNoaWxkU2NvcmUuY29uZmlkZW5jZSA8IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZGVuY2UgPSAwXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChuZXdTY29yZS5yZWxldmFuY2UgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdTY29yZS5yZWxldmFuY2UgPSAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hpbGRTY29yZS5wcm8pIHtcclxuICAgICAgICAgICAgICAgIG5ld1Njb3JlLnJlbGV2YW5jZSArPSBjb25maWRlbmNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV3U2NvcmUucmVsZXZhbmNlIC09IGNvbmZpZGVuY2UgLyAyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpZiAoT2JqZWN0LmlzKG5ld1Njb3JlLmNvbmZpZGVuY2UsIC0wKSkge1xyXG4gICAgICAgIC8vIFByb3RlY3QgYWdhaW5zdCBuZWdhdGl2ZSB6ZXJvIFxyXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXdTY29yZTtcclxufVxyXG5cclxuIl19
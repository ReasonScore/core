"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScore = calculateScore;

/**
 * Calculates a new score based on the child scores passed in.
 */
function calculateScore({
  childScores = [],
  reversible = true
} = {}) {
  const newScore = {};
  let childrenConfidence = 0;
  let childrenRelevance = 0;

  if (childScores.filter(s => s.affects === 'confidence').length < 1) {
    // If there are no children that affect the confidence of the claim
    // then assume the claim is 100% confident and start strength and relevance at 1
    childrenConfidence = 1;
    childrenRelevance = 1;
  }

  childScores.forEach(score => {
    // Loop through the child scores and determine the score of the parent.
    if (score.affects === 'confidence') {
      //calculate the reduction of the relevance bease on the distance of the confidence from zero
      //TODO: maybe add a flag on the claimEdge to be able to turn this off in the case of a claim that should draw the parent towards zero
      //Like "This claim should require supporting evidence"
      let confidenceRelevanceAdjustment = 1;
      confidenceRelevanceAdjustment = Math.abs(score.confidence); // Process edges that affect confidence

      if (score.pro) {
        childrenConfidence += score.confidence * score.relevance * confidenceRelevanceAdjustment; // Add up all the strength of the children

        childrenRelevance += score.relevance * confidenceRelevanceAdjustment; //Add up the relevance separately so we can do a weighted agerage later
      } else {
        childrenConfidence -= score.confidence * score.relevance * confidenceRelevanceAdjustment;
        childrenRelevance += score.relevance * confidenceRelevanceAdjustment;
      }
    }

    if (score.affects === 'relevance') {
      // Process Relevance child claims
      if (newScore.relevance == undefined) {
        newScore.relevance = 1;
      }

      if (score.pro) {
        newScore.relevance += score.confidence; // Add up all the strength of the children
      } else {
        newScore.relevance -= score.confidence;
      }
    }
  });

  if (childrenRelevance === 0) {
    // Protect against division by zero
    newScore.confidence = 0;
  } else {
    //Calculate the score
    newScore.confidence = childrenConfidence / childrenRelevance;
  }

  if (!reversible && newScore.confidence < 0) {
    // If it is not reversible then do not let it go negative
    newScore.confidence = 0;
  }

  if (Object.is(newScore.confidence, -0)) {
    // Protect against negative zero 
    newScore.confidence = 0;
  }

  return newScore;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWxjdWxhdGVTY29yZS50cyJdLCJuYW1lcyI6WyJjYWxjdWxhdGVTY29yZSIsImNoaWxkU2NvcmVzIiwicmV2ZXJzaWJsZSIsIm5ld1Njb3JlIiwiY2hpbGRyZW5Db25maWRlbmNlIiwiY2hpbGRyZW5SZWxldmFuY2UiLCJmaWx0ZXIiLCJzIiwiYWZmZWN0cyIsImxlbmd0aCIsImZvckVhY2giLCJzY29yZSIsImNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50IiwiTWF0aCIsImFicyIsImNvbmZpZGVuY2UiLCJwcm8iLCJyZWxldmFuY2UiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJpcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVdBOzs7QUFHTyxTQUFTQSxjQUFULENBQXdCO0FBQUVDLEVBQUFBLFdBQVcsR0FBRyxFQUFoQjtBQUFvQkMsRUFBQUEsVUFBVSxHQUFHO0FBQWpDLElBSzNCLEVBTEcsRUFNWTtBQUVmLFFBQU1DLFFBQXdCLEdBQUcsRUFBakM7QUFFQSxNQUFJQyxrQkFBa0IsR0FBRyxDQUF6QjtBQUNBLE1BQUlDLGlCQUFpQixHQUFHLENBQXhCOztBQUVBLE1BQUlKLFdBQVcsQ0FBQ0ssTUFBWixDQUFtQkMsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLE9BQUYsS0FBYyxZQUF0QyxFQUFvREMsTUFBcEQsR0FBNkQsQ0FBakUsRUFBb0U7QUFDaEU7QUFDQTtBQUNBTCxJQUFBQSxrQkFBa0IsR0FBRyxDQUFyQjtBQUNBQyxJQUFBQSxpQkFBaUIsR0FBRyxDQUFwQjtBQUNIOztBQUVESixFQUFBQSxXQUFXLENBQUNTLE9BQVosQ0FBb0JDLEtBQUssSUFBSTtBQUN6QjtBQUNBLFFBQUlBLEtBQUssQ0FBQ0gsT0FBTixLQUFrQixZQUF0QixFQUFvQztBQUVoQztBQUNBO0FBQ0E7QUFDQSxVQUFJSSw2QkFBNkIsR0FBRyxDQUFwQztBQUNBQSxNQUFBQSw2QkFBNkIsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVNILEtBQUssQ0FBQ0ksVUFBZixDQUFoQyxDQU5nQyxDQVFoQzs7QUFDQSxVQUFJSixLQUFLLENBQUNLLEdBQVYsRUFBZTtBQUNYWixRQUFBQSxrQkFBa0IsSUFBSU8sS0FBSyxDQUFDSSxVQUFOLEdBQW1CSixLQUFLLENBQUNNLFNBQXpCLEdBQXFDTCw2QkFBM0QsQ0FEVyxDQUMrRTs7QUFDMUZQLFFBQUFBLGlCQUFpQixJQUFJTSxLQUFLLENBQUNNLFNBQU4sR0FBa0JMLDZCQUF2QyxDQUZXLENBRTJEO0FBQ3pFLE9BSEQsTUFHTztBQUNIUixRQUFBQSxrQkFBa0IsSUFBSU8sS0FBSyxDQUFDSSxVQUFOLEdBQW1CSixLQUFLLENBQUNNLFNBQXpCLEdBQXFDTCw2QkFBM0Q7QUFDQVAsUUFBQUEsaUJBQWlCLElBQUlNLEtBQUssQ0FBQ00sU0FBTixHQUFrQkwsNkJBQXZDO0FBQ0g7QUFDSjs7QUFFRCxRQUFJRCxLQUFLLENBQUNILE9BQU4sS0FBa0IsV0FBdEIsRUFBbUM7QUFDL0I7QUFDQSxVQUFJTCxRQUFRLENBQUNjLFNBQVQsSUFBc0JDLFNBQTFCLEVBQW9DO0FBQ2hDZixRQUFBQSxRQUFRLENBQUNjLFNBQVQsR0FBcUIsQ0FBckI7QUFDSDs7QUFDRCxVQUFJTixLQUFLLENBQUNLLEdBQVYsRUFBZTtBQUNYYixRQUFBQSxRQUFRLENBQUNjLFNBQVQsSUFBc0JOLEtBQUssQ0FBQ0ksVUFBNUIsQ0FEVyxDQUM2QjtBQUMzQyxPQUZELE1BRU87QUFDSFosUUFBQUEsUUFBUSxDQUFDYyxTQUFULElBQXNCTixLQUFLLENBQUNJLFVBQTVCO0FBQ0g7QUFDSjtBQUNKLEdBL0JEOztBQWlDQSxNQUFJVixpQkFBaUIsS0FBSyxDQUExQixFQUE2QjtBQUN6QjtBQUNBRixJQUFBQSxRQUFRLENBQUNZLFVBQVQsR0FBc0IsQ0FBdEI7QUFDSCxHQUhELE1BR087QUFDSDtBQUNBWixJQUFBQSxRQUFRLENBQUNZLFVBQVQsR0FBc0JYLGtCQUFrQixHQUFHQyxpQkFBM0M7QUFDSDs7QUFFRCxNQUFJLENBQUNILFVBQUQsSUFBZUMsUUFBUSxDQUFDWSxVQUFULEdBQXNCLENBQXpDLEVBQTRDO0FBQ3hDO0FBQ0FaLElBQUFBLFFBQVEsQ0FBQ1ksVUFBVCxHQUFzQixDQUF0QjtBQUNIOztBQUVELE1BQUlJLE1BQU0sQ0FBQ0MsRUFBUCxDQUFVakIsUUFBUSxDQUFDWSxVQUFuQixFQUErQixDQUFDLENBQWhDLENBQUosRUFBd0M7QUFDcEM7QUFDQVosSUFBQUEsUUFBUSxDQUFDWSxVQUFULEdBQXNCLENBQXRCO0FBQ0g7O0FBRUQsU0FBT1osUUFBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaVNjb3JlLCBpU2NvcmVGcmFnbWVudCB9IGZyb20gXCIuL2RhdGFNb2RlbHMvU2NvcmVcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgaUNhbGN1bGF0ZVNjb3JlIHtcclxuICAgICh7IGNoaWxkU2NvcmVzICwgcmV2ZXJzaWJsZSB9OiB7XHJcbiAgICAgICAgLyoqIEFuIGFycmF5IG9mIGdyb3VwZWQgZWRnZXMgYW5kIGNsYWltcyovXHJcbiAgICAgICAgY2hpbGRTY29yZXM/OiBpU2NvcmVbXTtcclxuICAgICAgICAvKiogQ2FuIHRoaXMgc2NvcmUgZmFsbCBiZWxvdyBhIDAgY29uZmlkZW5jZSAoaGF2ZSBhIG5lZ2F0aXZlIGNvbmZpZGVuY2UpICovXHJcbiAgICAgICAgcmV2ZXJzaWJsZT86IGJvb2xlYW5cclxuICAgIH0pIDogaVNjb3JlRnJhZ21lbnRcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYSBuZXcgc2NvcmUgYmFzZWQgb24gdGhlIGNoaWxkIHNjb3JlcyBwYXNzZWQgaW4uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlU2NvcmUoeyBjaGlsZFNjb3JlcyA9IFtdLCByZXZlcnNpYmxlID0gdHJ1ZSB9OiB7XHJcbiAgICAvKiogQW4gYXJyYXkgb2YgZ3JvdXBlZCBlZGdlcyBhbmQgY2xhaW1zKi9cclxuICAgIGNoaWxkU2NvcmVzPzogaVNjb3JlW107XHJcbiAgICAvKiogQ2FuIHRoaXMgc2NvcmUgZmFsbCBiZWxvdyBhIDAgY29uZmlkZW5jZSAoaGF2ZSBhIG5lZ2F0aXZlIGNvbmZpZGVuY2UpICovXHJcbiAgICByZXZlcnNpYmxlPzogYm9vbGVhblxyXG59ID0ge30sXHJcbikgOiBpU2NvcmVGcmFnbWVudCB7XHJcbiAgICBcclxuICAgIGNvbnN0IG5ld1Njb3JlOiBpU2NvcmVGcmFnbWVudCA9IHt9O1xyXG4gICAgXHJcbiAgICBsZXQgY2hpbGRyZW5Db25maWRlbmNlID0gMFxyXG4gICAgbGV0IGNoaWxkcmVuUmVsZXZhbmNlID0gMFxyXG5cclxuICAgIGlmIChjaGlsZFNjb3Jlcy5maWx0ZXIocyA9PiBzLmFmZmVjdHMgPT09ICdjb25maWRlbmNlJykubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBjaGlsZHJlbiB0aGF0IGFmZmVjdCB0aGUgY29uZmlkZW5jZSBvZiB0aGUgY2xhaW1cclxuICAgICAgICAvLyB0aGVuIGFzc3VtZSB0aGUgY2xhaW0gaXMgMTAwJSBjb25maWRlbnQgYW5kIHN0YXJ0IHN0cmVuZ3RoIGFuZCByZWxldmFuY2UgYXQgMVxyXG4gICAgICAgIGNoaWxkcmVuQ29uZmlkZW5jZSA9IDE7XHJcbiAgICAgICAgY2hpbGRyZW5SZWxldmFuY2UgPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIGNoaWxkU2NvcmVzLmZvckVhY2goc2NvcmUgPT4ge1xyXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgY2hpbGQgc2NvcmVzIGFuZCBkZXRlcm1pbmUgdGhlIHNjb3JlIG9mIHRoZSBwYXJlbnQuXHJcbiAgICAgICAgaWYgKHNjb3JlLmFmZmVjdHMgPT09ICdjb25maWRlbmNlJykge1xyXG5cclxuICAgICAgICAgICAgLy9jYWxjdWxhdGUgdGhlIHJlZHVjdGlvbiBvZiB0aGUgcmVsZXZhbmNlIGJlYXNlIG9uIHRoZSBkaXN0YW5jZSBvZiB0aGUgY29uZmlkZW5jZSBmcm9tIHplcm9cclxuICAgICAgICAgICAgLy9UT0RPOiBtYXliZSBhZGQgYSBmbGFnIG9uIHRoZSBjbGFpbUVkZ2UgdG8gYmUgYWJsZSB0byB0dXJuIHRoaXMgb2ZmIGluIHRoZSBjYXNlIG9mIGEgY2xhaW0gdGhhdCBzaG91bGQgZHJhdyB0aGUgcGFyZW50IHRvd2FyZHMgemVyb1xyXG4gICAgICAgICAgICAvL0xpa2UgXCJUaGlzIGNsYWltIHNob3VsZCByZXF1aXJlIHN1cHBvcnRpbmcgZXZpZGVuY2VcIlxyXG4gICAgICAgICAgICBsZXQgY29uZmlkZW5jZVJlbGV2YW5jZUFkanVzdG1lbnQgPSAxXHJcbiAgICAgICAgICAgIGNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50ID0gTWF0aC5hYnMoc2NvcmUuY29uZmlkZW5jZSlcclxuXHJcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgZWRnZXMgdGhhdCBhZmZlY3QgY29uZmlkZW5jZVxyXG4gICAgICAgICAgICBpZiAoc2NvcmUucHJvKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlbkNvbmZpZGVuY2UgKz0gc2NvcmUuY29uZmlkZW5jZSAqIHNjb3JlLnJlbGV2YW5jZSAqIGNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50OyAvLyBBZGQgdXAgYWxsIHRoZSBzdHJlbmd0aCBvZiB0aGUgY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuUmVsZXZhbmNlICs9IHNjb3JlLnJlbGV2YW5jZSAqIGNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50OyAvL0FkZCB1cCB0aGUgcmVsZXZhbmNlIHNlcGFyYXRlbHkgc28gd2UgY2FuIGRvIGEgd2VpZ2h0ZWQgYWdlcmFnZSBsYXRlclxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5Db25maWRlbmNlIC09IHNjb3JlLmNvbmZpZGVuY2UgKiBzY29yZS5yZWxldmFuY2UgKiBjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudDtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuUmVsZXZhbmNlICs9IHNjb3JlLnJlbGV2YW5jZSAqIGNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2NvcmUuYWZmZWN0cyA9PT0gJ3JlbGV2YW5jZScpIHtcclxuICAgICAgICAgICAgLy8gUHJvY2VzcyBSZWxldmFuY2UgY2hpbGQgY2xhaW1zXHJcbiAgICAgICAgICAgIGlmIChuZXdTY29yZS5yZWxldmFuY2UgPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIG5ld1Njb3JlLnJlbGV2YW5jZSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNjb3JlLnBybykge1xyXG4gICAgICAgICAgICAgICAgbmV3U2NvcmUucmVsZXZhbmNlICs9IHNjb3JlLmNvbmZpZGVuY2U7IC8vIEFkZCB1cCBhbGwgdGhlIHN0cmVuZ3RoIG9mIHRoZSBjaGlsZHJlblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV3U2NvcmUucmVsZXZhbmNlIC09IHNjb3JlLmNvbmZpZGVuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoY2hpbGRyZW5SZWxldmFuY2UgPT09IDApIHtcclxuICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgZGl2aXNpb24gYnkgemVyb1xyXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvL0NhbGN1bGF0ZSB0aGUgc2NvcmVcclxuICAgICAgICBuZXdTY29yZS5jb25maWRlbmNlID0gY2hpbGRyZW5Db25maWRlbmNlIC8gY2hpbGRyZW5SZWxldmFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFyZXZlcnNpYmxlICYmIG5ld1Njb3JlLmNvbmZpZGVuY2UgPCAwKSB7XHJcbiAgICAgICAgLy8gSWYgaXQgaXMgbm90IHJldmVyc2libGUgdGhlbiBkbyBub3QgbGV0IGl0IGdvIG5lZ2F0aXZlXHJcbiAgICAgICAgbmV3U2NvcmUuY29uZmlkZW5jZSA9IDBcclxuICAgIH1cclxuXHJcbiAgICBpZiAoT2JqZWN0LmlzKG5ld1Njb3JlLmNvbmZpZGVuY2UsIC0wKSkge1xyXG4gICAgICAgIC8vIFByb3RlY3QgYWdhaW5zdCBuZWdhdGl2ZSB6ZXJvIFxyXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXdTY29yZTtcclxufVxyXG5cclxuIl19
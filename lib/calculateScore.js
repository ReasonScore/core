"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScore = calculateScore;

/**
 * Calculates a new score based on the child scores passed in.
 */
function calculateScore({
  childScores = [],
  reversible = true
} = {}) {
  const newScore = {
    confidence: 1,
    relevance: 1
  };
  let childrenConfidence = 0;
  let childrenRelevance = 0;

  if (childScores.filter(s => s.affects === 'confidence').length < 1) {
    // If there are no children that affect the confidence of the claim
    // then assume the claim is 100% confident and start strength and relevance at 1
    childrenConfidence = 1;
    childrenRelevance = 1;
  }

  childScores.forEach(score => {
    // Loop through the child scores and determine the score of the parent.
    if (score.affects === 'confidence') {
      //calculate the reduction of the relevance bease on the distance of the confidence from zero
      //TODO: maybe add a flag on the claimEdge to be able to turn this off in the case of a claim that should draw the parent towards zero
      //Like "This claim should require supporting evidence"
      let confidenceRelevanceAdjustment = 1;
      confidenceRelevanceAdjustment = Math.abs(score.confidence); // Process edges that affect confidence

      if (score.pro) {
        childrenConfidence += score.confidence * score.relevance * confidenceRelevanceAdjustment; // Add up all the strength of the children

        childrenRelevance += score.relevance * confidenceRelevanceAdjustment; //Add up the relevance separately so we can do a weighted agerage later
      } else {
        childrenConfidence -= score.confidence * score.relevance * confidenceRelevanceAdjustment;
        childrenRelevance += score.relevance * confidenceRelevanceAdjustment;
      }
    }

    if (score.affects === 'relevance') {
      // Process Relevance child claims
      debugger;

      if (newScore.relevance == undefined) {
        newScore.relevance = 1;
      }

      if (score.pro) {
        newScore.relevance += score.confidence; // Add up all the strength of the children
      } else {
        newScore.relevance -= score.confidence / 2;
      }
    }
  });

  if (childrenRelevance === 0) {
    // Protect against division by zero
    newScore.confidence = 0;
  } else {
    //Calculate the score
    newScore.confidence = childrenConfidence / childrenRelevance;
  }

  if (!reversible && newScore.confidence < 0) {
    // If it is not reversible then do not let it go negative
    newScore.confidence = 0;
  }

  if (Object.is(newScore.confidence, -0)) {
    // Protect against negative zero 
    newScore.confidence = 0;
  }

  return newScore;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWxjdWxhdGVTY29yZS50cyJdLCJuYW1lcyI6WyJjYWxjdWxhdGVTY29yZSIsImNoaWxkU2NvcmVzIiwicmV2ZXJzaWJsZSIsIm5ld1Njb3JlIiwiY29uZmlkZW5jZSIsInJlbGV2YW5jZSIsImNoaWxkcmVuQ29uZmlkZW5jZSIsImNoaWxkcmVuUmVsZXZhbmNlIiwiZmlsdGVyIiwicyIsImFmZmVjdHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwic2NvcmUiLCJjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudCIsIk1hdGgiLCJhYnMiLCJwcm8iLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJpcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVdBOzs7QUFHTyxTQUFTQSxjQUFULENBQXdCO0FBQUVDLEVBQUFBLFdBQVcsR0FBRyxFQUFoQjtBQUFvQkMsRUFBQUEsVUFBVSxHQUFHO0FBQWpDLElBSzNCLEVBTEcsRUFNWTtBQUVmLFFBQU1DLFFBQXdCLEdBQUc7QUFDN0JDLElBQUFBLFVBQVUsRUFBRSxDQURpQjtBQUU3QkMsSUFBQUEsU0FBUyxFQUFFO0FBRmtCLEdBQWpDO0FBS0EsTUFBSUMsa0JBQWtCLEdBQUcsQ0FBekI7QUFDQSxNQUFJQyxpQkFBaUIsR0FBRyxDQUF4Qjs7QUFFQSxNQUFJTixXQUFXLENBQUNPLE1BQVosQ0FBbUJDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxPQUFGLEtBQWMsWUFBdEMsRUFBb0RDLE1BQXBELEdBQTZELENBQWpFLEVBQW9FO0FBQ2hFO0FBQ0E7QUFDQUwsSUFBQUEsa0JBQWtCLEdBQUcsQ0FBckI7QUFDQUMsSUFBQUEsaUJBQWlCLEdBQUcsQ0FBcEI7QUFDSDs7QUFFRE4sRUFBQUEsV0FBVyxDQUFDVyxPQUFaLENBQW9CQyxLQUFLLElBQUk7QUFDekI7QUFDQSxRQUFJQSxLQUFLLENBQUNILE9BQU4sS0FBa0IsWUFBdEIsRUFBb0M7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsVUFBSUksNkJBQTZCLEdBQUcsQ0FBcEM7QUFDQUEsTUFBQUEsNkJBQTZCLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTSCxLQUFLLENBQUNULFVBQWYsQ0FBaEMsQ0FOZ0MsQ0FRaEM7O0FBQ0EsVUFBSVMsS0FBSyxDQUFDSSxHQUFWLEVBQWU7QUFDWFgsUUFBQUEsa0JBQWtCLElBQUlPLEtBQUssQ0FBQ1QsVUFBTixHQUFtQlMsS0FBSyxDQUFDUixTQUF6QixHQUFxQ1MsNkJBQTNELENBRFcsQ0FDK0U7O0FBQzFGUCxRQUFBQSxpQkFBaUIsSUFBSU0sS0FBSyxDQUFDUixTQUFOLEdBQWtCUyw2QkFBdkMsQ0FGVyxDQUUyRDtBQUN6RSxPQUhELE1BR087QUFDSFIsUUFBQUEsa0JBQWtCLElBQUlPLEtBQUssQ0FBQ1QsVUFBTixHQUFtQlMsS0FBSyxDQUFDUixTQUF6QixHQUFxQ1MsNkJBQTNEO0FBQ0FQLFFBQUFBLGlCQUFpQixJQUFJTSxLQUFLLENBQUNSLFNBQU4sR0FBa0JTLDZCQUF2QztBQUNIO0FBQ0o7O0FBRUQsUUFBSUQsS0FBSyxDQUFDSCxPQUFOLEtBQWtCLFdBQXRCLEVBQW1DO0FBQy9CO0FBQ0E7O0FBQ0EsVUFBSVAsUUFBUSxDQUFDRSxTQUFULElBQXNCYSxTQUExQixFQUFvQztBQUNoQ2YsUUFBQUEsUUFBUSxDQUFDRSxTQUFULEdBQXFCLENBQXJCO0FBQ0g7O0FBQ0QsVUFBSVEsS0FBSyxDQUFDSSxHQUFWLEVBQWU7QUFDWGQsUUFBQUEsUUFBUSxDQUFDRSxTQUFULElBQXNCUSxLQUFLLENBQUNULFVBQTVCLENBRFcsQ0FDNkI7QUFDM0MsT0FGRCxNQUVPO0FBQ0hELFFBQUFBLFFBQVEsQ0FBQ0UsU0FBVCxJQUFzQlEsS0FBSyxDQUFDVCxVQUFOLEdBQWlCLENBQXZDO0FBQ0g7QUFDSjtBQUNKLEdBaENEOztBQWtDQSxNQUFJRyxpQkFBaUIsS0FBSyxDQUExQixFQUE2QjtBQUN6QjtBQUNBSixJQUFBQSxRQUFRLENBQUNDLFVBQVQsR0FBc0IsQ0FBdEI7QUFDSCxHQUhELE1BR087QUFDSDtBQUNBRCxJQUFBQSxRQUFRLENBQUNDLFVBQVQsR0FBc0JFLGtCQUFrQixHQUFHQyxpQkFBM0M7QUFDSDs7QUFFRCxNQUFJLENBQUNMLFVBQUQsSUFBZUMsUUFBUSxDQUFDQyxVQUFULEdBQXNCLENBQXpDLEVBQTRDO0FBQ3hDO0FBQ0FELElBQUFBLFFBQVEsQ0FBQ0MsVUFBVCxHQUFzQixDQUF0QjtBQUNIOztBQUVELE1BQUllLE1BQU0sQ0FBQ0MsRUFBUCxDQUFVakIsUUFBUSxDQUFDQyxVQUFuQixFQUErQixDQUFDLENBQWhDLENBQUosRUFBd0M7QUFDcEM7QUFDQUQsSUFBQUEsUUFBUSxDQUFDQyxVQUFULEdBQXNCLENBQXRCO0FBQ0g7O0FBRUQsU0FBT0QsUUFBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaVNjb3JlLCBpU2NvcmVGcmFnbWVudCB9IGZyb20gXCIuL2RhdGFNb2RlbHMvU2NvcmVcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgaUNhbGN1bGF0ZVNjb3JlIHtcclxuICAgICh7IGNoaWxkU2NvcmVzICwgcmV2ZXJzaWJsZSB9OiB7XHJcbiAgICAgICAgLyoqIEFuIGFycmF5IG9mIGdyb3VwZWQgZWRnZXMgYW5kIGNsYWltcyovXHJcbiAgICAgICAgY2hpbGRTY29yZXM/OiBpU2NvcmVbXTtcclxuICAgICAgICAvKiogQ2FuIHRoaXMgc2NvcmUgZmFsbCBiZWxvdyBhIDAgY29uZmlkZW5jZSAoaGF2ZSBhIG5lZ2F0aXZlIGNvbmZpZGVuY2UpICovXHJcbiAgICAgICAgcmV2ZXJzaWJsZT86IGJvb2xlYW5cclxuICAgIH0pIDogaVNjb3JlRnJhZ21lbnRcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYSBuZXcgc2NvcmUgYmFzZWQgb24gdGhlIGNoaWxkIHNjb3JlcyBwYXNzZWQgaW4uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlU2NvcmUoeyBjaGlsZFNjb3JlcyA9IFtdLCByZXZlcnNpYmxlID0gdHJ1ZSB9OiB7XHJcbiAgICAvKiogQW4gYXJyYXkgb2YgZ3JvdXBlZCBlZGdlcyBhbmQgY2xhaW1zKi9cclxuICAgIGNoaWxkU2NvcmVzPzogaVNjb3JlW107XHJcbiAgICAvKiogQ2FuIHRoaXMgc2NvcmUgZmFsbCBiZWxvdyBhIDAgY29uZmlkZW5jZSAoaGF2ZSBhIG5lZ2F0aXZlIGNvbmZpZGVuY2UpICovXHJcbiAgICByZXZlcnNpYmxlPzogYm9vbGVhblxyXG59ID0ge30sXHJcbikgOiBpU2NvcmVGcmFnbWVudCB7XHJcbiAgICBcclxuICAgIGNvbnN0IG5ld1Njb3JlOiBpU2NvcmVGcmFnbWVudCA9IHtcclxuICAgICAgICBjb25maWRlbmNlOiAxLFxyXG4gICAgICAgIHJlbGV2YW5jZTogMSxcclxuICAgIH07XHJcbiAgICBcclxuICAgIGxldCBjaGlsZHJlbkNvbmZpZGVuY2UgPSAwXHJcbiAgICBsZXQgY2hpbGRyZW5SZWxldmFuY2UgPSAwXHJcblxyXG4gICAgaWYgKGNoaWxkU2NvcmVzLmZpbHRlcihzID0+IHMuYWZmZWN0cyA9PT0gJ2NvbmZpZGVuY2UnKS5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGNoaWxkcmVuIHRoYXQgYWZmZWN0IHRoZSBjb25maWRlbmNlIG9mIHRoZSBjbGFpbVxyXG4gICAgICAgIC8vIHRoZW4gYXNzdW1lIHRoZSBjbGFpbSBpcyAxMDAlIGNvbmZpZGVudCBhbmQgc3RhcnQgc3RyZW5ndGggYW5kIHJlbGV2YW5jZSBhdCAxXHJcbiAgICAgICAgY2hpbGRyZW5Db25maWRlbmNlID0gMTtcclxuICAgICAgICBjaGlsZHJlblJlbGV2YW5jZSA9IDE7XHJcbiAgICB9XHJcblxyXG4gICAgY2hpbGRTY29yZXMuZm9yRWFjaChzY29yZSA9PiB7XHJcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBjaGlsZCBzY29yZXMgYW5kIGRldGVybWluZSB0aGUgc2NvcmUgb2YgdGhlIHBhcmVudC5cclxuICAgICAgICBpZiAoc2NvcmUuYWZmZWN0cyA9PT0gJ2NvbmZpZGVuY2UnKSB7XHJcblxyXG4gICAgICAgICAgICAvL2NhbGN1bGF0ZSB0aGUgcmVkdWN0aW9uIG9mIHRoZSByZWxldmFuY2UgYmVhc2Ugb24gdGhlIGRpc3RhbmNlIG9mIHRoZSBjb25maWRlbmNlIGZyb20gemVyb1xyXG4gICAgICAgICAgICAvL1RPRE86IG1heWJlIGFkZCBhIGZsYWcgb24gdGhlIGNsYWltRWRnZSB0byBiZSBhYmxlIHRvIHR1cm4gdGhpcyBvZmYgaW4gdGhlIGNhc2Ugb2YgYSBjbGFpbSB0aGF0IHNob3VsZCBkcmF3IHRoZSBwYXJlbnQgdG93YXJkcyB6ZXJvXHJcbiAgICAgICAgICAgIC8vTGlrZSBcIlRoaXMgY2xhaW0gc2hvdWxkIHJlcXVpcmUgc3VwcG9ydGluZyBldmlkZW5jZVwiXHJcbiAgICAgICAgICAgIGxldCBjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudCA9IDFcclxuICAgICAgICAgICAgY29uZmlkZW5jZVJlbGV2YW5jZUFkanVzdG1lbnQgPSBNYXRoLmFicyhzY29yZS5jb25maWRlbmNlKVxyXG5cclxuICAgICAgICAgICAgLy8gUHJvY2VzcyBlZGdlcyB0aGF0IGFmZmVjdCBjb25maWRlbmNlXHJcbiAgICAgICAgICAgIGlmIChzY29yZS5wcm8pIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuQ29uZmlkZW5jZSArPSBzY29yZS5jb25maWRlbmNlICogc2NvcmUucmVsZXZhbmNlICogY29uZmlkZW5jZVJlbGV2YW5jZUFkanVzdG1lbnQ7IC8vIEFkZCB1cCBhbGwgdGhlIHN0cmVuZ3RoIG9mIHRoZSBjaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5SZWxldmFuY2UgKz0gc2NvcmUucmVsZXZhbmNlICogY29uZmlkZW5jZVJlbGV2YW5jZUFkanVzdG1lbnQ7IC8vQWRkIHVwIHRoZSByZWxldmFuY2Ugc2VwYXJhdGVseSBzbyB3ZSBjYW4gZG8gYSB3ZWlnaHRlZCBhZ2VyYWdlIGxhdGVyXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlbkNvbmZpZGVuY2UgLT0gc2NvcmUuY29uZmlkZW5jZSAqIHNjb3JlLnJlbGV2YW5jZSAqIGNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50O1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5SZWxldmFuY2UgKz0gc2NvcmUucmVsZXZhbmNlICogY29uZmlkZW5jZVJlbGV2YW5jZUFkanVzdG1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzY29yZS5hZmZlY3RzID09PSAncmVsZXZhbmNlJykge1xyXG4gICAgICAgICAgICAvLyBQcm9jZXNzIFJlbGV2YW5jZSBjaGlsZCBjbGFpbXNcclxuICAgICAgICAgICAgZGVidWdnZXJcclxuICAgICAgICAgICAgaWYgKG5ld1Njb3JlLnJlbGV2YW5jZSA9PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgbmV3U2NvcmUucmVsZXZhbmNlID0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc2NvcmUucHJvKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdTY29yZS5yZWxldmFuY2UgKz0gc2NvcmUuY29uZmlkZW5jZTsgLy8gQWRkIHVwIGFsbCB0aGUgc3RyZW5ndGggb2YgdGhlIGNoaWxkcmVuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdTY29yZS5yZWxldmFuY2UgLT0gc2NvcmUuY29uZmlkZW5jZS8yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKGNoaWxkcmVuUmVsZXZhbmNlID09PSAwKSB7XHJcbiAgICAgICAgLy8gUHJvdGVjdCBhZ2FpbnN0IGRpdmlzaW9uIGJ5IHplcm9cclxuICAgICAgICBuZXdTY29yZS5jb25maWRlbmNlID0gMDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy9DYWxjdWxhdGUgdGhlIHNjb3JlXHJcbiAgICAgICAgbmV3U2NvcmUuY29uZmlkZW5jZSA9IGNoaWxkcmVuQ29uZmlkZW5jZSAvIGNoaWxkcmVuUmVsZXZhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghcmV2ZXJzaWJsZSAmJiBuZXdTY29yZS5jb25maWRlbmNlIDwgMCkge1xyXG4gICAgICAgIC8vIElmIGl0IGlzIG5vdCByZXZlcnNpYmxlIHRoZW4gZG8gbm90IGxldCBpdCBnbyBuZWdhdGl2ZVxyXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAwXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKE9iamVjdC5pcyhuZXdTY29yZS5jb25maWRlbmNlLCAtMCkpIHtcclxuICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgbmVnYXRpdmUgemVybyBcclxuICAgICAgICBuZXdTY29yZS5jb25maWRlbmNlID0gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3U2NvcmU7XHJcbn1cclxuXHJcbiJdfQ==
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScore = calculateScore;

/**
 * Calculates a new score based on the child scores passed in.
 */
function calculateScore({
  childScores = [],
  reversible = true
} = {}) {
  const newScore = {
    confidence: 1,
    relevance: 1
  };
  let childrenConfidence = 0;
  let childrenRelevance = 0;

  if (childScores.filter(s => s.affects === 'confidence').length < 1) {
    // If there are no children that affect the confidence of the claim
    // then assume the claim is 100% confident and start strength and relevance at 1
    childrenConfidence = 1;
    childrenRelevance = 1;
  }

  childScores.forEach(score => {
    // Loop through the child scores and determine the score of the parent.
    if (score.affects === 'confidence') {
      //calculate the reduction of the relevance bease on the distance of the confidence from zero
      //TODO: maybe add a flag on the claimEdge to be able to turn this off in the case of a claim that should draw the parent towards zero
      //Like "This claim should require supporting evidence"
      let confidenceRelevanceAdjustment = 1;
      confidenceRelevanceAdjustment = Math.abs(score.confidence); // Process edges that affect confidence

      if (score.pro) {
        childrenConfidence += score.confidence * score.relevance * confidenceRelevanceAdjustment; // Add up all the strength of the children

        childrenRelevance += score.relevance * confidenceRelevanceAdjustment; //Add up the relevance separately so we can do a weighted agerage later
      } else {
        childrenConfidence -= score.confidence * score.relevance * confidenceRelevanceAdjustment;
        childrenRelevance += score.relevance * confidenceRelevanceAdjustment;
      }
    }

    if (score.affects === 'relevance') {
      // Process Relevance child claims
      if (newScore.relevance == undefined) {
        newScore.relevance = 1;
      }

      if (score.pro) {
        newScore.relevance += score.confidence; // Add up all the strength of the children
      } else {
        newScore.relevance -= score.confidence;
      }
    }
  });

  if (childrenRelevance === 0) {
    // Protect against division by zero
    newScore.confidence = 0;
  } else {
    //Calculate the score
    newScore.confidence = childrenConfidence / childrenRelevance;
  }

  if (!reversible && newScore.confidence < 0) {
    // If it is not reversible then do not let it go negative
    newScore.confidence = 0;
  }

  if (Object.is(newScore.confidence, -0)) {
    // Protect against negative zero 
    newScore.confidence = 0;
  }

  return newScore;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWxjdWxhdGVTY29yZS50cyJdLCJuYW1lcyI6WyJjYWxjdWxhdGVTY29yZSIsImNoaWxkU2NvcmVzIiwicmV2ZXJzaWJsZSIsIm5ld1Njb3JlIiwiY29uZmlkZW5jZSIsInJlbGV2YW5jZSIsImNoaWxkcmVuQ29uZmlkZW5jZSIsImNoaWxkcmVuUmVsZXZhbmNlIiwiZmlsdGVyIiwicyIsImFmZmVjdHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwic2NvcmUiLCJjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudCIsIk1hdGgiLCJhYnMiLCJwcm8iLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJpcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVdBOzs7QUFHTyxTQUFTQSxjQUFULENBQXdCO0FBQUVDLEVBQUFBLFdBQVcsR0FBRyxFQUFoQjtBQUFvQkMsRUFBQUEsVUFBVSxHQUFHO0FBQWpDLElBSzNCLEVBTEcsRUFNWTtBQUVmLFFBQU1DLFFBQXdCLEdBQUc7QUFDN0JDLElBQUFBLFVBQVUsRUFBRSxDQURpQjtBQUU3QkMsSUFBQUEsU0FBUyxFQUFFO0FBRmtCLEdBQWpDO0FBS0EsTUFBSUMsa0JBQWtCLEdBQUcsQ0FBekI7QUFDQSxNQUFJQyxpQkFBaUIsR0FBRyxDQUF4Qjs7QUFFQSxNQUFJTixXQUFXLENBQUNPLE1BQVosQ0FBbUJDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxPQUFGLEtBQWMsWUFBdEMsRUFBb0RDLE1BQXBELEdBQTZELENBQWpFLEVBQW9FO0FBQ2hFO0FBQ0E7QUFDQUwsSUFBQUEsa0JBQWtCLEdBQUcsQ0FBckI7QUFDQUMsSUFBQUEsaUJBQWlCLEdBQUcsQ0FBcEI7QUFDSDs7QUFFRE4sRUFBQUEsV0FBVyxDQUFDVyxPQUFaLENBQW9CQyxLQUFLLElBQUk7QUFDekI7QUFDQSxRQUFJQSxLQUFLLENBQUNILE9BQU4sS0FBa0IsWUFBdEIsRUFBb0M7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsVUFBSUksNkJBQTZCLEdBQUcsQ0FBcEM7QUFDQUEsTUFBQUEsNkJBQTZCLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTSCxLQUFLLENBQUNULFVBQWYsQ0FBaEMsQ0FOZ0MsQ0FRaEM7O0FBQ0EsVUFBSVMsS0FBSyxDQUFDSSxHQUFWLEVBQWU7QUFDWFgsUUFBQUEsa0JBQWtCLElBQUlPLEtBQUssQ0FBQ1QsVUFBTixHQUFtQlMsS0FBSyxDQUFDUixTQUF6QixHQUFxQ1MsNkJBQTNELENBRFcsQ0FDK0U7O0FBQzFGUCxRQUFBQSxpQkFBaUIsSUFBSU0sS0FBSyxDQUFDUixTQUFOLEdBQWtCUyw2QkFBdkMsQ0FGVyxDQUUyRDtBQUN6RSxPQUhELE1BR087QUFDSFIsUUFBQUEsa0JBQWtCLElBQUlPLEtBQUssQ0FBQ1QsVUFBTixHQUFtQlMsS0FBSyxDQUFDUixTQUF6QixHQUFxQ1MsNkJBQTNEO0FBQ0FQLFFBQUFBLGlCQUFpQixJQUFJTSxLQUFLLENBQUNSLFNBQU4sR0FBa0JTLDZCQUF2QztBQUNIO0FBQ0o7O0FBRUQsUUFBSUQsS0FBSyxDQUFDSCxPQUFOLEtBQWtCLFdBQXRCLEVBQW1DO0FBQy9CO0FBQ0EsVUFBSVAsUUFBUSxDQUFDRSxTQUFULElBQXNCYSxTQUExQixFQUFvQztBQUNoQ2YsUUFBQUEsUUFBUSxDQUFDRSxTQUFULEdBQXFCLENBQXJCO0FBQ0g7O0FBQ0QsVUFBSVEsS0FBSyxDQUFDSSxHQUFWLEVBQWU7QUFDWGQsUUFBQUEsUUFBUSxDQUFDRSxTQUFULElBQXNCUSxLQUFLLENBQUNULFVBQTVCLENBRFcsQ0FDNkI7QUFDM0MsT0FGRCxNQUVPO0FBQ0hELFFBQUFBLFFBQVEsQ0FBQ0UsU0FBVCxJQUFzQlEsS0FBSyxDQUFDVCxVQUE1QjtBQUNIO0FBQ0o7QUFDSixHQS9CRDs7QUFpQ0EsTUFBSUcsaUJBQWlCLEtBQUssQ0FBMUIsRUFBNkI7QUFDekI7QUFDQUosSUFBQUEsUUFBUSxDQUFDQyxVQUFULEdBQXNCLENBQXRCO0FBQ0gsR0FIRCxNQUdPO0FBQ0g7QUFDQUQsSUFBQUEsUUFBUSxDQUFDQyxVQUFULEdBQXNCRSxrQkFBa0IsR0FBR0MsaUJBQTNDO0FBQ0g7O0FBRUQsTUFBSSxDQUFDTCxVQUFELElBQWVDLFFBQVEsQ0FBQ0MsVUFBVCxHQUFzQixDQUF6QyxFQUE0QztBQUN4QztBQUNBRCxJQUFBQSxRQUFRLENBQUNDLFVBQVQsR0FBc0IsQ0FBdEI7QUFDSDs7QUFFRCxNQUFJZSxNQUFNLENBQUNDLEVBQVAsQ0FBVWpCLFFBQVEsQ0FBQ0MsVUFBbkIsRUFBK0IsQ0FBQyxDQUFoQyxDQUFKLEVBQXdDO0FBQ3BDO0FBQ0FELElBQUFBLFFBQVEsQ0FBQ0MsVUFBVCxHQUFzQixDQUF0QjtBQUNIOztBQUVELFNBQU9ELFFBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlTY29yZSwgaVNjb3JlRnJhZ21lbnQgfSBmcm9tIFwiLi9kYXRhTW9kZWxzL1Njb3JlXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIGlDYWxjdWxhdGVTY29yZSB7XHJcbiAgICAoeyBjaGlsZFNjb3JlcyAsIHJldmVyc2libGUgfToge1xyXG4gICAgICAgIC8qKiBBbiBhcnJheSBvZiBncm91cGVkIGVkZ2VzIGFuZCBjbGFpbXMqL1xyXG4gICAgICAgIGNoaWxkU2NvcmVzPzogaVNjb3JlW107XHJcbiAgICAgICAgLyoqIENhbiB0aGlzIHNjb3JlIGZhbGwgYmVsb3cgYSAwIGNvbmZpZGVuY2UgKGhhdmUgYSBuZWdhdGl2ZSBjb25maWRlbmNlKSAqL1xyXG4gICAgICAgIHJldmVyc2libGU/OiBib29sZWFuXHJcbiAgICB9KSA6IGlTY29yZUZyYWdtZW50XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGEgbmV3IHNjb3JlIGJhc2VkIG9uIHRoZSBjaGlsZCBzY29yZXMgcGFzc2VkIGluLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVNjb3JlKHsgY2hpbGRTY29yZXMgPSBbXSwgcmV2ZXJzaWJsZSA9IHRydWUgfToge1xyXG4gICAgLyoqIEFuIGFycmF5IG9mIGdyb3VwZWQgZWRnZXMgYW5kIGNsYWltcyovXHJcbiAgICBjaGlsZFNjb3Jlcz86IGlTY29yZVtdO1xyXG4gICAgLyoqIENhbiB0aGlzIHNjb3JlIGZhbGwgYmVsb3cgYSAwIGNvbmZpZGVuY2UgKGhhdmUgYSBuZWdhdGl2ZSBjb25maWRlbmNlKSAqL1xyXG4gICAgcmV2ZXJzaWJsZT86IGJvb2xlYW5cclxufSA9IHt9LFxyXG4pIDogaVNjb3JlRnJhZ21lbnQge1xyXG4gICAgXHJcbiAgICBjb25zdCBuZXdTY29yZTogaVNjb3JlRnJhZ21lbnQgPSB7XHJcbiAgICAgICAgY29uZmlkZW5jZTogMSxcclxuICAgICAgICByZWxldmFuY2U6IDEsXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBsZXQgY2hpbGRyZW5Db25maWRlbmNlID0gMFxyXG4gICAgbGV0IGNoaWxkcmVuUmVsZXZhbmNlID0gMFxyXG5cclxuICAgIGlmIChjaGlsZFNjb3Jlcy5maWx0ZXIocyA9PiBzLmFmZmVjdHMgPT09ICdjb25maWRlbmNlJykubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBjaGlsZHJlbiB0aGF0IGFmZmVjdCB0aGUgY29uZmlkZW5jZSBvZiB0aGUgY2xhaW1cclxuICAgICAgICAvLyB0aGVuIGFzc3VtZSB0aGUgY2xhaW0gaXMgMTAwJSBjb25maWRlbnQgYW5kIHN0YXJ0IHN0cmVuZ3RoIGFuZCByZWxldmFuY2UgYXQgMVxyXG4gICAgICAgIGNoaWxkcmVuQ29uZmlkZW5jZSA9IDE7XHJcbiAgICAgICAgY2hpbGRyZW5SZWxldmFuY2UgPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIGNoaWxkU2NvcmVzLmZvckVhY2goc2NvcmUgPT4ge1xyXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgY2hpbGQgc2NvcmVzIGFuZCBkZXRlcm1pbmUgdGhlIHNjb3JlIG9mIHRoZSBwYXJlbnQuXHJcbiAgICAgICAgaWYgKHNjb3JlLmFmZmVjdHMgPT09ICdjb25maWRlbmNlJykge1xyXG5cclxuICAgICAgICAgICAgLy9jYWxjdWxhdGUgdGhlIHJlZHVjdGlvbiBvZiB0aGUgcmVsZXZhbmNlIGJlYXNlIG9uIHRoZSBkaXN0YW5jZSBvZiB0aGUgY29uZmlkZW5jZSBmcm9tIHplcm9cclxuICAgICAgICAgICAgLy9UT0RPOiBtYXliZSBhZGQgYSBmbGFnIG9uIHRoZSBjbGFpbUVkZ2UgdG8gYmUgYWJsZSB0byB0dXJuIHRoaXMgb2ZmIGluIHRoZSBjYXNlIG9mIGEgY2xhaW0gdGhhdCBzaG91bGQgZHJhdyB0aGUgcGFyZW50IHRvd2FyZHMgemVyb1xyXG4gICAgICAgICAgICAvL0xpa2UgXCJUaGlzIGNsYWltIHNob3VsZCByZXF1aXJlIHN1cHBvcnRpbmcgZXZpZGVuY2VcIlxyXG4gICAgICAgICAgICBsZXQgY29uZmlkZW5jZVJlbGV2YW5jZUFkanVzdG1lbnQgPSAxXHJcbiAgICAgICAgICAgIGNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50ID0gTWF0aC5hYnMoc2NvcmUuY29uZmlkZW5jZSlcclxuXHJcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgZWRnZXMgdGhhdCBhZmZlY3QgY29uZmlkZW5jZVxyXG4gICAgICAgICAgICBpZiAoc2NvcmUucHJvKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlbkNvbmZpZGVuY2UgKz0gc2NvcmUuY29uZmlkZW5jZSAqIHNjb3JlLnJlbGV2YW5jZSAqIGNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50OyAvLyBBZGQgdXAgYWxsIHRoZSBzdHJlbmd0aCBvZiB0aGUgY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuUmVsZXZhbmNlICs9IHNjb3JlLnJlbGV2YW5jZSAqIGNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50OyAvL0FkZCB1cCB0aGUgcmVsZXZhbmNlIHNlcGFyYXRlbHkgc28gd2UgY2FuIGRvIGEgd2VpZ2h0ZWQgYWdlcmFnZSBsYXRlclxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5Db25maWRlbmNlIC09IHNjb3JlLmNvbmZpZGVuY2UgKiBzY29yZS5yZWxldmFuY2UgKiBjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudDtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuUmVsZXZhbmNlICs9IHNjb3JlLnJlbGV2YW5jZSAqIGNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2NvcmUuYWZmZWN0cyA9PT0gJ3JlbGV2YW5jZScpIHtcclxuICAgICAgICAgICAgLy8gUHJvY2VzcyBSZWxldmFuY2UgY2hpbGQgY2xhaW1zXHJcbiAgICAgICAgICAgIGlmIChuZXdTY29yZS5yZWxldmFuY2UgPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIG5ld1Njb3JlLnJlbGV2YW5jZSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNjb3JlLnBybykge1xyXG4gICAgICAgICAgICAgICAgbmV3U2NvcmUucmVsZXZhbmNlICs9IHNjb3JlLmNvbmZpZGVuY2U7IC8vIEFkZCB1cCBhbGwgdGhlIHN0cmVuZ3RoIG9mIHRoZSBjaGlsZHJlblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV3U2NvcmUucmVsZXZhbmNlIC09IHNjb3JlLmNvbmZpZGVuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoY2hpbGRyZW5SZWxldmFuY2UgPT09IDApIHtcclxuICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgZGl2aXNpb24gYnkgemVyb1xyXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvL0NhbGN1bGF0ZSB0aGUgc2NvcmVcclxuICAgICAgICBuZXdTY29yZS5jb25maWRlbmNlID0gY2hpbGRyZW5Db25maWRlbmNlIC8gY2hpbGRyZW5SZWxldmFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFyZXZlcnNpYmxlICYmIG5ld1Njb3JlLmNvbmZpZGVuY2UgPCAwKSB7XHJcbiAgICAgICAgLy8gSWYgaXQgaXMgbm90IHJldmVyc2libGUgdGhlbiBkbyBub3QgbGV0IGl0IGdvIG5lZ2F0aXZlXHJcbiAgICAgICAgbmV3U2NvcmUuY29uZmlkZW5jZSA9IDBcclxuICAgIH1cclxuXHJcbiAgICBpZiAoT2JqZWN0LmlzKG5ld1Njb3JlLmNvbmZpZGVuY2UsIC0wKSkge1xyXG4gICAgICAgIC8vIFByb3RlY3QgYWdhaW5zdCBuZWdhdGl2ZSB6ZXJvIFxyXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXdTY29yZTtcclxufVxyXG5cclxuIl19
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScore = calculateScore;

var _Affects = require("./dataModels/Affects");

var _Score = require("./dataModels/Score");

var _Id = require("./dataModels/Id");

/**
 * Calculates a new score based on the child scores and how thay wre linked (by edged) the claim this score is for.
 * This function does not take into account scopes.
 * The caller of this fuction should only put the children and scores into this array that are within scope.
 */
function calculateScore() {
  var scoreAndClaimEdges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var reversable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var sourceClaimId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, _Id.ID)("");
  var newScore = new _Score.Score(); // newScore.affects = affects;
  // newScore.reversable = reversable

  var childrenConfidence = 0;
  var childrenRelevance = 0;

  if (scoreAndClaimEdges.filter(function (c) {
    return c.claimEdge.affects === _Affects.Affects.Confidence;
  }).length < 1) {
    // If there are no children that affect the confidence of the claim
    // then assume the claim is 100% confident and start strength and relevance at 1
    childrenConfidence = 1;
    childrenRelevance = 1;
  }

  scoreAndClaimEdges.forEach(function (scoreAndClaimEdge) {
    // Loop through the child scores and determine the score of the parent.
    if (scoreAndClaimEdge.claimEdge.affects === _Affects.Affects.Confidence) {
      // Process edges that affect confidence
      if (scoreAndClaimEdge.claimEdge.pro) {
        childrenConfidence += scoreAndClaimEdge.score.confidence * scoreAndClaimEdge.score.relevance; // Add up all the strength of the children

        childrenRelevance += scoreAndClaimEdge.score.relevance; //Add up the relevance separately so we can do a weighted agerage later
      } else {
        childrenConfidence -= scoreAndClaimEdge.score.confidence * scoreAndClaimEdge.score.relevance;
        childrenRelevance += scoreAndClaimEdge.score.relevance;
      }
    }

    if (scoreAndClaimEdge.claimEdge.affects === 'relevance') {
      // Process Relevance child claims
      if (scoreAndClaimEdge.claimEdge.pro) {
        newScore.relevance += scoreAndClaimEdge.score.confidence; // Add up all the strength of the children
      } else {
        newScore.relevance -= scoreAndClaimEdge.score.confidence;
      }
    }
  });

  if (childrenRelevance === 0) {
    // Protect against division by zero
    newScore.confidence = 0;
  } else {
    //Calculate the score
    newScore.confidence = childrenConfidence / childrenRelevance;
  }

  if (!reversable && newScore.confidence < 0) {
    // If it is not reversable then do not let it go negative
    newScore.confidence = 0;
  }

  if (Object.is(newScore.confidence, -0)) {
    // Protect against negative zero 
    newScore.confidence = 0;
  }

  if (sourceClaimId !== undefined) {
    newScore.sourceClaimId = sourceClaimId;
  }

  return newScore;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWxjdWxhdGVTY29yZS50cyJdLCJuYW1lcyI6WyJjYWxjdWxhdGVTY29yZSIsInNjb3JlQW5kQ2xhaW1FZGdlcyIsInJldmVyc2FibGUiLCJzb3VyY2VDbGFpbUlkIiwibmV3U2NvcmUiLCJTY29yZSIsImNoaWxkcmVuQ29uZmlkZW5jZSIsImNoaWxkcmVuUmVsZXZhbmNlIiwiZmlsdGVyIiwiYyIsImNsYWltRWRnZSIsImFmZmVjdHMiLCJBZmZlY3RzIiwiQ29uZmlkZW5jZSIsImxlbmd0aCIsImZvckVhY2giLCJzY29yZUFuZENsYWltRWRnZSIsInBybyIsInNjb3JlIiwiY29uZmlkZW5jZSIsInJlbGV2YW5jZSIsIk9iamVjdCIsImlzIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0E7Ozs7O0FBS08sU0FBU0EsY0FBVCxHQVlMO0FBQUEsTUFWRUMsa0JBVUYsdUVBVjRDLEVBVTVDO0FBQUEsTUFGRUMsVUFFRix1RUFGZSxJQUVmO0FBQUEsTUFERUMsYUFDRix1RUFEc0IsWUFBRyxFQUFILENBQ3RCO0FBQ0UsTUFBTUMsUUFBZSxHQUFHLElBQUlDLFlBQUosRUFBeEIsQ0FERixDQUVFO0FBQ0E7O0FBQ0EsTUFBSUMsa0JBQWtCLEdBQUcsQ0FBekI7QUFDQSxNQUFJQyxpQkFBaUIsR0FBRyxDQUF4Qjs7QUFFQSxNQUFJTixrQkFBa0IsQ0FBQ08sTUFBbkIsQ0FBMEIsVUFBQUMsQ0FBQztBQUFBLFdBQUlBLENBQUMsQ0FBQ0MsU0FBRixDQUFZQyxPQUFaLEtBQXdCQyxpQkFBUUMsVUFBcEM7QUFBQSxHQUEzQixFQUEyRUMsTUFBM0UsR0FBb0YsQ0FBeEYsRUFBMkY7QUFDdkY7QUFDQTtBQUNBUixJQUFBQSxrQkFBa0IsR0FBRyxDQUFyQjtBQUNBQyxJQUFBQSxpQkFBaUIsR0FBRyxDQUFwQjtBQUNIOztBQUVETixFQUFBQSxrQkFBa0IsQ0FBQ2MsT0FBbkIsQ0FBMkIsVUFBQ0MsaUJBQUQsRUFBdUI7QUFDOUM7QUFDQSxRQUFJQSxpQkFBaUIsQ0FBQ04sU0FBbEIsQ0FBNEJDLE9BQTVCLEtBQXdDQyxpQkFBUUMsVUFBcEQsRUFBZ0U7QUFDNUQ7QUFDQSxVQUFJRyxpQkFBaUIsQ0FBQ04sU0FBbEIsQ0FBNEJPLEdBQWhDLEVBQXFDO0FBQ2pDWCxRQUFBQSxrQkFBa0IsSUFBSVUsaUJBQWlCLENBQUNFLEtBQWxCLENBQXdCQyxVQUF4QixHQUFxQ0gsaUJBQWlCLENBQUNFLEtBQWxCLENBQXdCRSxTQUFuRixDQURpQyxDQUM2RDs7QUFDOUZiLFFBQUFBLGlCQUFpQixJQUFJUyxpQkFBaUIsQ0FBQ0UsS0FBbEIsQ0FBd0JFLFNBQTdDLENBRmlDLENBRXVCO0FBQzNELE9BSEQsTUFHTztBQUNIZCxRQUFBQSxrQkFBa0IsSUFBSVUsaUJBQWlCLENBQUNFLEtBQWxCLENBQXdCQyxVQUF4QixHQUFxQ0gsaUJBQWlCLENBQUNFLEtBQWxCLENBQXdCRSxTQUFuRjtBQUNBYixRQUFBQSxpQkFBaUIsSUFBSVMsaUJBQWlCLENBQUNFLEtBQWxCLENBQXdCRSxTQUE3QztBQUNIO0FBQ0o7O0FBRUQsUUFBSUosaUJBQWlCLENBQUNOLFNBQWxCLENBQTRCQyxPQUE1QixLQUF3QyxXQUE1QyxFQUF5RDtBQUNyRDtBQUNBLFVBQUlLLGlCQUFpQixDQUFDTixTQUFsQixDQUE0Qk8sR0FBaEMsRUFBcUM7QUFDakNiLFFBQUFBLFFBQVEsQ0FBQ2dCLFNBQVQsSUFBc0JKLGlCQUFpQixDQUFDRSxLQUFsQixDQUF3QkMsVUFBOUMsQ0FEaUMsQ0FDeUI7QUFDN0QsT0FGRCxNQUVPO0FBQ0hmLFFBQUFBLFFBQVEsQ0FBQ2dCLFNBQVQsSUFBc0JKLGlCQUFpQixDQUFDRSxLQUFsQixDQUF3QkMsVUFBOUM7QUFDSDtBQUNKO0FBQ0osR0FyQkQ7O0FBdUJBLE1BQUlaLGlCQUFpQixLQUFLLENBQTFCLEVBQTZCO0FBQ3pCO0FBQ0FILElBQUFBLFFBQVEsQ0FBQ2UsVUFBVCxHQUFzQixDQUF0QjtBQUNILEdBSEQsTUFHTztBQUNIO0FBQ0FmLElBQUFBLFFBQVEsQ0FBQ2UsVUFBVCxHQUFzQmIsa0JBQWtCLEdBQUdDLGlCQUEzQztBQUNIOztBQUVELE1BQUksQ0FBQ0wsVUFBRCxJQUFlRSxRQUFRLENBQUNlLFVBQVQsR0FBc0IsQ0FBekMsRUFBNEM7QUFDeEM7QUFDQWYsSUFBQUEsUUFBUSxDQUFDZSxVQUFULEdBQXNCLENBQXRCO0FBQ0g7O0FBRUQsTUFBSUUsTUFBTSxDQUFDQyxFQUFQLENBQVVsQixRQUFRLENBQUNlLFVBQW5CLEVBQStCLENBQUMsQ0FBaEMsQ0FBSixFQUF3QztBQUNwQztBQUNBZixJQUFBQSxRQUFRLENBQUNlLFVBQVQsR0FBc0IsQ0FBdEI7QUFDSDs7QUFFRCxNQUFJaEIsYUFBYSxLQUFLb0IsU0FBdEIsRUFBaUM7QUFDN0JuQixJQUFBQSxRQUFRLENBQUNELGFBQVQsR0FBeUJBLGFBQXpCO0FBQ0g7O0FBR0QsU0FBT0MsUUFBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZmZWN0cyB9IGZyb20gXCIuL2RhdGFNb2RlbHMvQWZmZWN0c1wiXHJcbmltcG9ydCB7IFNjb3JlIH0gZnJvbSBcIi4vZGF0YU1vZGVscy9TY29yZVwiO1xyXG5pbXBvcnQgeyBJZCwgSUQgfSBmcm9tIFwiLi9kYXRhTW9kZWxzL0lkXCI7XHJcbmltcG9ydCB7IFNjb3JlQW5kQ2xhaW1FZGdlIH0gZnJvbSBcIi4vZGF0YU1vZGVscy9TY29yZUFuZENsYWltRWRnZVwiO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYSBuZXcgc2NvcmUgYmFzZWQgb24gdGhlIGNoaWxkIHNjb3JlcyBhbmQgaG93IHRoYXkgd3JlIGxpbmtlZCAoYnkgZWRnZWQpIHRoZSBjbGFpbSB0aGlzIHNjb3JlIGlzIGZvci5cclxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB0YWtlIGludG8gYWNjb3VudCBzY29wZXMuXHJcbiAqIFRoZSBjYWxsZXIgb2YgdGhpcyBmdWN0aW9uIHNob3VsZCBvbmx5IHB1dCB0aGUgY2hpbGRyZW4gYW5kIHNjb3JlcyBpbnRvIHRoaXMgYXJyYXkgdGhhdCBhcmUgd2l0aGluIHNjb3BlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVNjb3JlKFxyXG4gICAgLyoqQW4gYXJyYXkgb2YgZ3JvdXBlZCBlZGdlcyBhbmQgY2xhaW1zKi9cclxuICAgIHNjb3JlQW5kQ2xhaW1FZGdlczogU2NvcmVBbmRDbGFpbUVkZ2VbXSA9IFtdLFxyXG4gICAgLy8gLyoqIEFuIGFycmF5IG9mIHNjb3JlcyBmb3IgY2hpbGQgY2xhaW1zIGxpbmtlZCB0byB0aGUgY2xhaW0gdGhpcyBzY29yZSBpcyBmb3IuICovXHJcbiAgICAvLyBjaGlsZFNjb3JlczogU2NvcmVbXSA9IFtdLFxyXG4gICAgLy8gLyoqIElzIHRoaXMgc2NvcmUgcHJvIG9mIGl0J3MgcGFyZW50IChvciBmYWxzZSBpZiBpdCBpcyBhIGNvbikgKi9cclxuICAgIC8vIHBybyA9IHRydWUsXHJcbiAgICAvLyAvKiogSG93IGRvZXMgdGhpcyBzY29yZSBhZmZlY3QgaXQncyBwYXJlbnQgKi9cclxuICAgIC8vIGFmZmVjdHMgPSBBZmZlY3RzLkNvbmZpZGVuY2UsXHJcbiAgICAvLyAvKiogQ2FuIHRoaXMgc2NvcmUgZmFsbCBiZWxvdyBhIDAgY29uZmlkZW5jZSAoaGF2ZSBhIG5lZ2F0aXZlIGNvbmZpZGVuY2UpICovXHJcbiAgICByZXZlcnNhYmxlID0gdHJ1ZSxcclxuICAgIHNvdXJjZUNsYWltSWQ6IElkID0gSUQoXCJcIiksXHJcbikge1xyXG4gICAgY29uc3QgbmV3U2NvcmU6IFNjb3JlID0gbmV3IFNjb3JlKCk7XHJcbiAgICAvLyBuZXdTY29yZS5hZmZlY3RzID0gYWZmZWN0cztcclxuICAgIC8vIG5ld1Njb3JlLnJldmVyc2FibGUgPSByZXZlcnNhYmxlXHJcbiAgICBsZXQgY2hpbGRyZW5Db25maWRlbmNlID0gMFxyXG4gICAgbGV0IGNoaWxkcmVuUmVsZXZhbmNlID0gMFxyXG5cclxuICAgIGlmIChzY29yZUFuZENsYWltRWRnZXMuZmlsdGVyKGMgPT4gYy5jbGFpbUVkZ2UuYWZmZWN0cyA9PT0gQWZmZWN0cy5Db25maWRlbmNlKS5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGNoaWxkcmVuIHRoYXQgYWZmZWN0IHRoZSBjb25maWRlbmNlIG9mIHRoZSBjbGFpbVxyXG4gICAgICAgIC8vIHRoZW4gYXNzdW1lIHRoZSBjbGFpbSBpcyAxMDAlIGNvbmZpZGVudCBhbmQgc3RhcnQgc3RyZW5ndGggYW5kIHJlbGV2YW5jZSBhdCAxXHJcbiAgICAgICAgY2hpbGRyZW5Db25maWRlbmNlID0gMTtcclxuICAgICAgICBjaGlsZHJlblJlbGV2YW5jZSA9IDE7XHJcbiAgICB9XHJcblxyXG4gICAgc2NvcmVBbmRDbGFpbUVkZ2VzLmZvckVhY2goKHNjb3JlQW5kQ2xhaW1FZGdlKSA9PiB7XHJcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBjaGlsZCBzY29yZXMgYW5kIGRldGVybWluZSB0aGUgc2NvcmUgb2YgdGhlIHBhcmVudC5cclxuICAgICAgICBpZiAoc2NvcmVBbmRDbGFpbUVkZ2UuY2xhaW1FZGdlLmFmZmVjdHMgPT09IEFmZmVjdHMuQ29uZmlkZW5jZSkge1xyXG4gICAgICAgICAgICAvLyBQcm9jZXNzIGVkZ2VzIHRoYXQgYWZmZWN0IGNvbmZpZGVuY2VcclxuICAgICAgICAgICAgaWYgKHNjb3JlQW5kQ2xhaW1FZGdlLmNsYWltRWRnZS5wcm8pIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuQ29uZmlkZW5jZSArPSBzY29yZUFuZENsYWltRWRnZS5zY29yZS5jb25maWRlbmNlICogc2NvcmVBbmRDbGFpbUVkZ2Uuc2NvcmUucmVsZXZhbmNlOyAvLyBBZGQgdXAgYWxsIHRoZSBzdHJlbmd0aCBvZiB0aGUgY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuUmVsZXZhbmNlICs9IHNjb3JlQW5kQ2xhaW1FZGdlLnNjb3JlLnJlbGV2YW5jZTsgLy9BZGQgdXAgdGhlIHJlbGV2YW5jZSBzZXBhcmF0ZWx5IHNvIHdlIGNhbiBkbyBhIHdlaWdodGVkIGFnZXJhZ2UgbGF0ZXJcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuQ29uZmlkZW5jZSAtPSBzY29yZUFuZENsYWltRWRnZS5zY29yZS5jb25maWRlbmNlICogc2NvcmVBbmRDbGFpbUVkZ2Uuc2NvcmUucmVsZXZhbmNlO1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5SZWxldmFuY2UgKz0gc2NvcmVBbmRDbGFpbUVkZ2Uuc2NvcmUucmVsZXZhbmNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2NvcmVBbmRDbGFpbUVkZ2UuY2xhaW1FZGdlLmFmZmVjdHMgPT09ICdyZWxldmFuY2UnKSB7XHJcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgUmVsZXZhbmNlIGNoaWxkIGNsYWltc1xyXG4gICAgICAgICAgICBpZiAoc2NvcmVBbmRDbGFpbUVkZ2UuY2xhaW1FZGdlLnBybykge1xyXG4gICAgICAgICAgICAgICAgbmV3U2NvcmUucmVsZXZhbmNlICs9IHNjb3JlQW5kQ2xhaW1FZGdlLnNjb3JlLmNvbmZpZGVuY2U7IC8vIEFkZCB1cCBhbGwgdGhlIHN0cmVuZ3RoIG9mIHRoZSBjaGlsZHJlblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV3U2NvcmUucmVsZXZhbmNlIC09IHNjb3JlQW5kQ2xhaW1FZGdlLnNjb3JlLmNvbmZpZGVuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoY2hpbGRyZW5SZWxldmFuY2UgPT09IDApIHtcclxuICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgZGl2aXNpb24gYnkgemVyb1xyXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvL0NhbGN1bGF0ZSB0aGUgc2NvcmVcclxuICAgICAgICBuZXdTY29yZS5jb25maWRlbmNlID0gY2hpbGRyZW5Db25maWRlbmNlIC8gY2hpbGRyZW5SZWxldmFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFyZXZlcnNhYmxlICYmIG5ld1Njb3JlLmNvbmZpZGVuY2UgPCAwKSB7XHJcbiAgICAgICAgLy8gSWYgaXQgaXMgbm90IHJldmVyc2FibGUgdGhlbiBkbyBub3QgbGV0IGl0IGdvIG5lZ2F0aXZlXHJcbiAgICAgICAgbmV3U2NvcmUuY29uZmlkZW5jZSA9IDBcclxuICAgIH1cclxuXHJcbiAgICBpZiAoT2JqZWN0LmlzKG5ld1Njb3JlLmNvbmZpZGVuY2UsIC0wKSkge1xyXG4gICAgICAgIC8vIFByb3RlY3QgYWdhaW5zdCBuZWdhdGl2ZSB6ZXJvIFxyXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzb3VyY2VDbGFpbUlkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBuZXdTY29yZS5zb3VyY2VDbGFpbUlkID0gc291cmNlQ2xhaW1JZFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZXR1cm4gbmV3U2NvcmU7XHJcbn1cclxuXHJcbiJdfQ==
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScore = calculateScore;

/**
 * Calculates a new score based on the child scores passed in.
 */
function calculateScore({
  childScores = [],
  reversible = true
} = {}) {
  const newScore = {
    confidence: 1,
    relevance: 1
  };
  let childrenConfidence = 0;
  let childrenRelevance = 0;

  if (childScores.filter(s => s.affects === 'confidence').length < 1) {
    // If there are no children that affect the confidence of the claim
    // then assume the claim is 100% confident and start strength and relevance at 1
    childrenConfidence = 1;
    childrenRelevance = 1;
  }

  childScores.forEach(score => {
    //Ensure calculations for non-reversible scores don't allow the confident to be below 0
    let confidence = score.confidence;

    if (!score.reversible && score.confidence < 0) {
      confidence = 0;
    }

    debugger; // Loop through the child scores and determine the score of the parent.

    if (score.affects === 'confidence') {
      //calculate the reduction of the relevance bease on the distance of the confidence from zero
      //TODO: maybe add a flag on the claimEdge to be able to turn this off in the case of a claim that should draw the parent towards zero
      //Like "This claim should require supporting evidence"
      let confidenceRelevanceAdjustment = 1;
      confidenceRelevanceAdjustment = Math.abs(confidence); // Process edges that affect confidence

      if (score.pro) {
        childrenConfidence += confidence * score.relevance * confidenceRelevanceAdjustment; // Add up all the strength of the children

        childrenRelevance += score.relevance * confidenceRelevanceAdjustment; //Add up the relevance separately so we can do a weighted agerage later
      } else {
        childrenConfidence -= confidence * score.relevance * confidenceRelevanceAdjustment;
        childrenRelevance += score.relevance * confidenceRelevanceAdjustment;
      }
    }

    if (score.affects === 'relevance') {
      // Process Relevance child claims
      if (newScore.relevance == undefined) {
        newScore.relevance = 1;
      }

      if (score.pro) {
        newScore.relevance += confidence; // Add up all the strength of the children
      } else {
        newScore.relevance -= confidence / 2;
      }
    }
  });

  if (childrenRelevance === 0) {
    // Protect against division by zero
    newScore.confidence = 0;
  } else {
    //Calculate the score
    newScore.confidence = childrenConfidence / childrenRelevance;
  }

  if (Object.is(newScore.confidence, -0)) {
    // Protect against negative zero 
    newScore.confidence = 0;
  }

  return newScore;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWxjdWxhdGVTY29yZS50cyJdLCJuYW1lcyI6WyJjYWxjdWxhdGVTY29yZSIsImNoaWxkU2NvcmVzIiwicmV2ZXJzaWJsZSIsIm5ld1Njb3JlIiwiY29uZmlkZW5jZSIsInJlbGV2YW5jZSIsImNoaWxkcmVuQ29uZmlkZW5jZSIsImNoaWxkcmVuUmVsZXZhbmNlIiwiZmlsdGVyIiwicyIsImFmZmVjdHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwic2NvcmUiLCJjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudCIsIk1hdGgiLCJhYnMiLCJwcm8iLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJpcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVNBOzs7QUFHTyxTQUFTQSxjQUFULENBQXdCO0FBQUVDLEVBQUFBLFdBQVcsR0FBRyxFQUFoQjtBQUFvQkMsRUFBQUEsVUFBVSxHQUFHO0FBQWpDLElBSzNCLEVBTEcsRUFNVztBQUVkLFFBQU1DLFFBQXdCLEdBQUc7QUFDN0JDLElBQUFBLFVBQVUsRUFBRSxDQURpQjtBQUU3QkMsSUFBQUEsU0FBUyxFQUFFO0FBRmtCLEdBQWpDO0FBS0EsTUFBSUMsa0JBQWtCLEdBQUcsQ0FBekI7QUFDQSxNQUFJQyxpQkFBaUIsR0FBRyxDQUF4Qjs7QUFFQSxNQUFJTixXQUFXLENBQUNPLE1BQVosQ0FBbUJDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxPQUFGLEtBQWMsWUFBdEMsRUFBb0RDLE1BQXBELEdBQTZELENBQWpFLEVBQW9FO0FBQ2hFO0FBQ0E7QUFDQUwsSUFBQUEsa0JBQWtCLEdBQUcsQ0FBckI7QUFDQUMsSUFBQUEsaUJBQWlCLEdBQUcsQ0FBcEI7QUFDSDs7QUFFRE4sRUFBQUEsV0FBVyxDQUFDVyxPQUFaLENBQW9CQyxLQUFLLElBQUk7QUFDekI7QUFDQSxRQUFJVCxVQUFVLEdBQUdTLEtBQUssQ0FBQ1QsVUFBdkI7O0FBQ0EsUUFBSSxDQUFDUyxLQUFLLENBQUNYLFVBQVAsSUFBcUJXLEtBQUssQ0FBQ1QsVUFBTixHQUFtQixDQUE1QyxFQUErQztBQUMzQ0EsTUFBQUEsVUFBVSxHQUFHLENBQWI7QUFDSDs7QUFDVCxhQU5pQyxDQU96Qjs7QUFDQSxRQUFJUyxLQUFLLENBQUNILE9BQU4sS0FBa0IsWUFBdEIsRUFBb0M7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsVUFBSUksNkJBQTZCLEdBQUcsQ0FBcEM7QUFDQUEsTUFBQUEsNkJBQTZCLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTWixVQUFULENBQWhDLENBTmdDLENBUWhDOztBQUNBLFVBQUlTLEtBQUssQ0FBQ0ksR0FBVixFQUFlO0FBQ1hYLFFBQUFBLGtCQUFrQixJQUFJRixVQUFVLEdBQUdTLEtBQUssQ0FBQ1IsU0FBbkIsR0FBK0JTLDZCQUFyRCxDQURXLENBQ3lFOztBQUNwRlAsUUFBQUEsaUJBQWlCLElBQUlNLEtBQUssQ0FBQ1IsU0FBTixHQUFrQlMsNkJBQXZDLENBRlcsQ0FFMkQ7QUFDekUsT0FIRCxNQUdPO0FBQ0hSLFFBQUFBLGtCQUFrQixJQUFJRixVQUFVLEdBQUdTLEtBQUssQ0FBQ1IsU0FBbkIsR0FBK0JTLDZCQUFyRDtBQUNBUCxRQUFBQSxpQkFBaUIsSUFBSU0sS0FBSyxDQUFDUixTQUFOLEdBQWtCUyw2QkFBdkM7QUFDSDtBQUNKOztBQUVELFFBQUlELEtBQUssQ0FBQ0gsT0FBTixLQUFrQixXQUF0QixFQUFtQztBQUMvQjtBQUNBLFVBQUlQLFFBQVEsQ0FBQ0UsU0FBVCxJQUFzQmEsU0FBMUIsRUFBcUM7QUFDakNmLFFBQUFBLFFBQVEsQ0FBQ0UsU0FBVCxHQUFxQixDQUFyQjtBQUNIOztBQUNELFVBQUlRLEtBQUssQ0FBQ0ksR0FBVixFQUFlO0FBQ1hkLFFBQUFBLFFBQVEsQ0FBQ0UsU0FBVCxJQUFzQkQsVUFBdEIsQ0FEVyxDQUN1QjtBQUNyQyxPQUZELE1BRU87QUFDSEQsUUFBQUEsUUFBUSxDQUFDRSxTQUFULElBQXNCRCxVQUFVLEdBQUcsQ0FBbkM7QUFDSDtBQUNKO0FBQ0osR0FyQ0Q7O0FBdUNBLE1BQUlHLGlCQUFpQixLQUFLLENBQTFCLEVBQTZCO0FBQ3pCO0FBQ0FKLElBQUFBLFFBQVEsQ0FBQ0MsVUFBVCxHQUFzQixDQUF0QjtBQUNILEdBSEQsTUFHTztBQUNIO0FBQ0FELElBQUFBLFFBQVEsQ0FBQ0MsVUFBVCxHQUFzQkUsa0JBQWtCLEdBQUdDLGlCQUEzQztBQUNIOztBQUVELE1BQUlZLE1BQU0sQ0FBQ0MsRUFBUCxDQUFVakIsUUFBUSxDQUFDQyxVQUFuQixFQUErQixDQUFDLENBQWhDLENBQUosRUFBd0M7QUFDcEM7QUFDQUQsSUFBQUEsUUFBUSxDQUFDQyxVQUFULEdBQXNCLENBQXRCO0FBQ0g7O0FBRUQsU0FBT0QsUUFBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaVNjb3JlLCBpU2NvcmVGcmFnbWVudCB9IGZyb20gXCIuL2RhdGFNb2RlbHMvU2NvcmVcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgaUNhbGN1bGF0ZVNjb3JlIHtcclxuICAgICh7IGNoaWxkU2NvcmVzIH06IHtcclxuICAgICAgICAvKiogQW4gYXJyYXkgb2YgZ3JvdXBlZCBlZGdlcyBhbmQgY2xhaW1zKi9cclxuICAgICAgICBjaGlsZFNjb3Jlcz86IGlTY29yZVtdO1xyXG4gICAgfSk6IGlTY29yZUZyYWdtZW50XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGEgbmV3IHNjb3JlIGJhc2VkIG9uIHRoZSBjaGlsZCBzY29yZXMgcGFzc2VkIGluLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVNjb3JlKHsgY2hpbGRTY29yZXMgPSBbXSwgcmV2ZXJzaWJsZSA9IHRydWUgfToge1xyXG4gICAgLyoqIEFuIGFycmF5IG9mIGdyb3VwZWQgZWRnZXMgYW5kIGNsYWltcyovXHJcbiAgICBjaGlsZFNjb3Jlcz86IGlTY29yZVtdO1xyXG4gICAgLyoqIENhbiB0aGlzIHNjb3JlIGZhbGwgYmVsb3cgYSAwIGNvbmZpZGVuY2UgKGhhdmUgYSBuZWdhdGl2ZSBjb25maWRlbmNlKSAqL1xyXG4gICAgcmV2ZXJzaWJsZT86IGJvb2xlYW5cclxufSA9IHt9LFxyXG4pOiBpU2NvcmVGcmFnbWVudCB7XHJcblxyXG4gICAgY29uc3QgbmV3U2NvcmU6IGlTY29yZUZyYWdtZW50ID0ge1xyXG4gICAgICAgIGNvbmZpZGVuY2U6IDEsXHJcbiAgICAgICAgcmVsZXZhbmNlOiAxLFxyXG4gICAgfTtcclxuXHJcbiAgICBsZXQgY2hpbGRyZW5Db25maWRlbmNlID0gMFxyXG4gICAgbGV0IGNoaWxkcmVuUmVsZXZhbmNlID0gMFxyXG5cclxuICAgIGlmIChjaGlsZFNjb3Jlcy5maWx0ZXIocyA9PiBzLmFmZmVjdHMgPT09ICdjb25maWRlbmNlJykubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBjaGlsZHJlbiB0aGF0IGFmZmVjdCB0aGUgY29uZmlkZW5jZSBvZiB0aGUgY2xhaW1cclxuICAgICAgICAvLyB0aGVuIGFzc3VtZSB0aGUgY2xhaW0gaXMgMTAwJSBjb25maWRlbnQgYW5kIHN0YXJ0IHN0cmVuZ3RoIGFuZCByZWxldmFuY2UgYXQgMVxyXG4gICAgICAgIGNoaWxkcmVuQ29uZmlkZW5jZSA9IDE7XHJcbiAgICAgICAgY2hpbGRyZW5SZWxldmFuY2UgPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIGNoaWxkU2NvcmVzLmZvckVhY2goc2NvcmUgPT4ge1xyXG4gICAgICAgIC8vRW5zdXJlIGNhbGN1bGF0aW9ucyBmb3Igbm9uLXJldmVyc2libGUgc2NvcmVzIGRvbid0IGFsbG93IHRoZSBjb25maWRlbnQgdG8gYmUgYmVsb3cgMFxyXG4gICAgICAgIGxldCBjb25maWRlbmNlID0gc2NvcmUuY29uZmlkZW5jZVxyXG4gICAgICAgIGlmICghc2NvcmUucmV2ZXJzaWJsZSAmJiBzY29yZS5jb25maWRlbmNlIDwgMCkge1xyXG4gICAgICAgICAgICBjb25maWRlbmNlID0gMFxyXG4gICAgICAgIH1cclxuZGVidWdnZXJcclxuICAgICAgICAvLyBMb29wIHRocm91Z2ggdGhlIGNoaWxkIHNjb3JlcyBhbmQgZGV0ZXJtaW5lIHRoZSBzY29yZSBvZiB0aGUgcGFyZW50LlxyXG4gICAgICAgIGlmIChzY29yZS5hZmZlY3RzID09PSAnY29uZmlkZW5jZScpIHtcclxuXHJcbiAgICAgICAgICAgIC8vY2FsY3VsYXRlIHRoZSByZWR1Y3Rpb24gb2YgdGhlIHJlbGV2YW5jZSBiZWFzZSBvbiB0aGUgZGlzdGFuY2Ugb2YgdGhlIGNvbmZpZGVuY2UgZnJvbSB6ZXJvXHJcbiAgICAgICAgICAgIC8vVE9ETzogbWF5YmUgYWRkIGEgZmxhZyBvbiB0aGUgY2xhaW1FZGdlIHRvIGJlIGFibGUgdG8gdHVybiB0aGlzIG9mZiBpbiB0aGUgY2FzZSBvZiBhIGNsYWltIHRoYXQgc2hvdWxkIGRyYXcgdGhlIHBhcmVudCB0b3dhcmRzIHplcm9cclxuICAgICAgICAgICAgLy9MaWtlIFwiVGhpcyBjbGFpbSBzaG91bGQgcmVxdWlyZSBzdXBwb3J0aW5nIGV2aWRlbmNlXCJcclxuICAgICAgICAgICAgbGV0IGNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50ID0gMVxyXG4gICAgICAgICAgICBjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudCA9IE1hdGguYWJzKGNvbmZpZGVuY2UpXHJcblxyXG4gICAgICAgICAgICAvLyBQcm9jZXNzIGVkZ2VzIHRoYXQgYWZmZWN0IGNvbmZpZGVuY2VcclxuICAgICAgICAgICAgaWYgKHNjb3JlLnBybykge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5Db25maWRlbmNlICs9IGNvbmZpZGVuY2UgKiBzY29yZS5yZWxldmFuY2UgKiBjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudDsgLy8gQWRkIHVwIGFsbCB0aGUgc3RyZW5ndGggb2YgdGhlIGNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlblJlbGV2YW5jZSArPSBzY29yZS5yZWxldmFuY2UgKiBjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudDsgLy9BZGQgdXAgdGhlIHJlbGV2YW5jZSBzZXBhcmF0ZWx5IHNvIHdlIGNhbiBkbyBhIHdlaWdodGVkIGFnZXJhZ2UgbGF0ZXJcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuQ29uZmlkZW5jZSAtPSBjb25maWRlbmNlICogc2NvcmUucmVsZXZhbmNlICogY29uZmlkZW5jZVJlbGV2YW5jZUFkanVzdG1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlblJlbGV2YW5jZSArPSBzY29yZS5yZWxldmFuY2UgKiBjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNjb3JlLmFmZmVjdHMgPT09ICdyZWxldmFuY2UnKSB7XHJcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgUmVsZXZhbmNlIGNoaWxkIGNsYWltc1xyXG4gICAgICAgICAgICBpZiAobmV3U2NvcmUucmVsZXZhbmNlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgbmV3U2NvcmUucmVsZXZhbmNlID0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc2NvcmUucHJvKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdTY29yZS5yZWxldmFuY2UgKz0gY29uZmlkZW5jZTsgLy8gQWRkIHVwIGFsbCB0aGUgc3RyZW5ndGggb2YgdGhlIGNoaWxkcmVuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdTY29yZS5yZWxldmFuY2UgLT0gY29uZmlkZW5jZSAvIDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoY2hpbGRyZW5SZWxldmFuY2UgPT09IDApIHtcclxuICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgZGl2aXNpb24gYnkgemVyb1xyXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvL0NhbGN1bGF0ZSB0aGUgc2NvcmVcclxuICAgICAgICBuZXdTY29yZS5jb25maWRlbmNlID0gY2hpbGRyZW5Db25maWRlbmNlIC8gY2hpbGRyZW5SZWxldmFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKE9iamVjdC5pcyhuZXdTY29yZS5jb25maWRlbmNlLCAtMCkpIHtcclxuICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgbmVnYXRpdmUgemVybyBcclxuICAgICAgICBuZXdTY29yZS5jb25maWRlbmNlID0gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3U2NvcmU7XHJcbn1cclxuXHJcbiJdfQ==
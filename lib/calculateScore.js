"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScore = calculateScore;

var _Affects = require("./dataModels/Affects");

var _Score = require("./dataModels/Score");

var _Id = require("./dataModels/Id");

/**
 * Calculates a new score based on the child scores and how thay wre linked (by edged) the claim this score is for.
 * This function does not take into account scopes.
 * The caller of this fuction should only put the children and scores into this array that are within scope.
 */
function calculateScore() {
  var scoreAndClaimEdges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var reversable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var sourceClaimId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, _Id.ID)("");
  var newScore = new _Score.Score(); // newScore.affects = affects;
  // newScore.reversable = reversable

  var childrenConfidence = 0;
  var childrenRelevance = 0;

  if (scoreAndClaimEdges.filter(function (c) {
    return c.claimEdge.affects === _Affects.Affects.Confidence;
  }).length < 1) {
    // If there are no children that affect the confidence of the claim
    // then assume the claim is 100% confident and start strength and relevance at 1
    childrenConfidence = 1;
    childrenRelevance = 1;
  }

  scoreAndClaimEdges.forEach(function (scoreAndClaimEdge) {
    // Loop through the child scores and determine the score of the parent.
    if (scoreAndClaimEdge.claimEdge.affects === _Affects.Affects.Confidence) {
      // Process edges that affect confidence
      if (scoreAndClaimEdge.claimEdge.pro) {
        childrenConfidence += scoreAndClaimEdge.score.confidence * scoreAndClaimEdge.score.relevance; // Add up all the strength of the children

        childrenRelevance += scoreAndClaimEdge.score.relevance; //Add up the relevance separately so we can do a weighted agerage later
      } else {
        childrenConfidence -= scoreAndClaimEdge.score.confidence * scoreAndClaimEdge.score.relevance;
        childrenRelevance += scoreAndClaimEdge.score.relevance;
      }
    }

    if (scoreAndClaimEdge.claimEdge.affects === 'relevance') {
      // Process Relevance child claims
      if (scoreAndClaimEdge.claimEdge.pro) {
        newScore.relevance += scoreAndClaimEdge.score.confidence; // Add up all the strength of the children
      } else {
        newScore.relevance -= scoreAndClaimEdge.score.confidence;
      }
    }
  });

  if (childrenRelevance === 0) {
    // Protect against division by zero
    newScore.confidence = 0;
  } else {
    //Calculate the score
    newScore.confidence = childrenConfidence / childrenRelevance;
  }

  if (!reversable && newScore.confidence < 0) {
    // If it is not reversable then do not let it go negative
    newScore.confidence = 0;
  }

  if (Object.is(newScore.confidence, -0)) {
    // Protect against negative zero 
    newScore.confidence = 0;
  }

  if (sourceClaimId !== undefined) {
    newScore.sourceClaimId = sourceClaimId;
  }

  return newScore;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWxjdWxhdGVTY29yZS50cyJdLCJuYW1lcyI6WyJjYWxjdWxhdGVTY29yZSIsInNjb3JlQW5kQ2xhaW1FZGdlcyIsInJldmVyc2FibGUiLCJzb3VyY2VDbGFpbUlkIiwibmV3U2NvcmUiLCJTY29yZSIsImNoaWxkcmVuQ29uZmlkZW5jZSIsImNoaWxkcmVuUmVsZXZhbmNlIiwiZmlsdGVyIiwiYyIsImNsYWltRWRnZSIsImFmZmVjdHMiLCJBZmZlY3RzIiwiQ29uZmlkZW5jZSIsImxlbmd0aCIsImZvckVhY2giLCJzY29yZUFuZENsYWltRWRnZSIsInBybyIsInNjb3JlIiwiY29uZmlkZW5jZSIsInJlbGV2YW5jZSIsIk9iamVjdCIsImlzIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0E7Ozs7O0FBS08sU0FBU0EsY0FBVCxHQVlMO0FBQUEsTUFWRUMsa0JBVUYsdUVBVjRDLEVBVTVDO0FBQUEsTUFGRUMsVUFFRix1RUFGZSxJQUVmO0FBQUEsTUFERUMsYUFDRix1RUFEc0IsWUFBRyxFQUFILENBQ3RCO0FBQ0UsTUFBTUMsUUFBZSxHQUFHLElBQUlDLFlBQUosRUFBeEIsQ0FERixDQUVFO0FBQ0E7O0FBQ0EsTUFBSUMsa0JBQWtCLEdBQUcsQ0FBekI7QUFDQSxNQUFJQyxpQkFBaUIsR0FBRyxDQUF4Qjs7QUFFQSxNQUFJTixrQkFBa0IsQ0FBQ08sTUFBbkIsQ0FBMEIsVUFBQUMsQ0FBQztBQUFBLFdBQUlBLENBQUMsQ0FBQ0MsU0FBRixDQUFZQyxPQUFaLEtBQXdCQyxpQkFBUUMsVUFBcEM7QUFBQSxHQUEzQixFQUEyRUMsTUFBM0UsR0FBb0YsQ0FBeEYsRUFBMkY7QUFDdkY7QUFDQTtBQUNBUixJQUFBQSxrQkFBa0IsR0FBRyxDQUFyQjtBQUNBQyxJQUFBQSxpQkFBaUIsR0FBRyxDQUFwQjtBQUNIOztBQUVETixFQUFBQSxrQkFBa0IsQ0FBQ2MsT0FBbkIsQ0FBMkIsVUFBQ0MsaUJBQUQsRUFBdUI7QUFDOUM7QUFDQSxRQUFJQSxpQkFBaUIsQ0FBQ04sU0FBbEIsQ0FBNEJDLE9BQTVCLEtBQXdDQyxpQkFBUUMsVUFBcEQsRUFBZ0U7QUFDNUQ7QUFDQSxVQUFJRyxpQkFBaUIsQ0FBQ04sU0FBbEIsQ0FBNEJPLEdBQWhDLEVBQXFDO0FBQ2pDWCxRQUFBQSxrQkFBa0IsSUFBSVUsaUJBQWlCLENBQUNFLEtBQWxCLENBQXdCQyxVQUF4QixHQUFxQ0gsaUJBQWlCLENBQUNFLEtBQWxCLENBQXdCRSxTQUFuRixDQURpQyxDQUM2RDs7QUFDOUZiLFFBQUFBLGlCQUFpQixJQUFJUyxpQkFBaUIsQ0FBQ0UsS0FBbEIsQ0FBd0JFLFNBQTdDLENBRmlDLENBRXVCO0FBQzNELE9BSEQsTUFHTztBQUNIZCxRQUFBQSxrQkFBa0IsSUFBSVUsaUJBQWlCLENBQUNFLEtBQWxCLENBQXdCQyxVQUF4QixHQUFxQ0gsaUJBQWlCLENBQUNFLEtBQWxCLENBQXdCRSxTQUFuRjtBQUNBYixRQUFBQSxpQkFBaUIsSUFBSVMsaUJBQWlCLENBQUNFLEtBQWxCLENBQXdCRSxTQUE3QztBQUNIO0FBQ0o7O0FBRUQsUUFBSUosaUJBQWlCLENBQUNOLFNBQWxCLENBQTRCQyxPQUE1QixLQUF3QyxXQUE1QyxFQUF5RDtBQUNyRDtBQUNBLFVBQUlLLGlCQUFpQixDQUFDTixTQUFsQixDQUE0Qk8sR0FBaEMsRUFBcUM7QUFDakNiLFFBQUFBLFFBQVEsQ0FBQ2dCLFNBQVQsSUFBc0JKLGlCQUFpQixDQUFDRSxLQUFsQixDQUF3QkMsVUFBOUMsQ0FEaUMsQ0FDeUI7QUFDN0QsT0FGRCxNQUVPO0FBQ0hmLFFBQUFBLFFBQVEsQ0FBQ2dCLFNBQVQsSUFBc0JKLGlCQUFpQixDQUFDRSxLQUFsQixDQUF3QkMsVUFBOUM7QUFDSDtBQUNKO0FBQ0osR0FyQkQ7O0FBdUJBLE1BQUlaLGlCQUFpQixLQUFLLENBQTFCLEVBQTZCO0FBQ3pCO0FBQ0FILElBQUFBLFFBQVEsQ0FBQ2UsVUFBVCxHQUFzQixDQUF0QjtBQUNILEdBSEQsTUFHTztBQUNIO0FBQ0FmLElBQUFBLFFBQVEsQ0FBQ2UsVUFBVCxHQUFzQmIsa0JBQWtCLEdBQUdDLGlCQUEzQztBQUNIOztBQUVELE1BQUksQ0FBQ0wsVUFBRCxJQUFlRSxRQUFRLENBQUNlLFVBQVQsR0FBc0IsQ0FBekMsRUFBNEM7QUFDeEM7QUFDQWYsSUFBQUEsUUFBUSxDQUFDZSxVQUFULEdBQXNCLENBQXRCO0FBQ0g7O0FBRUQsTUFBSUUsTUFBTSxDQUFDQyxFQUFQLENBQVVsQixRQUFRLENBQUNlLFVBQW5CLEVBQStCLENBQUMsQ0FBaEMsQ0FBSixFQUF3QztBQUNwQztBQUNBZixJQUFBQSxRQUFRLENBQUNlLFVBQVQsR0FBc0IsQ0FBdEI7QUFDSDs7QUFFRCxNQUFJaEIsYUFBYSxLQUFLb0IsU0FBdEIsRUFBaUM7QUFDN0JuQixJQUFBQSxRQUFRLENBQUNELGFBQVQsR0FBeUJBLGFBQXpCO0FBQ0g7O0FBR0QsU0FBT0MsUUFBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZmZWN0cyB9IGZyb20gXCIuL2RhdGFNb2RlbHMvQWZmZWN0c1wiXG5pbXBvcnQgeyBTY29yZSB9IGZyb20gXCIuL2RhdGFNb2RlbHMvU2NvcmVcIjtcbmltcG9ydCB7IElkLCBJRCB9IGZyb20gXCIuL2RhdGFNb2RlbHMvSWRcIjtcbmltcG9ydCB7IFNjb3JlQW5kQ2xhaW1FZGdlIH0gZnJvbSBcIi4vZGF0YU1vZGVscy9TY29yZUFuZENsYWltRWRnZVwiO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSBuZXcgc2NvcmUgYmFzZWQgb24gdGhlIGNoaWxkIHNjb3JlcyBhbmQgaG93IHRoYXkgd3JlIGxpbmtlZCAoYnkgZWRnZWQpIHRoZSBjbGFpbSB0aGlzIHNjb3JlIGlzIGZvci5cbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgc2NvcGVzLlxuICogVGhlIGNhbGxlciBvZiB0aGlzIGZ1Y3Rpb24gc2hvdWxkIG9ubHkgcHV0IHRoZSBjaGlsZHJlbiBhbmQgc2NvcmVzIGludG8gdGhpcyBhcnJheSB0aGF0IGFyZSB3aXRoaW4gc2NvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVTY29yZShcbiAgICAvKipBbiBhcnJheSBvZiBncm91cGVkIGVkZ2VzIGFuZCBjbGFpbXMqL1xuICAgIHNjb3JlQW5kQ2xhaW1FZGdlczogU2NvcmVBbmRDbGFpbUVkZ2VbXSA9IFtdLFxuICAgIC8vIC8qKiBBbiBhcnJheSBvZiBzY29yZXMgZm9yIGNoaWxkIGNsYWltcyBsaW5rZWQgdG8gdGhlIGNsYWltIHRoaXMgc2NvcmUgaXMgZm9yLiAqL1xuICAgIC8vIGNoaWxkU2NvcmVzOiBTY29yZVtdID0gW10sXG4gICAgLy8gLyoqIElzIHRoaXMgc2NvcmUgcHJvIG9mIGl0J3MgcGFyZW50IChvciBmYWxzZSBpZiBpdCBpcyBhIGNvbikgKi9cbiAgICAvLyBwcm8gPSB0cnVlLFxuICAgIC8vIC8qKiBIb3cgZG9lcyB0aGlzIHNjb3JlIGFmZmVjdCBpdCdzIHBhcmVudCAqL1xuICAgIC8vIGFmZmVjdHMgPSBBZmZlY3RzLkNvbmZpZGVuY2UsXG4gICAgLy8gLyoqIENhbiB0aGlzIHNjb3JlIGZhbGwgYmVsb3cgYSAwIGNvbmZpZGVuY2UgKGhhdmUgYSBuZWdhdGl2ZSBjb25maWRlbmNlKSAqL1xuICAgIHJldmVyc2FibGUgPSB0cnVlLFxuICAgIHNvdXJjZUNsYWltSWQ6IElkID0gSUQoXCJcIiksXG4pIHtcbiAgICBjb25zdCBuZXdTY29yZTogU2NvcmUgPSBuZXcgU2NvcmUoKTtcbiAgICAvLyBuZXdTY29yZS5hZmZlY3RzID0gYWZmZWN0cztcbiAgICAvLyBuZXdTY29yZS5yZXZlcnNhYmxlID0gcmV2ZXJzYWJsZVxuICAgIGxldCBjaGlsZHJlbkNvbmZpZGVuY2UgPSAwXG4gICAgbGV0IGNoaWxkcmVuUmVsZXZhbmNlID0gMFxuXG4gICAgaWYgKHNjb3JlQW5kQ2xhaW1FZGdlcy5maWx0ZXIoYyA9PiBjLmNsYWltRWRnZS5hZmZlY3RzID09PSBBZmZlY3RzLkNvbmZpZGVuY2UpLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGNoaWxkcmVuIHRoYXQgYWZmZWN0IHRoZSBjb25maWRlbmNlIG9mIHRoZSBjbGFpbVxuICAgICAgICAvLyB0aGVuIGFzc3VtZSB0aGUgY2xhaW0gaXMgMTAwJSBjb25maWRlbnQgYW5kIHN0YXJ0IHN0cmVuZ3RoIGFuZCByZWxldmFuY2UgYXQgMVxuICAgICAgICBjaGlsZHJlbkNvbmZpZGVuY2UgPSAxO1xuICAgICAgICBjaGlsZHJlblJlbGV2YW5jZSA9IDE7XG4gICAgfVxuXG4gICAgc2NvcmVBbmRDbGFpbUVkZ2VzLmZvckVhY2goKHNjb3JlQW5kQ2xhaW1FZGdlKSA9PiB7XG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgY2hpbGQgc2NvcmVzIGFuZCBkZXRlcm1pbmUgdGhlIHNjb3JlIG9mIHRoZSBwYXJlbnQuXG4gICAgICAgIGlmIChzY29yZUFuZENsYWltRWRnZS5jbGFpbUVkZ2UuYWZmZWN0cyA9PT0gQWZmZWN0cy5Db25maWRlbmNlKSB7XG4gICAgICAgICAgICAvLyBQcm9jZXNzIGVkZ2VzIHRoYXQgYWZmZWN0IGNvbmZpZGVuY2VcbiAgICAgICAgICAgIGlmIChzY29yZUFuZENsYWltRWRnZS5jbGFpbUVkZ2UucHJvKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5Db25maWRlbmNlICs9IHNjb3JlQW5kQ2xhaW1FZGdlLnNjb3JlLmNvbmZpZGVuY2UgKiBzY29yZUFuZENsYWltRWRnZS5zY29yZS5yZWxldmFuY2U7IC8vIEFkZCB1cCBhbGwgdGhlIHN0cmVuZ3RoIG9mIHRoZSBjaGlsZHJlblxuICAgICAgICAgICAgICAgIGNoaWxkcmVuUmVsZXZhbmNlICs9IHNjb3JlQW5kQ2xhaW1FZGdlLnNjb3JlLnJlbGV2YW5jZTsgLy9BZGQgdXAgdGhlIHJlbGV2YW5jZSBzZXBhcmF0ZWx5IHNvIHdlIGNhbiBkbyBhIHdlaWdodGVkIGFnZXJhZ2UgbGF0ZXJcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5Db25maWRlbmNlIC09IHNjb3JlQW5kQ2xhaW1FZGdlLnNjb3JlLmNvbmZpZGVuY2UgKiBzY29yZUFuZENsYWltRWRnZS5zY29yZS5yZWxldmFuY2U7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5SZWxldmFuY2UgKz0gc2NvcmVBbmRDbGFpbUVkZ2Uuc2NvcmUucmVsZXZhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNjb3JlQW5kQ2xhaW1FZGdlLmNsYWltRWRnZS5hZmZlY3RzID09PSAncmVsZXZhbmNlJykge1xuICAgICAgICAgICAgLy8gUHJvY2VzcyBSZWxldmFuY2UgY2hpbGQgY2xhaW1zXG4gICAgICAgICAgICBpZiAoc2NvcmVBbmRDbGFpbUVkZ2UuY2xhaW1FZGdlLnBybykge1xuICAgICAgICAgICAgICAgIG5ld1Njb3JlLnJlbGV2YW5jZSArPSBzY29yZUFuZENsYWltRWRnZS5zY29yZS5jb25maWRlbmNlOyAvLyBBZGQgdXAgYWxsIHRoZSBzdHJlbmd0aCBvZiB0aGUgY2hpbGRyZW5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3U2NvcmUucmVsZXZhbmNlIC09IHNjb3JlQW5kQ2xhaW1FZGdlLnNjb3JlLmNvbmZpZGVuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChjaGlsZHJlblJlbGV2YW5jZSA9PT0gMCkge1xuICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgZGl2aXNpb24gYnkgemVyb1xuICAgICAgICBuZXdTY29yZS5jb25maWRlbmNlID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvL0NhbGN1bGF0ZSB0aGUgc2NvcmVcbiAgICAgICAgbmV3U2NvcmUuY29uZmlkZW5jZSA9IGNoaWxkcmVuQ29uZmlkZW5jZSAvIGNoaWxkcmVuUmVsZXZhbmNlO1xuICAgIH1cblxuICAgIGlmICghcmV2ZXJzYWJsZSAmJiBuZXdTY29yZS5jb25maWRlbmNlIDwgMCkge1xuICAgICAgICAvLyBJZiBpdCBpcyBub3QgcmV2ZXJzYWJsZSB0aGVuIGRvIG5vdCBsZXQgaXQgZ28gbmVnYXRpdmVcbiAgICAgICAgbmV3U2NvcmUuY29uZmlkZW5jZSA9IDBcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmlzKG5ld1Njb3JlLmNvbmZpZGVuY2UsIC0wKSkge1xuICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgbmVnYXRpdmUgemVybyBcbiAgICAgICAgbmV3U2NvcmUuY29uZmlkZW5jZSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZUNsYWltSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdTY29yZS5zb3VyY2VDbGFpbUlkID0gc291cmNlQ2xhaW1JZFxuICAgIH1cblxuXG4gICAgcmV0dXJuIG5ld1Njb3JlO1xufVxuXG4iXX0=
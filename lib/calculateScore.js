"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScore = calculateScore;

var _Affects = require("./dataModels/Affects");

var _Score = require("./dataModels/Score");

var _Id = require("./dataModels/Id");

/**
 * Calculates a new score based on the child scores and how thay wre linked (by edged) the claim this score is for.
 */
function calculateScore() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$scoreAndClaimEdg = _ref.scoreAndClaimEdges,
      scoreAndClaimEdges = _ref$scoreAndClaimEdg === void 0 ? [] : _ref$scoreAndClaimEdg,
      _ref$reversible = _ref.reversible,
      reversible = _ref$reversible === void 0 ? true : _ref$reversible,
      _ref$sourceClaimId = _ref.sourceClaimId,
      sourceClaimId = _ref$sourceClaimId === void 0 ? (0, _Id.ID)("") : _ref$sourceClaimId;

  var newScore = new _Score.Score();
  var childrenConfidence = 0;
  var childrenRelevance = 0;

  if (scoreAndClaimEdges.filter(function (c) {
    return c.claimEdge.affects === _Affects.Affects.Confidence;
  }).length < 1) {
    // If there are no children that affect the confidence of the claim
    // then assume the claim is 100% confident and start strength and relevance at 1
    childrenConfidence = 1;
    childrenRelevance = 1;
  }

  scoreAndClaimEdges.forEach(function (_ref2) {
    var score = _ref2.score,
        claimEdge = _ref2.claimEdge;

    // Loop through the child scores and determine the score of the parent.
    if (claimEdge.affects === _Affects.Affects.Confidence) {
      //calculate the reduction of the relevance bease on the distance of the confidence from zero
      //TODO: maybe add a flag on the claimEdge to be able to turn this off in the case of a claim that should draw the parent towards zero
      //Like "This claim should require supporting evidence"
      var confidenceRelevanceAdjustment = 1;
      confidenceRelevanceAdjustment = Math.abs(score.confidence); // Process edges that affect confidence

      if (claimEdge.pro) {
        childrenConfidence += score.confidence * score.relevance * confidenceRelevanceAdjustment; // Add up all the strength of the children

        childrenRelevance += score.relevance * confidenceRelevanceAdjustment; //Add up the relevance separately so we can do a weighted agerage later
      } else {
        childrenConfidence -= score.confidence * score.relevance * confidenceRelevanceAdjustment;
        childrenRelevance += score.relevance * confidenceRelevanceAdjustment;
      }
    }

    if (claimEdge.affects === 'relevance') {
      // Process Relevance child claims
      if (claimEdge.pro) {
        newScore.relevance += score.confidence; // Add up all the strength of the children
      } else {
        newScore.relevance -= score.confidence;
      }
    }
  });

  if (childrenRelevance === 0) {
    // Protect against division by zero
    newScore.confidence = 0;
  } else {
    //Calculate the score
    newScore.confidence = childrenConfidence / childrenRelevance;
  }

  if (!reversible && newScore.confidence < 0) {
    // If it is not reversible then do not let it go negative
    newScore.confidence = 0;
  }

  if (Object.is(newScore.confidence, -0)) {
    // Protect against negative zero 
    newScore.confidence = 0;
  }

  if (sourceClaimId !== undefined) {
    newScore.sourceClaimId = sourceClaimId;
  }

  return newScore;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
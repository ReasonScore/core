"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScore = calculateScore;

/**
 * Calculates a new score based on the child scores passed in.
 */
function calculateScore({
  childScores = [],
  reversible = true
} = {}) {
  const newScore = {};
  let childrenConfidence = 0;
  let childrenRelevance = 0;

  if (childScores.filter(s => s.affects === 'confidence').length < 1) {
    // If there are no children that affect the confidence of the claim
    // then assume the claim is 100% confident and start strength and relevance at 1
    childrenConfidence = 1;
    childrenRelevance = 1;
  }

  childScores.forEach(score => {
    // Loop through the child scores and determine the score of the parent.
    if (score.affects === 'confidence') {
      //calculate the reduction of the relevance bease on the distance of the confidence from zero
      //TODO: maybe add a flag on the claimEdge to be able to turn this off in the case of a claim that should draw the parent towards zero
      //Like "This claim should require supporting evidence"
      let confidenceRelevanceAdjustment = 1;
      confidenceRelevanceAdjustment = Math.abs(score.confidence); // Process edges that affect confidence

      if (score.pro) {
        childrenConfidence += score.confidence * score.relevance * confidenceRelevanceAdjustment; // Add up all the strength of the children

        childrenRelevance += score.relevance * confidenceRelevanceAdjustment; //Add up the relevance separately so we can do a weighted agerage later
      } else {
        childrenConfidence -= score.confidence * score.relevance * confidenceRelevanceAdjustment;
        childrenRelevance += score.relevance * confidenceRelevanceAdjustment;
      }
    }

    if (score.affects === 'relevance') {
      debugger; // Process Relevance child claims

      if (newScore.relevance == undefined) {
        newScore.relevance = 1;
      }

      if (score.pro) {
        newScore.relevance += score.confidence; // Add up all the strength of the children
      } else {
        newScore.relevance -= score.confidence;
      }
    }
  });

  if (childrenRelevance === 0) {
    // Protect against division by zero
    newScore.confidence = 0;
  } else {
    //Calculate the score
    newScore.confidence = childrenConfidence / childrenRelevance;
  }

  if (!reversible && newScore.confidence < 0) {
    // If it is not reversible then do not let it go negative
    newScore.confidence = 0;
  }

  if (Object.is(newScore.confidence, -0)) {
    // Protect against negative zero 
    newScore.confidence = 0;
  }

  return newScore;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWxjdWxhdGVTY29yZS50cyJdLCJuYW1lcyI6WyJjYWxjdWxhdGVTY29yZSIsImNoaWxkU2NvcmVzIiwicmV2ZXJzaWJsZSIsIm5ld1Njb3JlIiwiY2hpbGRyZW5Db25maWRlbmNlIiwiY2hpbGRyZW5SZWxldmFuY2UiLCJmaWx0ZXIiLCJzIiwiYWZmZWN0cyIsImxlbmd0aCIsImZvckVhY2giLCJzY29yZSIsImNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50IiwiTWF0aCIsImFicyIsImNvbmZpZGVuY2UiLCJwcm8iLCJyZWxldmFuY2UiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJpcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVdBOzs7QUFHTyxTQUFTQSxjQUFULENBQXdCO0FBQUVDLEVBQUFBLFdBQVcsR0FBRyxFQUFoQjtBQUFvQkMsRUFBQUEsVUFBVSxHQUFHO0FBQWpDLElBSzNCLEVBTEcsRUFNWTtBQUVmLFFBQU1DLFFBQXdCLEdBQUcsRUFBakM7QUFFQSxNQUFJQyxrQkFBa0IsR0FBRyxDQUF6QjtBQUNBLE1BQUlDLGlCQUFpQixHQUFHLENBQXhCOztBQUVBLE1BQUlKLFdBQVcsQ0FBQ0ssTUFBWixDQUFtQkMsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLE9BQUYsS0FBYyxZQUF0QyxFQUFvREMsTUFBcEQsR0FBNkQsQ0FBakUsRUFBb0U7QUFDaEU7QUFDQTtBQUNBTCxJQUFBQSxrQkFBa0IsR0FBRyxDQUFyQjtBQUNBQyxJQUFBQSxpQkFBaUIsR0FBRyxDQUFwQjtBQUNIOztBQUVESixFQUFBQSxXQUFXLENBQUNTLE9BQVosQ0FBb0JDLEtBQUssSUFBSTtBQUN6QjtBQUNBLFFBQUlBLEtBQUssQ0FBQ0gsT0FBTixLQUFrQixZQUF0QixFQUFvQztBQUVoQztBQUNBO0FBQ0E7QUFDQSxVQUFJSSw2QkFBNkIsR0FBRyxDQUFwQztBQUNBQSxNQUFBQSw2QkFBNkIsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVNILEtBQUssQ0FBQ0ksVUFBZixDQUFoQyxDQU5nQyxDQVFoQzs7QUFDQSxVQUFJSixLQUFLLENBQUNLLEdBQVYsRUFBZTtBQUNYWixRQUFBQSxrQkFBa0IsSUFBSU8sS0FBSyxDQUFDSSxVQUFOLEdBQW1CSixLQUFLLENBQUNNLFNBQXpCLEdBQXFDTCw2QkFBM0QsQ0FEVyxDQUMrRTs7QUFDMUZQLFFBQUFBLGlCQUFpQixJQUFJTSxLQUFLLENBQUNNLFNBQU4sR0FBa0JMLDZCQUF2QyxDQUZXLENBRTJEO0FBQ3pFLE9BSEQsTUFHTztBQUNIUixRQUFBQSxrQkFBa0IsSUFBSU8sS0FBSyxDQUFDSSxVQUFOLEdBQW1CSixLQUFLLENBQUNNLFNBQXpCLEdBQXFDTCw2QkFBM0Q7QUFDQVAsUUFBQUEsaUJBQWlCLElBQUlNLEtBQUssQ0FBQ00sU0FBTixHQUFrQkwsNkJBQXZDO0FBQ0g7QUFDSjs7QUFFRCxRQUFJRCxLQUFLLENBQUNILE9BQU4sS0FBa0IsV0FBdEIsRUFBbUM7QUFDL0IsZUFEK0IsQ0FFL0I7O0FBQ0EsVUFBSUwsUUFBUSxDQUFDYyxTQUFULElBQXNCQyxTQUExQixFQUFvQztBQUNoQ2YsUUFBQUEsUUFBUSxDQUFDYyxTQUFULEdBQXFCLENBQXJCO0FBQ0g7O0FBQ0QsVUFBSU4sS0FBSyxDQUFDSyxHQUFWLEVBQWU7QUFDWGIsUUFBQUEsUUFBUSxDQUFDYyxTQUFULElBQXNCTixLQUFLLENBQUNJLFVBQTVCLENBRFcsQ0FDNkI7QUFDM0MsT0FGRCxNQUVPO0FBQ0haLFFBQUFBLFFBQVEsQ0FBQ2MsU0FBVCxJQUFzQk4sS0FBSyxDQUFDSSxVQUE1QjtBQUNIO0FBQ0o7QUFDSixHQWhDRDs7QUFrQ0EsTUFBSVYsaUJBQWlCLEtBQUssQ0FBMUIsRUFBNkI7QUFDekI7QUFDQUYsSUFBQUEsUUFBUSxDQUFDWSxVQUFULEdBQXNCLENBQXRCO0FBQ0gsR0FIRCxNQUdPO0FBQ0g7QUFDQVosSUFBQUEsUUFBUSxDQUFDWSxVQUFULEdBQXNCWCxrQkFBa0IsR0FBR0MsaUJBQTNDO0FBQ0g7O0FBRUQsTUFBSSxDQUFDSCxVQUFELElBQWVDLFFBQVEsQ0FBQ1ksVUFBVCxHQUFzQixDQUF6QyxFQUE0QztBQUN4QztBQUNBWixJQUFBQSxRQUFRLENBQUNZLFVBQVQsR0FBc0IsQ0FBdEI7QUFDSDs7QUFFRCxNQUFJSSxNQUFNLENBQUNDLEVBQVAsQ0FBVWpCLFFBQVEsQ0FBQ1ksVUFBbkIsRUFBK0IsQ0FBQyxDQUFoQyxDQUFKLEVBQXdDO0FBQ3BDO0FBQ0FaLElBQUFBLFFBQVEsQ0FBQ1ksVUFBVCxHQUFzQixDQUF0QjtBQUNIOztBQUVELFNBQU9aLFFBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlTY29yZSwgaVNjb3JlRnJhZ21lbnQgfSBmcm9tIFwiLi9kYXRhTW9kZWxzL1Njb3JlXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIGlDYWxjdWxhdGVTY29yZSB7XHJcbiAgICAoeyBjaGlsZFNjb3JlcyAsIHJldmVyc2libGUgfToge1xyXG4gICAgICAgIC8qKiBBbiBhcnJheSBvZiBncm91cGVkIGVkZ2VzIGFuZCBjbGFpbXMqL1xyXG4gICAgICAgIGNoaWxkU2NvcmVzPzogaVNjb3JlW107XHJcbiAgICAgICAgLyoqIENhbiB0aGlzIHNjb3JlIGZhbGwgYmVsb3cgYSAwIGNvbmZpZGVuY2UgKGhhdmUgYSBuZWdhdGl2ZSBjb25maWRlbmNlKSAqL1xyXG4gICAgICAgIHJldmVyc2libGU/OiBib29sZWFuXHJcbiAgICB9KSA6IGlTY29yZUZyYWdtZW50XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGEgbmV3IHNjb3JlIGJhc2VkIG9uIHRoZSBjaGlsZCBzY29yZXMgcGFzc2VkIGluLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVNjb3JlKHsgY2hpbGRTY29yZXMgPSBbXSwgcmV2ZXJzaWJsZSA9IHRydWUgfToge1xyXG4gICAgLyoqIEFuIGFycmF5IG9mIGdyb3VwZWQgZWRnZXMgYW5kIGNsYWltcyovXHJcbiAgICBjaGlsZFNjb3Jlcz86IGlTY29yZVtdO1xyXG4gICAgLyoqIENhbiB0aGlzIHNjb3JlIGZhbGwgYmVsb3cgYSAwIGNvbmZpZGVuY2UgKGhhdmUgYSBuZWdhdGl2ZSBjb25maWRlbmNlKSAqL1xyXG4gICAgcmV2ZXJzaWJsZT86IGJvb2xlYW5cclxufSA9IHt9LFxyXG4pIDogaVNjb3JlRnJhZ21lbnQge1xyXG4gICAgXHJcbiAgICBjb25zdCBuZXdTY29yZTogaVNjb3JlRnJhZ21lbnQgPSB7fTtcclxuICAgIFxyXG4gICAgbGV0IGNoaWxkcmVuQ29uZmlkZW5jZSA9IDBcclxuICAgIGxldCBjaGlsZHJlblJlbGV2YW5jZSA9IDBcclxuXHJcbiAgICBpZiAoY2hpbGRTY29yZXMuZmlsdGVyKHMgPT4gcy5hZmZlY3RzID09PSAnY29uZmlkZW5jZScpLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gY2hpbGRyZW4gdGhhdCBhZmZlY3QgdGhlIGNvbmZpZGVuY2Ugb2YgdGhlIGNsYWltXHJcbiAgICAgICAgLy8gdGhlbiBhc3N1bWUgdGhlIGNsYWltIGlzIDEwMCUgY29uZmlkZW50IGFuZCBzdGFydCBzdHJlbmd0aCBhbmQgcmVsZXZhbmNlIGF0IDFcclxuICAgICAgICBjaGlsZHJlbkNvbmZpZGVuY2UgPSAxO1xyXG4gICAgICAgIGNoaWxkcmVuUmVsZXZhbmNlID0gMTtcclxuICAgIH1cclxuXHJcbiAgICBjaGlsZFNjb3Jlcy5mb3JFYWNoKHNjb3JlID0+IHtcclxuICAgICAgICAvLyBMb29wIHRocm91Z2ggdGhlIGNoaWxkIHNjb3JlcyBhbmQgZGV0ZXJtaW5lIHRoZSBzY29yZSBvZiB0aGUgcGFyZW50LlxyXG4gICAgICAgIGlmIChzY29yZS5hZmZlY3RzID09PSAnY29uZmlkZW5jZScpIHtcclxuXHJcbiAgICAgICAgICAgIC8vY2FsY3VsYXRlIHRoZSByZWR1Y3Rpb24gb2YgdGhlIHJlbGV2YW5jZSBiZWFzZSBvbiB0aGUgZGlzdGFuY2Ugb2YgdGhlIGNvbmZpZGVuY2UgZnJvbSB6ZXJvXHJcbiAgICAgICAgICAgIC8vVE9ETzogbWF5YmUgYWRkIGEgZmxhZyBvbiB0aGUgY2xhaW1FZGdlIHRvIGJlIGFibGUgdG8gdHVybiB0aGlzIG9mZiBpbiB0aGUgY2FzZSBvZiBhIGNsYWltIHRoYXQgc2hvdWxkIGRyYXcgdGhlIHBhcmVudCB0b3dhcmRzIHplcm9cclxuICAgICAgICAgICAgLy9MaWtlIFwiVGhpcyBjbGFpbSBzaG91bGQgcmVxdWlyZSBzdXBwb3J0aW5nIGV2aWRlbmNlXCJcclxuICAgICAgICAgICAgbGV0IGNvbmZpZGVuY2VSZWxldmFuY2VBZGp1c3RtZW50ID0gMVxyXG4gICAgICAgICAgICBjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudCA9IE1hdGguYWJzKHNjb3JlLmNvbmZpZGVuY2UpXHJcblxyXG4gICAgICAgICAgICAvLyBQcm9jZXNzIGVkZ2VzIHRoYXQgYWZmZWN0IGNvbmZpZGVuY2VcclxuICAgICAgICAgICAgaWYgKHNjb3JlLnBybykge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5Db25maWRlbmNlICs9IHNjb3JlLmNvbmZpZGVuY2UgKiBzY29yZS5yZWxldmFuY2UgKiBjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudDsgLy8gQWRkIHVwIGFsbCB0aGUgc3RyZW5ndGggb2YgdGhlIGNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlblJlbGV2YW5jZSArPSBzY29yZS5yZWxldmFuY2UgKiBjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudDsgLy9BZGQgdXAgdGhlIHJlbGV2YW5jZSBzZXBhcmF0ZWx5IHNvIHdlIGNhbiBkbyBhIHdlaWdodGVkIGFnZXJhZ2UgbGF0ZXJcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuQ29uZmlkZW5jZSAtPSBzY29yZS5jb25maWRlbmNlICogc2NvcmUucmVsZXZhbmNlICogY29uZmlkZW5jZVJlbGV2YW5jZUFkanVzdG1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlblJlbGV2YW5jZSArPSBzY29yZS5yZWxldmFuY2UgKiBjb25maWRlbmNlUmVsZXZhbmNlQWRqdXN0bWVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNjb3JlLmFmZmVjdHMgPT09ICdyZWxldmFuY2UnKSB7XHJcbiAgICAgICAgICAgIGRlYnVnZ2VyXHJcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgUmVsZXZhbmNlIGNoaWxkIGNsYWltc1xyXG4gICAgICAgICAgICBpZiAobmV3U2NvcmUucmVsZXZhbmNlID09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICBuZXdTY29yZS5yZWxldmFuY2UgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzY29yZS5wcm8pIHtcclxuICAgICAgICAgICAgICAgIG5ld1Njb3JlLnJlbGV2YW5jZSArPSBzY29yZS5jb25maWRlbmNlOyAvLyBBZGQgdXAgYWxsIHRoZSBzdHJlbmd0aCBvZiB0aGUgY2hpbGRyZW5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5ld1Njb3JlLnJlbGV2YW5jZSAtPSBzY29yZS5jb25maWRlbmNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKGNoaWxkcmVuUmVsZXZhbmNlID09PSAwKSB7XHJcbiAgICAgICAgLy8gUHJvdGVjdCBhZ2FpbnN0IGRpdmlzaW9uIGJ5IHplcm9cclxuICAgICAgICBuZXdTY29yZS5jb25maWRlbmNlID0gMDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy9DYWxjdWxhdGUgdGhlIHNjb3JlXHJcbiAgICAgICAgbmV3U2NvcmUuY29uZmlkZW5jZSA9IGNoaWxkcmVuQ29uZmlkZW5jZSAvIGNoaWxkcmVuUmVsZXZhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghcmV2ZXJzaWJsZSAmJiBuZXdTY29yZS5jb25maWRlbmNlIDwgMCkge1xyXG4gICAgICAgIC8vIElmIGl0IGlzIG5vdCByZXZlcnNpYmxlIHRoZW4gZG8gbm90IGxldCBpdCBnbyBuZWdhdGl2ZVxyXG4gICAgICAgIG5ld1Njb3JlLmNvbmZpZGVuY2UgPSAwXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKE9iamVjdC5pcyhuZXdTY29yZS5jb25maWRlbmNlLCAtMCkpIHtcclxuICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgbmVnYXRpdmUgemVybyBcclxuICAgICAgICBuZXdTY29yZS5jb25maWRlbmNlID0gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3U2NvcmU7XHJcbn1cclxuXHJcbiJdfQ==
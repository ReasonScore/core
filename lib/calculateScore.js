"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateScore = calculateScore;

var _Score = require("./Score");

var _Affects = require("./Affects");

/**
 * Calculates a new score based on the child scores and how thay wre linked (by edged) the claim this score is for. This function does not take into account scopes. The caller of this fuction should only put the children and scores into this array that are within scope.
 * @param childEdges - an array of edges (aka arguments) that link an individual child to the claim this score is for. 
 * @param childScores - an array of scores for child claims linked to the claim this score is for. This function does not take into account scopes. The caller of this fuction should only put the scores into this array that are within scope.
 * @param previousScore - The previous score for this claim which may be replaced by this new score (if there are different)
 */
function calculateScore() {
  var childScores = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var pro = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var affects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Affects.Affects.Confidence;
  var reversable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var newScore = new _Score.Score(affects, reversable);
  var childrenConfidence = 0;
  var childrenRelevance = 0; //debugger;

  if (childScores.filter(function (cs) {
    return cs.affects === _Affects.Affects.Confidence;
  }).length < 1) {
    // If there are no children that affect the confidence of the claim
    // then assume the claim is 100% confident and start strength and weight at 1
    childrenConfidence = 1;
    childrenRelevance = 1;
  }

  childScores.forEach(function (childScore) {
    // Loop through the child scores and determine the score of the parent.
    if (childScore.affects === _Affects.Affects.Confidence) {
      // Process edges that affect confidence
      childrenConfidence += childScore.score * childScore.relevance; // Add up all the strength of the children

      childrenRelevance += childScore.relevance;
    }

    if (childScore.affects === 'relevance') {
      // Process Relevance child claims
      newScore.relevance += childScore.score; // Add up all the strength of the children
    }
  });

  if (childrenRelevance === 0) {
    // Protect against division by zero
    newScore.score = 0;
  } else {
    //Calculate the score
    newScore.score = childrenConfidence / childrenRelevance;
  }

  if (!reversable && newScore.score < 0) {
    // If it is not reversable then do not let it go negative
    newScore.score = 0;
  }

  if (!pro) {
    // Reverse the score if it is a con
    newScore.score = -newScore.score;
  }

  if (Object.is(newScore.score, -0)) {
    // Protect against negative zero 
    newScore.score = 0;
  }

  return newScore;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWxjdWxhdGVTY29yZS50cyJdLCJuYW1lcyI6WyJjYWxjdWxhdGVTY29yZSIsImNoaWxkU2NvcmVzIiwicHJvIiwiYWZmZWN0cyIsIkFmZmVjdHMiLCJDb25maWRlbmNlIiwicmV2ZXJzYWJsZSIsIm5ld1Njb3JlIiwiU2NvcmUiLCJjaGlsZHJlbkNvbmZpZGVuY2UiLCJjaGlsZHJlblJlbGV2YW5jZSIsImZpbHRlciIsImNzIiwibGVuZ3RoIiwiZm9yRWFjaCIsImNoaWxkU2NvcmUiLCJzY29yZSIsInJlbGV2YW5jZSIsIk9iamVjdCIsImlzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7OztBQU1PLFNBQVNBLGNBQVQsR0FBZ0g7QUFBQSxNQUF4RkMsV0FBd0YsdUVBQWpFLEVBQWlFO0FBQUEsTUFBN0RDLEdBQTZELHVFQUF2RCxJQUF1RDtBQUFBLE1BQWpEQyxPQUFpRCx1RUFBdkNDLGlCQUFRQyxVQUErQjtBQUFBLE1BQW5CQyxVQUFtQix1RUFBTixJQUFNO0FBQ25ILE1BQU1DLFFBQWUsR0FBRyxJQUFJQyxZQUFKLENBQVVMLE9BQVYsRUFBbUJHLFVBQW5CLENBQXhCO0FBQ0EsTUFBSUcsa0JBQWtCLEdBQUcsQ0FBekI7QUFDQSxNQUFJQyxpQkFBaUIsR0FBRyxDQUF4QixDQUhtSCxDQUtuSDs7QUFDQSxNQUFJVCxXQUFXLENBQUNVLE1BQVosQ0FBbUIsVUFBQUMsRUFBRTtBQUFBLFdBQUlBLEVBQUUsQ0FBQ1QsT0FBSCxLQUFlQyxpQkFBUUMsVUFBM0I7QUFBQSxHQUFyQixFQUE0RFEsTUFBNUQsR0FBcUUsQ0FBekUsRUFBNEU7QUFDeEU7QUFDQTtBQUNBSixJQUFBQSxrQkFBa0IsR0FBRyxDQUFyQjtBQUNBQyxJQUFBQSxpQkFBaUIsR0FBRyxDQUFwQjtBQUNIOztBQUVEVCxFQUFBQSxXQUFXLENBQUNhLE9BQVosQ0FBb0IsVUFBQ0MsVUFBRCxFQUFnQjtBQUNoQztBQUVBLFFBQUlBLFVBQVUsQ0FBQ1osT0FBWCxLQUF1QkMsaUJBQVFDLFVBQW5DLEVBQStDO0FBQzNDO0FBQ0FJLE1BQUFBLGtCQUFrQixJQUFJTSxVQUFVLENBQUNDLEtBQVgsR0FBbUJELFVBQVUsQ0FBQ0UsU0FBcEQsQ0FGMkMsQ0FFb0I7O0FBQy9EUCxNQUFBQSxpQkFBaUIsSUFBSUssVUFBVSxDQUFDRSxTQUFoQztBQUNIOztBQUVELFFBQUlGLFVBQVUsQ0FBQ1osT0FBWCxLQUF1QixXQUEzQixFQUF3QztBQUNwQztBQUNBSSxNQUFBQSxRQUFRLENBQUNVLFNBQVQsSUFBc0JGLFVBQVUsQ0FBQ0MsS0FBakMsQ0FGb0MsQ0FFSTtBQUMzQztBQUNKLEdBYkQ7O0FBZUEsTUFBSU4saUJBQWlCLEtBQUssQ0FBMUIsRUFBNkI7QUFDekI7QUFDQUgsSUFBQUEsUUFBUSxDQUFDUyxLQUFULEdBQWlCLENBQWpCO0FBQ0gsR0FIRCxNQUdPO0FBQ0g7QUFDQVQsSUFBQUEsUUFBUSxDQUFDUyxLQUFULEdBQWlCUCxrQkFBa0IsR0FBR0MsaUJBQXRDO0FBQ0g7O0FBRUQsTUFBSSxDQUFDSixVQUFELElBQWVDLFFBQVEsQ0FBQ1MsS0FBVCxHQUFpQixDQUFwQyxFQUF1QztBQUNuQztBQUNBVCxJQUFBQSxRQUFRLENBQUNTLEtBQVQsR0FBaUIsQ0FBakI7QUFDSDs7QUFFRCxNQUFJLENBQUNkLEdBQUwsRUFBVTtBQUNOO0FBQ0FLLElBQUFBLFFBQVEsQ0FBQ1MsS0FBVCxHQUFpQixDQUFDVCxRQUFRLENBQUNTLEtBQTNCO0FBQ0g7O0FBRUQsTUFBSUUsTUFBTSxDQUFDQyxFQUFQLENBQVVaLFFBQVEsQ0FBQ1MsS0FBbkIsRUFBMEIsQ0FBQyxDQUEzQixDQUFKLEVBQW1DO0FBQy9CO0FBQ0FULElBQUFBLFFBQVEsQ0FBQ1MsS0FBVCxHQUFpQixDQUFqQjtBQUNIOztBQUVELFNBQU9ULFFBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjb3JlIH0gZnJvbSBcIi4vU2NvcmVcIlxyXG5pbXBvcnQgeyBBZmZlY3RzIH0gZnJvbSBcIi4vQWZmZWN0c1wiXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGEgbmV3IHNjb3JlIGJhc2VkIG9uIHRoZSBjaGlsZCBzY29yZXMgYW5kIGhvdyB0aGF5IHdyZSBsaW5rZWQgKGJ5IGVkZ2VkKSB0aGUgY2xhaW0gdGhpcyBzY29yZSBpcyBmb3IuIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgc2NvcGVzLiBUaGUgY2FsbGVyIG9mIHRoaXMgZnVjdGlvbiBzaG91bGQgb25seSBwdXQgdGhlIGNoaWxkcmVuIGFuZCBzY29yZXMgaW50byB0aGlzIGFycmF5IHRoYXQgYXJlIHdpdGhpbiBzY29wZS5cclxuICogQHBhcmFtIGNoaWxkRWRnZXMgLSBhbiBhcnJheSBvZiBlZGdlcyAoYWthIGFyZ3VtZW50cykgdGhhdCBsaW5rIGFuIGluZGl2aWR1YWwgY2hpbGQgdG8gdGhlIGNsYWltIHRoaXMgc2NvcmUgaXMgZm9yLiBcclxuICogQHBhcmFtIGNoaWxkU2NvcmVzIC0gYW4gYXJyYXkgb2Ygc2NvcmVzIGZvciBjaGlsZCBjbGFpbXMgbGlua2VkIHRvIHRoZSBjbGFpbSB0aGlzIHNjb3JlIGlzIGZvci4gVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB0YWtlIGludG8gYWNjb3VudCBzY29wZXMuIFRoZSBjYWxsZXIgb2YgdGhpcyBmdWN0aW9uIHNob3VsZCBvbmx5IHB1dCB0aGUgc2NvcmVzIGludG8gdGhpcyBhcnJheSB0aGF0IGFyZSB3aXRoaW4gc2NvcGUuXHJcbiAqIEBwYXJhbSBwcmV2aW91c1Njb3JlIC0gVGhlIHByZXZpb3VzIHNjb3JlIGZvciB0aGlzIGNsYWltIHdoaWNoIG1heSBiZSByZXBsYWNlZCBieSB0aGlzIG5ldyBzY29yZSAoaWYgdGhlcmUgYXJlIGRpZmZlcmVudClcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVTY29yZShjaGlsZFNjb3JlczogU2NvcmVbXSA9IFtdLCBwcm8gPSB0cnVlLCBhZmZlY3RzID0gQWZmZWN0cy5Db25maWRlbmNlLCByZXZlcnNhYmxlID0gdHJ1ZSkge1xyXG4gICAgY29uc3QgbmV3U2NvcmU6IFNjb3JlID0gbmV3IFNjb3JlKGFmZmVjdHMsIHJldmVyc2FibGUpO1xyXG4gICAgbGV0IGNoaWxkcmVuQ29uZmlkZW5jZSA9IDBcclxuICAgIGxldCBjaGlsZHJlblJlbGV2YW5jZSA9IDBcclxuXHJcbiAgICAvL2RlYnVnZ2VyO1xyXG4gICAgaWYgKGNoaWxkU2NvcmVzLmZpbHRlcihjcyA9PiBjcy5hZmZlY3RzID09PSBBZmZlY3RzLkNvbmZpZGVuY2UpLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gY2hpbGRyZW4gdGhhdCBhZmZlY3QgdGhlIGNvbmZpZGVuY2Ugb2YgdGhlIGNsYWltXHJcbiAgICAgICAgLy8gdGhlbiBhc3N1bWUgdGhlIGNsYWltIGlzIDEwMCUgY29uZmlkZW50IGFuZCBzdGFydCBzdHJlbmd0aCBhbmQgd2VpZ2h0IGF0IDFcclxuICAgICAgICBjaGlsZHJlbkNvbmZpZGVuY2UgPSAxO1xyXG4gICAgICAgIGNoaWxkcmVuUmVsZXZhbmNlID0gMTtcclxuICAgIH1cclxuXHJcbiAgICBjaGlsZFNjb3Jlcy5mb3JFYWNoKChjaGlsZFNjb3JlKSA9PiB7XHJcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBjaGlsZCBzY29yZXMgYW5kIGRldGVybWluZSB0aGUgc2NvcmUgb2YgdGhlIHBhcmVudC5cclxuXHJcbiAgICAgICAgaWYgKGNoaWxkU2NvcmUuYWZmZWN0cyA9PT0gQWZmZWN0cy5Db25maWRlbmNlKSB7XHJcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgZWRnZXMgdGhhdCBhZmZlY3QgY29uZmlkZW5jZVxyXG4gICAgICAgICAgICBjaGlsZHJlbkNvbmZpZGVuY2UgKz0gY2hpbGRTY29yZS5zY29yZSAqIGNoaWxkU2NvcmUucmVsZXZhbmNlOyAvLyBBZGQgdXAgYWxsIHRoZSBzdHJlbmd0aCBvZiB0aGUgY2hpbGRyZW5cclxuICAgICAgICAgICAgY2hpbGRyZW5SZWxldmFuY2UgKz0gY2hpbGRTY29yZS5yZWxldmFuY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hpbGRTY29yZS5hZmZlY3RzID09PSAncmVsZXZhbmNlJykge1xyXG4gICAgICAgICAgICAvLyBQcm9jZXNzIFJlbGV2YW5jZSBjaGlsZCBjbGFpbXNcclxuICAgICAgICAgICAgbmV3U2NvcmUucmVsZXZhbmNlICs9IGNoaWxkU2NvcmUuc2NvcmU7IC8vIEFkZCB1cCBhbGwgdGhlIHN0cmVuZ3RoIG9mIHRoZSBjaGlsZHJlblxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChjaGlsZHJlblJlbGV2YW5jZSA9PT0gMCkge1xyXG4gICAgICAgIC8vIFByb3RlY3QgYWdhaW5zdCBkaXZpc2lvbiBieSB6ZXJvXHJcbiAgICAgICAgbmV3U2NvcmUuc2NvcmUgPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvL0NhbGN1bGF0ZSB0aGUgc2NvcmVcclxuICAgICAgICBuZXdTY29yZS5zY29yZSA9IGNoaWxkcmVuQ29uZmlkZW5jZSAvIGNoaWxkcmVuUmVsZXZhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghcmV2ZXJzYWJsZSAmJiBuZXdTY29yZS5zY29yZSA8IDApIHtcclxuICAgICAgICAvLyBJZiBpdCBpcyBub3QgcmV2ZXJzYWJsZSB0aGVuIGRvIG5vdCBsZXQgaXQgZ28gbmVnYXRpdmVcclxuICAgICAgICBuZXdTY29yZS5zY29yZSA9IDBcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXBybykge1xyXG4gICAgICAgIC8vIFJldmVyc2UgdGhlIHNjb3JlIGlmIGl0IGlzIGEgY29uXHJcbiAgICAgICAgbmV3U2NvcmUuc2NvcmUgPSAtbmV3U2NvcmUuc2NvcmU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKE9iamVjdC5pcyhuZXdTY29yZS5zY29yZSwgLTApKSB7XHJcbiAgICAgICAgLy8gUHJvdGVjdCBhZ2FpbnN0IG5lZ2F0aXZlIHplcm8gXHJcbiAgICAgICAgbmV3U2NvcmUuc2NvcmUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXdTY29yZTtcclxufVxyXG5cclxuIl19
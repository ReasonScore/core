"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RepositoryLocalReactive = void 0;

var _RsData = require("../dataModels/RsData");

var _RepositoryLocalBase = require("./RepositoryLocalBase");

class RepositoryLocalReactive extends _RepositoryLocalBase.RepositoryLocalBase {
  constructor(rsData = new _RsData.RsData()) {
    super(rsData);
    this.rsData = rsData;
  }

  notify(actions) {
    this.rsData.actionsLog.push(actions);

    for (const action of actions) {
      // "add_claim" |
      if (action.type == "add_claim" || action.type == "modify_claim") {
        this.rsData.claims[action.dataId] = action.newData;
      }

      if (action.type == "delete_claim") {
        throw new Error("Method not implemented.");
      }

      if (action.type == "add_claimEdge" || action.type == "modify_claimEdge") {
        this.rsData.claimEdges[action.dataId] = action.newData;
        const item = action.newData;
        this.indexClaimEdgeIdByParentId(item);
        this.indexClaimEdgeIdByChildId(item);
      }

      if (action.type == "delete_claimEdge") {
        throw new Error("Method not implemented.");
      }

      if (action.type == "add_score" || action.type == "modify_score") {
        const item = action.newData;
        this.rsData.scores[action.dataId] = action.newData;
        this.scoreIdsByClaimId(item);
        this.childIdsByScoreId(item);
      }

      if (action.type == "delete_score") {
        throw new Error("Method not implemented.");
      }
    }
  }

  indexClaimEdgeIdByParentId(claimEdge) {
    let indexId = claimEdge.parentId;
    let id = claimEdge.id;
    let destination = this.rsData.claimEdgeIdsByParentId[claimEdge.parentId];

    if (!destination) {
      destination = [];
      this.rsData.claimEdgeIdsByParentId[claimEdge.parentId] = destination;
    }

    if (!destination.includes(claimEdge.id)) {
      destination.push(claimEdge.id);
    }
  }

  indexClaimEdgeIdByChildId(claimEdge) {
    let indexId = claimEdge.childId;
    let id = claimEdge.id;
    let destination = this.rsData.claimEdgeIdsByChildId[indexId];

    if (!destination) {
      destination = [];
      this.rsData.claimEdgeIdsByChildId[indexId] = destination;
    }

    if (!destination.includes(id)) {
      destination.push(id);
    }
  }

  scoreIdsByClaimId(score) {
    let indexId = score.sourceClaimId;
    let id = score.id;
    let destination = this.rsData.scoreIdsByClaimId[indexId];

    if (!destination) {
      destination = [];
      this.rsData.scoreIdsByClaimId[indexId] = destination;
    }

    if (!destination.includes(id)) {
      destination.push(id);
    }
  } //TODO: not sure if this is correct


  childIdsByScoreId(score) {
    let indexId = score.parentScoreId;
    let id = score.id;

    if (indexId) {
      let destination = this.rsData.childIdsByScoreId[indexId];

      if (!destination) {
        destination = [];
        this.rsData.childIdsByScoreId[indexId] = destination;
      }

      if (!destination.includes(id)) {
        destination.push(id);
      }
    }
  }

}

exports.RepositoryLocalReactive = RepositoryLocalReactive;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RepositoryLocalBase = void 0;

var _RsData = require("../dataModels/RsData");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RepositoryLocalBase {
  constructor(rsData = new _RsData.RsData()) {
    this.rsData = rsData;

    _defineProperty(this, "log", []);
  }

  async getClaim(id) {
    return this.rsData.items[id];
  }

  async getClaimEdge(id) {
    return this.rsData.items[id];
  }

  async getScore(id) {
    return this.rsData.items[id];
  }

  async getScoreTree(id) {
    return this.rsData.items[id];
  }

  async getClaimEdgesByParentId(parentId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByParentId[parentId];
    const claimEdges = [];

    if (claimEdgeIdStrings) {
      for (const claimEdgeIdString of claimEdgeIdStrings) {
        const claimEdge = await this.getClaimEdge(claimEdgeIdString);
        if (claimEdge) claimEdges.push(claimEdge);
      }
    }

    return claimEdges;
  }

  async getClaimEdgesByChildId(childId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByChildId[childId];
    const claimEdges = [];

    for (const claimEdgeIdString of claimEdgeIdStrings) {
      const claimEdge = await this.getClaimEdge(claimEdgeIdString);
      if (claimEdge) claimEdges.push(claimEdge);
    }

    return claimEdges;
  }

  async getScoresBySourceId(sourceClaimId) {
    const scoreIdStrings = this.rsData.scoreIdsBySourceId[sourceClaimId];
    const scores = [];

    if (scoreIdStrings) {
      for (const scoreIdString of scoreIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

  async getChildrenByScoreId(parentScoreId) {
    const childIdStrings = this.rsData.childIdsByScoreId[parentScoreId];
    const scores = [];

    if (childIdStrings) {
      for (const scoreIdString of childIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

  async getDescendantScoresById(mainScoreId) {
    // TODO: This assumes no loops in the tree
    const scores = [];
    const scoresToProcess = await this.getChildrenByScoreId(mainScoreId);

    while (scoresToProcess.length > 0) {
      const currentScore = scoresToProcess.pop();

      if (currentScore) {
        scores.push(currentScore);
        const childScores = await this.getChildrenByScoreId(currentScore.id);
        scoresToProcess.push(...childScores);
      }
    }

    return scores;
  }

  async getLeafScoresById(mainScoreId) {
    // TODO: This assumes no loops in the tree
    const scores = [];
    const scoresToProcess = await this.getChildrenByScoreId(mainScoreId);

    while (scoresToProcess.length > 0) {
      const currentScore = scoresToProcess.pop();

      if (currentScore) {
        const children = await this.getChildrenByScoreId(currentScore.id);

        if (children.length === 0) {
          scores.push(currentScore);
        }

        scoresToProcess.push(...children);
      }
    }

    return scores;
  }

}

exports.RepositoryLocalBase = RepositoryLocalBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RepositoryLocalBase = void 0;

var _RsData = require("../dataModels/RsData");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RepositoryLocalBase {
  constructor(rsData = new _RsData.RsData()) {
    this.rsData = rsData;

    _defineProperty(this, "log", []);
  }

  async getClaim(id) {
    return this.rsData.items[id];
  }

  async getClaimEdge(id) {
    return this.rsData.items[id];
  }

  async getScore(id) {
    return this.rsData.items[id];
  }

  async getScoreTree(id) {
    return this.rsData.items[id];
  }

  async getClaimEdgesByParentId(parentId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByParentId[parentId];
    const claimEdges = [];

    if (claimEdgeIdStrings) {
      for (const claimEdgeIdString of claimEdgeIdStrings) {
        const claimEdge = await this.getClaimEdge(claimEdgeIdString);
        if (claimEdge) claimEdges.push(claimEdge);
      }
    }

    return claimEdges;
  }

  async getClaimEdgesByChildId(childId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByChildId[childId];
    const claimEdges = [];

    for (const claimEdgeIdString of claimEdgeIdStrings) {
      const claimEdge = await this.getClaimEdge(claimEdgeIdString);
      if (claimEdge) claimEdges.push(claimEdge);
    }

    return claimEdges;
  }

  async getScoresBySourceId(sourceClaimId) {
    const scoreIdStrings = this.rsData.scoreIdsBySourceId[sourceClaimId];
    const scores = [];

    if (scoreIdStrings) {
      for (const scoreIdString of scoreIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

  async getChildrenByScoreId(parentScoreId) {
    const childIdStrings = this.rsData.childIdsByScoreId[parentScoreId];
    const scores = [];

    if (childIdStrings) {
      for (const scoreIdString of childIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

}

exports.RepositoryLocalBase = RepositoryLocalBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBvc2l0b3JpZXMvUmVwb3NpdG9yeUxvY2FsQmFzZS50cyJdLCJuYW1lcyI6WyJSZXBvc2l0b3J5TG9jYWxCYXNlIiwiY29uc3RydWN0b3IiLCJyc0RhdGEiLCJSc0RhdGEiLCJnZXRDbGFpbSIsImlkIiwiaXRlbXMiLCJnZXRDbGFpbUVkZ2UiLCJnZXRTY29yZSIsImdldFNjb3JlVHJlZSIsImdldENsYWltRWRnZXNCeVBhcmVudElkIiwicGFyZW50SWQiLCJjbGFpbUVkZ2VJZFN0cmluZ3MiLCJjbGFpbUVkZ2VJZHNCeVBhcmVudElkIiwiY2xhaW1FZGdlcyIsImNsYWltRWRnZUlkU3RyaW5nIiwiY2xhaW1FZGdlIiwicHVzaCIsImdldENsYWltRWRnZXNCeUNoaWxkSWQiLCJjaGlsZElkIiwiY2xhaW1FZGdlSWRzQnlDaGlsZElkIiwiZ2V0U2NvcmVzQnlTb3VyY2VJZCIsInNvdXJjZUNsYWltSWQiLCJzY29yZUlkU3RyaW5ncyIsInNjb3JlSWRzQnlTb3VyY2VJZCIsInNjb3JlcyIsInNjb3JlSWRTdHJpbmciLCJzY29yZSIsImdldENoaWxkcmVuQnlTY29yZUlkIiwicGFyZW50U2NvcmVJZCIsImNoaWxkSWRTdHJpbmdzIiwiY2hpbGRJZHNCeVNjb3JlSWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7OztBQU1PLE1BQU1BLG1CQUFOLENBQTBCO0FBRTdCQyxFQUFBQSxXQUFXLENBQ0FDLE1BQWUsR0FBRyxJQUFJQyxjQUFKLEVBRGxCLEVBRVQ7QUFBQSxTQURTRCxNQUNULEdBRFNBLE1BQ1Q7O0FBQUEsaUNBeURpQyxFQXpEakM7QUFDRDs7QUFFRCxRQUFNRSxRQUFOLENBQWVDLEVBQWYsRUFBd0Q7QUFDcEQsV0FBTyxLQUFLSCxNQUFMLENBQVlJLEtBQVosQ0FBa0JELEVBQWxCLENBQVA7QUFDSDs7QUFDRCxRQUFNRSxZQUFOLENBQW1CRixFQUFuQixFQUFnRTtBQUM1RCxXQUFPLEtBQUtILE1BQUwsQ0FBWUksS0FBWixDQUFrQkQsRUFBbEIsQ0FBUDtBQUNIOztBQUNELFFBQU1HLFFBQU4sQ0FBZUgsRUFBZixFQUF3RDtBQUNwRCxXQUFPLEtBQUtILE1BQUwsQ0FBWUksS0FBWixDQUFrQkQsRUFBbEIsQ0FBUDtBQUNIOztBQUNELFFBQU1JLFlBQU4sQ0FBbUJKLEVBQW5CLEVBQWdFO0FBQzVELFdBQU8sS0FBS0gsTUFBTCxDQUFZSSxLQUFaLENBQWtCRCxFQUFsQixDQUFQO0FBQ0g7O0FBQ0QsUUFBTUssdUJBQU4sQ0FBOEJDLFFBQTlCLEVBQXVFO0FBQ25FLFVBQU1DLGtCQUFrQixHQUFHLEtBQUtWLE1BQUwsQ0FBWVcsc0JBQVosQ0FBbUNGLFFBQW5DLENBQTNCO0FBQ0EsVUFBTUcsVUFBd0IsR0FBRyxFQUFqQzs7QUFDQSxRQUFJRixrQkFBSixFQUF3QjtBQUNwQixXQUFLLE1BQU1HLGlCQUFYLElBQWdDSCxrQkFBaEMsRUFBb0Q7QUFDaEQsY0FBTUksU0FBUyxHQUFHLE1BQU0sS0FBS1QsWUFBTCxDQUFrQlEsaUJBQWxCLENBQXhCO0FBQ0EsWUFBSUMsU0FBSixFQUFlRixVQUFVLENBQUNHLElBQVgsQ0FBZ0JELFNBQWhCO0FBQ2xCO0FBQ0o7O0FBQ0QsV0FBT0YsVUFBUDtBQUNIOztBQUNELFFBQU1JLHNCQUFOLENBQTZCQyxPQUE3QixFQUFxRTtBQUNqRSxVQUFNUCxrQkFBa0IsR0FBRyxLQUFLVixNQUFMLENBQVlrQixxQkFBWixDQUFrQ0QsT0FBbEMsQ0FBM0I7QUFDQSxVQUFNTCxVQUF3QixHQUFHLEVBQWpDOztBQUNBLFNBQUssTUFBTUMsaUJBQVgsSUFBZ0NILGtCQUFoQyxFQUFvRDtBQUNoRCxZQUFNSSxTQUFTLEdBQUcsTUFBTSxLQUFLVCxZQUFMLENBQWtCUSxpQkFBbEIsQ0FBeEI7QUFDQSxVQUFJQyxTQUFKLEVBQWVGLFVBQVUsQ0FBQ0csSUFBWCxDQUFnQkQsU0FBaEI7QUFDbEI7O0FBQ0QsV0FBT0YsVUFBUDtBQUNIOztBQUNELFFBQU1PLG1CQUFOLENBQTBCQyxhQUExQixFQUFvRTtBQUNoRSxVQUFNQyxjQUFjLEdBQUcsS0FBS3JCLE1BQUwsQ0FBWXNCLGtCQUFaLENBQStCRixhQUEvQixDQUF2QjtBQUNBLFVBQU1HLE1BQWdCLEdBQUcsRUFBekI7O0FBQ0EsUUFBSUYsY0FBSixFQUFvQjtBQUNoQixXQUFLLE1BQU1HLGFBQVgsSUFBNEJILGNBQTVCLEVBQTRDO0FBQ3hDLGNBQU1JLEtBQUssR0FBRyxNQUFNLEtBQUtuQixRQUFMLENBQWNrQixhQUFkLENBQXBCO0FBQ0EsWUFBSUMsS0FBSixFQUFXRixNQUFNLENBQUNSLElBQVAsQ0FBWVUsS0FBWjtBQUNkO0FBQ0o7O0FBQ0QsV0FBT0YsTUFBUDtBQUNIOztBQUNELFFBQU1HLG9CQUFOLENBQTJCQyxhQUEzQixFQUFxRTtBQUNqRSxVQUFNQyxjQUFjLEdBQUcsS0FBSzVCLE1BQUwsQ0FBWTZCLGlCQUFaLENBQThCRixhQUE5QixDQUF2QjtBQUNBLFVBQU1KLE1BQWdCLEdBQUcsRUFBekI7O0FBQ0EsUUFBSUssY0FBSixFQUFvQjtBQUNoQixXQUFLLE1BQU1KLGFBQVgsSUFBNEJJLGNBQTVCLEVBQTRDO0FBQ3hDLGNBQU1ILEtBQUssR0FBRyxNQUFNLEtBQUtuQixRQUFMLENBQWNrQixhQUFkLENBQXBCO0FBQ0EsWUFBSUMsS0FBSixFQUFXRixNQUFNLENBQUNSLElBQVAsQ0FBWVUsS0FBWjtBQUNkO0FBQ0o7O0FBQ0QsV0FBT0YsTUFBUDtBQUNIOztBQTVENEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpQ2xhaW1FZGdlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQ2xhaW1FZGdlXCI7XHJcbmltcG9ydCB7IGlTY29yZSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL1Njb3JlXCI7XHJcbmltcG9ydCB7IFJzRGF0YSwgaVJzRGF0YSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL1JzRGF0YVwiO1xyXG5pbXBvcnQgeyBpQWN0aW9uIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQWN0aW9uXCI7XHJcbmltcG9ydCB7IGlDbGFpbSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0NsYWltXCI7XHJcbmltcG9ydCB7IGlTY29yZVRyZWUgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9TY29yZVRyZWVcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUmVwb3NpdG9yeUxvY2FsQmFzZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIHJzRGF0YTogaVJzRGF0YSA9IG5ldyBSc0RhdGEoKVxyXG4gICAgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0Q2xhaW0oaWQ6IHN0cmluZyk6IFByb21pc2U8aUNsYWltIHwgdW5kZWZpbmVkPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucnNEYXRhLml0ZW1zW2lkXSBhcyBpQ2xhaW07XHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRDbGFpbUVkZ2UoaWQ6IHN0cmluZyk6IFByb21pc2U8aUNsYWltRWRnZSB8IHVuZGVmaW5lZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJzRGF0YS5pdGVtc1tpZF0gYXMgaUNsYWltRWRnZTtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldFNjb3JlKGlkOiBzdHJpbmcpOiBQcm9taXNlPGlTY29yZSB8IHVuZGVmaW5lZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJzRGF0YS5pdGVtc1tpZF0gYXMgaVNjb3JlO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0U2NvcmVUcmVlKGlkOiBzdHJpbmcpOiBQcm9taXNlPGlTY29yZVRyZWUgfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yc0RhdGEuaXRlbXNbaWRdIGFzIGlTY29yZVRyZWU7XHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRDbGFpbUVkZ2VzQnlQYXJlbnRJZChwYXJlbnRJZDogc3RyaW5nKTogUHJvbWlzZTxpQ2xhaW1FZGdlW10+IHtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VJZFN0cmluZ3MgPSB0aGlzLnJzRGF0YS5jbGFpbUVkZ2VJZHNCeVBhcmVudElkW3BhcmVudElkXTtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VzOiBpQ2xhaW1FZGdlW10gPSBbXTtcclxuICAgICAgICBpZiAoY2xhaW1FZGdlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2xhaW1FZGdlSWRTdHJpbmcgb2YgY2xhaW1FZGdlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbGFpbUVkZ2UgPSBhd2FpdCB0aGlzLmdldENsYWltRWRnZShjbGFpbUVkZ2VJZFN0cmluZylcclxuICAgICAgICAgICAgICAgIGlmIChjbGFpbUVkZ2UpIGNsYWltRWRnZXMucHVzaChjbGFpbUVkZ2UpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsYWltRWRnZXNcclxuICAgIH1cclxuICAgIGFzeW5jIGdldENsYWltRWRnZXNCeUNoaWxkSWQoY2hpbGRJZDogc3RyaW5nKTogUHJvbWlzZTxpQ2xhaW1FZGdlW10+IHtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VJZFN0cmluZ3MgPSB0aGlzLnJzRGF0YS5jbGFpbUVkZ2VJZHNCeUNoaWxkSWRbY2hpbGRJZF07XHJcbiAgICAgICAgY29uc3QgY2xhaW1FZGdlczogaUNsYWltRWRnZVtdID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBjbGFpbUVkZ2VJZFN0cmluZyBvZiBjbGFpbUVkZ2VJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgY29uc3QgY2xhaW1FZGdlID0gYXdhaXQgdGhpcy5nZXRDbGFpbUVkZ2UoY2xhaW1FZGdlSWRTdHJpbmcpXHJcbiAgICAgICAgICAgIGlmIChjbGFpbUVkZ2UpIGNsYWltRWRnZXMucHVzaChjbGFpbUVkZ2UpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjbGFpbUVkZ2VzXHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRTY29yZXNCeVNvdXJjZUlkKHNvdXJjZUNsYWltSWQ6IHN0cmluZyk6IFByb21pc2U8aVNjb3JlW10+IHtcclxuICAgICAgICBjb25zdCBzY29yZUlkU3RyaW5ncyA9IHRoaXMucnNEYXRhLnNjb3JlSWRzQnlTb3VyY2VJZFtzb3VyY2VDbGFpbUlkXTtcclxuICAgICAgICBjb25zdCBzY29yZXM6IGlTY29yZVtdID0gW107XHJcbiAgICAgICAgaWYgKHNjb3JlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2NvcmVJZFN0cmluZyBvZiBzY29yZUlkU3RyaW5ncykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NvcmUgPSBhd2FpdCB0aGlzLmdldFNjb3JlKHNjb3JlSWRTdHJpbmcpXHJcbiAgICAgICAgICAgICAgICBpZiAoc2NvcmUpIHNjb3Jlcy5wdXNoKHNjb3JlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzY29yZXNcclxuICAgIH1cclxuICAgIGFzeW5jIGdldENoaWxkcmVuQnlTY29yZUlkKHBhcmVudFNjb3JlSWQ6IHN0cmluZyk6IFByb21pc2U8aVNjb3JlW10+IHtcclxuICAgICAgICBjb25zdCBjaGlsZElkU3RyaW5ncyA9IHRoaXMucnNEYXRhLmNoaWxkSWRzQnlTY29yZUlkW3BhcmVudFNjb3JlSWRdO1xyXG4gICAgICAgIGNvbnN0IHNjb3JlczogaVNjb3JlW10gPSBbXTtcclxuICAgICAgICBpZiAoY2hpbGRJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBzY29yZUlkU3RyaW5nIG9mIGNoaWxkSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzY29yZSA9IGF3YWl0IHRoaXMuZ2V0U2NvcmUoc2NvcmVJZFN0cmluZylcclxuICAgICAgICAgICAgICAgIGlmIChzY29yZSkgc2NvcmVzLnB1c2goc2NvcmUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNjb3Jlc1xyXG4gICAgfVxyXG4gICAgcHVibGljIHJlYWRvbmx5IGxvZzogaUFjdGlvbltdW10gPSBbXTtcclxuXHJcbn0iXX0=
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RepositoryLocalBase = void 0;

var _RsData = require("../dataModels/RsData");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RepositoryLocalBase {
  constructor(rsData = new _RsData.RsData()) {
    this.rsData = rsData;

    _defineProperty(this, "log", []);
  }

  async getClaim(id) {
    return this.rsData.claims[id];
  }

  async getClaimEdge(id) {
    return this.rsData.claimEdges[id];
  }

  async getScore(id) {
    return this.rsData.scores[id];
  }

  async getClaimEdgesByParentId(parentId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByParentId[parentId];
    const claimEdges = [];

    if (claimEdgeIdStrings) {
      for (const claimEdgeIdString of claimEdgeIdStrings) {
        const claimEdge = await this.getClaimEdge(claimEdgeIdString);
        if (claimEdge) claimEdges.push(claimEdge);
      }
    }

    return claimEdges;
  }

  async getClaimEdgesByChildId(childId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByChildId[childId];
    const claimEdges = [];

    for (const claimEdgeIdString of claimEdgeIdStrings) {
      const claimEdge = await this.getClaimEdge(claimEdgeIdString);
      if (claimEdge) claimEdges.push(claimEdge);
    }

    return claimEdges;
  }

  async getScoresBySourceId(sourceClaimId) {
    const scoreIdStrings = this.rsData.scoreIdsBySourceId[sourceClaimId];
    const scores = [];

    if (scoreIdStrings) {
      for (const scoreIdString of scoreIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

  async getChildrenByScoreId(parentScoreId) {
    const childIdStrings = this.rsData.childIdsByScoreId[parentScoreId];
    const scores = [];

    if (childIdStrings) {
      for (const scoreIdString of childIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

}

exports.RepositoryLocalBase = RepositoryLocalBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBvc2l0b3JpZXMvUmVwb3NpdG9yeUxvY2FsQmFzZS50cyJdLCJuYW1lcyI6WyJSZXBvc2l0b3J5TG9jYWxCYXNlIiwiY29uc3RydWN0b3IiLCJyc0RhdGEiLCJSc0RhdGEiLCJnZXRDbGFpbSIsImlkIiwiY2xhaW1zIiwiZ2V0Q2xhaW1FZGdlIiwiY2xhaW1FZGdlcyIsImdldFNjb3JlIiwic2NvcmVzIiwiZ2V0Q2xhaW1FZGdlc0J5UGFyZW50SWQiLCJwYXJlbnRJZCIsImNsYWltRWRnZUlkU3RyaW5ncyIsImNsYWltRWRnZUlkc0J5UGFyZW50SWQiLCJjbGFpbUVkZ2VJZFN0cmluZyIsImNsYWltRWRnZSIsInB1c2giLCJnZXRDbGFpbUVkZ2VzQnlDaGlsZElkIiwiY2hpbGRJZCIsImNsYWltRWRnZUlkc0J5Q2hpbGRJZCIsImdldFNjb3Jlc0J5U291cmNlSWQiLCJzb3VyY2VDbGFpbUlkIiwic2NvcmVJZFN0cmluZ3MiLCJzY29yZUlkc0J5U291cmNlSWQiLCJzY29yZUlkU3RyaW5nIiwic2NvcmUiLCJnZXRDaGlsZHJlbkJ5U2NvcmVJZCIsInBhcmVudFNjb3JlSWQiLCJjaGlsZElkU3RyaW5ncyIsImNoaWxkSWRzQnlTY29yZUlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7Ozs7QUFLTyxNQUFNQSxtQkFBTixDQUEwQjtBQUU3QkMsRUFBQUEsV0FBVyxDQUNBQyxNQUFlLEdBQUcsSUFBSUMsY0FBSixFQURsQixFQUVUO0FBQUEsU0FEU0QsTUFDVCxHQURTQSxNQUNUOztBQUFBLGlDQXNEaUMsRUF0RGpDO0FBQ0Q7O0FBRUQsUUFBTUUsUUFBTixDQUFlQyxFQUFmLEVBQXdEO0FBQ3BELFdBQU8sS0FBS0gsTUFBTCxDQUFZSSxNQUFaLENBQW1CRCxFQUFuQixDQUFQO0FBQ0g7O0FBQ0QsUUFBTUUsWUFBTixDQUFtQkYsRUFBbkIsRUFBZ0U7QUFDNUQsV0FBTyxLQUFLSCxNQUFMLENBQVlNLFVBQVosQ0FBdUJILEVBQXZCLENBQVA7QUFDSDs7QUFDRCxRQUFNSSxRQUFOLENBQWVKLEVBQWYsRUFBd0Q7QUFDcEQsV0FBTyxLQUFLSCxNQUFMLENBQVlRLE1BQVosQ0FBbUJMLEVBQW5CLENBQVA7QUFDSDs7QUFDRCxRQUFNTSx1QkFBTixDQUE4QkMsUUFBOUIsRUFBdUU7QUFDbkUsVUFBTUMsa0JBQWtCLEdBQUcsS0FBS1gsTUFBTCxDQUFZWSxzQkFBWixDQUFtQ0YsUUFBbkMsQ0FBM0I7QUFDQSxVQUFNSixVQUF3QixHQUFHLEVBQWpDOztBQUNBLFFBQUlLLGtCQUFKLEVBQXdCO0FBQ3BCLFdBQUssTUFBTUUsaUJBQVgsSUFBZ0NGLGtCQUFoQyxFQUFvRDtBQUNoRCxjQUFNRyxTQUFTLEdBQUcsTUFBTSxLQUFLVCxZQUFMLENBQWtCUSxpQkFBbEIsQ0FBeEI7QUFDQSxZQUFJQyxTQUFKLEVBQWVSLFVBQVUsQ0FBQ1MsSUFBWCxDQUFnQkQsU0FBaEI7QUFDbEI7QUFDSjs7QUFDRCxXQUFPUixVQUFQO0FBQ0g7O0FBQ0QsUUFBTVUsc0JBQU4sQ0FBNkJDLE9BQTdCLEVBQXFFO0FBQ2pFLFVBQU1OLGtCQUFrQixHQUFHLEtBQUtYLE1BQUwsQ0FBWWtCLHFCQUFaLENBQWtDRCxPQUFsQyxDQUEzQjtBQUNBLFVBQU1YLFVBQXdCLEdBQUcsRUFBakM7O0FBQ0EsU0FBSyxNQUFNTyxpQkFBWCxJQUFnQ0Ysa0JBQWhDLEVBQW9EO0FBQ2hELFlBQU1HLFNBQVMsR0FBRyxNQUFNLEtBQUtULFlBQUwsQ0FBa0JRLGlCQUFsQixDQUF4QjtBQUNBLFVBQUlDLFNBQUosRUFBZVIsVUFBVSxDQUFDUyxJQUFYLENBQWdCRCxTQUFoQjtBQUNsQjs7QUFDRCxXQUFPUixVQUFQO0FBQ0g7O0FBQ0QsUUFBTWEsbUJBQU4sQ0FBMEJDLGFBQTFCLEVBQW9FO0FBQ2hFLFVBQU1DLGNBQWMsR0FBRyxLQUFLckIsTUFBTCxDQUFZc0Isa0JBQVosQ0FBK0JGLGFBQS9CLENBQXZCO0FBQ0EsVUFBTVosTUFBZ0IsR0FBRyxFQUF6Qjs7QUFDQSxRQUFJYSxjQUFKLEVBQW9CO0FBQ2hCLFdBQUssTUFBTUUsYUFBWCxJQUE0QkYsY0FBNUIsRUFBNEM7QUFDeEMsY0FBTUcsS0FBSyxHQUFHLE1BQU0sS0FBS2pCLFFBQUwsQ0FBY2dCLGFBQWQsQ0FBcEI7QUFDQSxZQUFJQyxLQUFKLEVBQVdoQixNQUFNLENBQUNPLElBQVAsQ0FBWVMsS0FBWjtBQUNkO0FBQ0o7O0FBQ0QsV0FBT2hCLE1BQVA7QUFDSDs7QUFDRCxRQUFNaUIsb0JBQU4sQ0FBMkJDLGFBQTNCLEVBQXFFO0FBQ2pFLFVBQU1DLGNBQWMsR0FBRyxLQUFLM0IsTUFBTCxDQUFZNEIsaUJBQVosQ0FBOEJGLGFBQTlCLENBQXZCO0FBQ0EsVUFBTWxCLE1BQWdCLEdBQUcsRUFBekI7O0FBQ0EsUUFBSW1CLGNBQUosRUFBb0I7QUFDaEIsV0FBSyxNQUFNSixhQUFYLElBQTRCSSxjQUE1QixFQUE0QztBQUN4QyxjQUFNSCxLQUFLLEdBQUcsTUFBTSxLQUFLakIsUUFBTCxDQUFjZ0IsYUFBZCxDQUFwQjtBQUNBLFlBQUlDLEtBQUosRUFBV2hCLE1BQU0sQ0FBQ08sSUFBUCxDQUFZUyxLQUFaO0FBQ2Q7QUFDSjs7QUFDRCxXQUFPaEIsTUFBUDtBQUNIOztBQXpENEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpQ2xhaW1FZGdlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQ2xhaW1FZGdlXCI7XHJcbmltcG9ydCB7IGlTY29yZSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL1Njb3JlXCI7XHJcbmltcG9ydCB7IFJzRGF0YSwgaVJzRGF0YSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL1JzRGF0YVwiO1xyXG5pbXBvcnQgeyBpQWN0aW9uIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQWN0aW9uXCI7XHJcbmltcG9ydCB7IGlDbGFpbSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0NsYWltXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFJlcG9zaXRvcnlMb2NhbEJhc2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyByc0RhdGE6IGlSc0RhdGEgPSBuZXcgUnNEYXRhKClcclxuICAgICkge1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldENsYWltKGlkOiBzdHJpbmcpOiBQcm9taXNlPGlDbGFpbSB8IHVuZGVmaW5lZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJzRGF0YS5jbGFpbXNbaWRdO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0Q2xhaW1FZGdlKGlkOiBzdHJpbmcpOiBQcm9taXNlPGlDbGFpbUVkZ2UgfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yc0RhdGEuY2xhaW1FZGdlc1tpZF07XHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRTY29yZShpZDogc3RyaW5nKTogUHJvbWlzZTxpU2NvcmUgfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yc0RhdGEuc2NvcmVzW2lkXTtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldENsYWltRWRnZXNCeVBhcmVudElkKHBhcmVudElkOiBzdHJpbmcpOiBQcm9taXNlPGlDbGFpbUVkZ2VbXT4ge1xyXG4gICAgICAgIGNvbnN0IGNsYWltRWRnZUlkU3RyaW5ncyA9IHRoaXMucnNEYXRhLmNsYWltRWRnZUlkc0J5UGFyZW50SWRbcGFyZW50SWRdO1xyXG4gICAgICAgIGNvbnN0IGNsYWltRWRnZXM6IGlDbGFpbUVkZ2VbXSA9IFtdO1xyXG4gICAgICAgIGlmIChjbGFpbUVkZ2VJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjbGFpbUVkZ2VJZFN0cmluZyBvZiBjbGFpbUVkZ2VJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNsYWltRWRnZSA9IGF3YWl0IHRoaXMuZ2V0Q2xhaW1FZGdlKGNsYWltRWRnZUlkU3RyaW5nKVxyXG4gICAgICAgICAgICAgICAgaWYgKGNsYWltRWRnZSkgY2xhaW1FZGdlcy5wdXNoKGNsYWltRWRnZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2xhaW1FZGdlc1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0Q2xhaW1FZGdlc0J5Q2hpbGRJZChjaGlsZElkOiBzdHJpbmcpOiBQcm9taXNlPGlDbGFpbUVkZ2VbXT4ge1xyXG4gICAgICAgIGNvbnN0IGNsYWltRWRnZUlkU3RyaW5ncyA9IHRoaXMucnNEYXRhLmNsYWltRWRnZUlkc0J5Q2hpbGRJZFtjaGlsZElkXTtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VzOiBpQ2xhaW1FZGdlW10gPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNsYWltRWRnZUlkU3RyaW5nIG9mIGNsYWltRWRnZUlkU3RyaW5ncykge1xyXG4gICAgICAgICAgICBjb25zdCBjbGFpbUVkZ2UgPSBhd2FpdCB0aGlzLmdldENsYWltRWRnZShjbGFpbUVkZ2VJZFN0cmluZylcclxuICAgICAgICAgICAgaWYgKGNsYWltRWRnZSkgY2xhaW1FZGdlcy5wdXNoKGNsYWltRWRnZSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsYWltRWRnZXNcclxuICAgIH1cclxuICAgIGFzeW5jIGdldFNjb3Jlc0J5U291cmNlSWQoc291cmNlQ2xhaW1JZDogc3RyaW5nKTogUHJvbWlzZTxpU2NvcmVbXT4ge1xyXG4gICAgICAgIGNvbnN0IHNjb3JlSWRTdHJpbmdzID0gdGhpcy5yc0RhdGEuc2NvcmVJZHNCeVNvdXJjZUlkW3NvdXJjZUNsYWltSWRdO1xyXG4gICAgICAgIGNvbnN0IHNjb3JlczogaVNjb3JlW10gPSBbXTtcclxuICAgICAgICBpZiAoc2NvcmVJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBzY29yZUlkU3RyaW5nIG9mIHNjb3JlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzY29yZSA9IGF3YWl0IHRoaXMuZ2V0U2NvcmUoc2NvcmVJZFN0cmluZylcclxuICAgICAgICAgICAgICAgIGlmIChzY29yZSkgc2NvcmVzLnB1c2goc2NvcmUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNjb3Jlc1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0Q2hpbGRyZW5CeVNjb3JlSWQocGFyZW50U2NvcmVJZDogc3RyaW5nKTogUHJvbWlzZTxpU2NvcmVbXT4ge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkSWRTdHJpbmdzID0gdGhpcy5yc0RhdGEuY2hpbGRJZHNCeVNjb3JlSWRbcGFyZW50U2NvcmVJZF07XHJcbiAgICAgICAgY29uc3Qgc2NvcmVzOiBpU2NvcmVbXSA9IFtdO1xyXG4gICAgICAgIGlmIChjaGlsZElkU3RyaW5ncykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNjb3JlSWRTdHJpbmcgb2YgY2hpbGRJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNjb3JlID0gYXdhaXQgdGhpcy5nZXRTY29yZShzY29yZUlkU3RyaW5nKVxyXG4gICAgICAgICAgICAgICAgaWYgKHNjb3JlKSBzY29yZXMucHVzaChzY29yZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2NvcmVzXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbG9nOiBpQWN0aW9uW11bXSA9IFtdO1xyXG5cclxufSJdfQ==
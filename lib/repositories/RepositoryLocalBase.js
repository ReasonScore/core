"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RepositoryLocalBase = void 0;

var _RsData = require("../dataModels/RsData");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RepositoryLocalBase {
  constructor(rsData = new _RsData.RsData()) {
    this.rsData = rsData;

    _defineProperty(this, "log", []);
  }

  async getClaim(id) {
    return this.rsData.items[id];
  }

  async getClaimEdge(id) {
    return this.rsData.items[id];
  }

  async getScore(id) {
    return this.rsData.items[id];
  }

  async getScoreTree(id) {
    return this.rsData.items[id];
  }

  async getClaimEdgesByParentId(parentId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByParentId[parentId];
    const claimEdges = [];

    if (claimEdgeIdStrings) {
      for (const claimEdgeIdString of claimEdgeIdStrings) {
        const claimEdge = await this.getClaimEdge(claimEdgeIdString);
        if (claimEdge) claimEdges.push(claimEdge);
      }
    }

    return claimEdges;
  }

  async getClaimEdgesByChildId(childId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByChildId[childId];
    const claimEdges = [];

    for (const claimEdgeIdString of claimEdgeIdStrings) {
      const claimEdge = await this.getClaimEdge(claimEdgeIdString);
      if (claimEdge) claimEdges.push(claimEdge);
    }

    return claimEdges;
  }

  async getScoresBySourceId(sourceClaimId) {
    const scoreIdStrings = this.rsData.scoreIdsBySourceId[sourceClaimId];
    const scores = [];

    if (scoreIdStrings) {
      for (const scoreIdString of scoreIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

  async getChildrenByScoreId(parentScoreId) {
    const childIdStrings = this.rsData.childIdsByScoreId[parentScoreId];
    const scores = [];

    if (childIdStrings) {
      for (const scoreIdString of childIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

}

exports.RepositoryLocalBase = RepositoryLocalBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBvc2l0b3JpZXMvUmVwb3NpdG9yeUxvY2FsQmFzZS50cyJdLCJuYW1lcyI6WyJSZXBvc2l0b3J5TG9jYWxCYXNlIiwiY29uc3RydWN0b3IiLCJyc0RhdGEiLCJSc0RhdGEiLCJnZXRDbGFpbSIsImlkIiwiaXRlbXMiLCJnZXRDbGFpbUVkZ2UiLCJnZXRTY29yZSIsImdldFNjb3JlVHJlZSIsImdldENsYWltRWRnZXNCeVBhcmVudElkIiwicGFyZW50SWQiLCJjbGFpbUVkZ2VJZFN0cmluZ3MiLCJjbGFpbUVkZ2VJZHNCeVBhcmVudElkIiwiY2xhaW1FZGdlcyIsImNsYWltRWRnZUlkU3RyaW5nIiwiY2xhaW1FZGdlIiwicHVzaCIsImdldENsYWltRWRnZXNCeUNoaWxkSWQiLCJjaGlsZElkIiwiY2xhaW1FZGdlSWRzQnlDaGlsZElkIiwiZ2V0U2NvcmVzQnlTb3VyY2VJZCIsInNvdXJjZUNsYWltSWQiLCJzY29yZUlkU3RyaW5ncyIsInNjb3JlSWRzQnlTb3VyY2VJZCIsInNjb3JlcyIsInNjb3JlSWRTdHJpbmciLCJzY29yZSIsImdldENoaWxkcmVuQnlTY29yZUlkIiwicGFyZW50U2NvcmVJZCIsImNoaWxkSWRTdHJpbmdzIiwiY2hpbGRJZHNCeVNjb3JlSWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7OztBQU1PLE1BQU1BLG1CQUFOLENBQTBCO0FBRTdCQyxFQUFBQSxXQUFXLENBQ0FDLE1BQWMsR0FBRyxJQUFJQyxjQUFKLEVBRGpCLEVBRVQ7QUFBQSxTQURTRCxNQUNULEdBRFNBLE1BQ1Q7O0FBQUEsaUNBeURnQyxFQXpEaEM7QUFDRDs7QUFFRCxRQUFNRSxRQUFOLENBQWVDLEVBQWYsRUFBdUQ7QUFDbkQsV0FBTyxLQUFLSCxNQUFMLENBQVlJLEtBQVosQ0FBa0JELEVBQWxCLENBQVA7QUFDSDs7QUFDRCxRQUFNRSxZQUFOLENBQW1CRixFQUFuQixFQUErRDtBQUMzRCxXQUFPLEtBQUtILE1BQUwsQ0FBWUksS0FBWixDQUFrQkQsRUFBbEIsQ0FBUDtBQUNIOztBQUNELFFBQU1HLFFBQU4sQ0FBZUgsRUFBZixFQUF1RDtBQUNuRCxXQUFPLEtBQUtILE1BQUwsQ0FBWUksS0FBWixDQUFrQkQsRUFBbEIsQ0FBUDtBQUNIOztBQUNELFFBQU1JLFlBQU4sQ0FBbUJKLEVBQW5CLEVBQStEO0FBQzNELFdBQU8sS0FBS0gsTUFBTCxDQUFZSSxLQUFaLENBQWtCRCxFQUFsQixDQUFQO0FBQ0g7O0FBQ0QsUUFBTUssdUJBQU4sQ0FBOEJDLFFBQTlCLEVBQXNFO0FBQ2xFLFVBQU1DLGtCQUFrQixHQUFHLEtBQUtWLE1BQUwsQ0FBWVcsc0JBQVosQ0FBbUNGLFFBQW5DLENBQTNCO0FBQ0EsVUFBTUcsVUFBdUIsR0FBRyxFQUFoQzs7QUFDQSxRQUFJRixrQkFBSixFQUF3QjtBQUNwQixXQUFLLE1BQU1HLGlCQUFYLElBQWdDSCxrQkFBaEMsRUFBb0Q7QUFDaEQsY0FBTUksU0FBUyxHQUFHLE1BQU0sS0FBS1QsWUFBTCxDQUFrQlEsaUJBQWxCLENBQXhCO0FBQ0EsWUFBSUMsU0FBSixFQUFlRixVQUFVLENBQUNHLElBQVgsQ0FBZ0JELFNBQWhCO0FBQ2xCO0FBQ0o7O0FBQ0QsV0FBT0YsVUFBUDtBQUNIOztBQUNELFFBQU1JLHNCQUFOLENBQTZCQyxPQUE3QixFQUFvRTtBQUNoRSxVQUFNUCxrQkFBa0IsR0FBRyxLQUFLVixNQUFMLENBQVlrQixxQkFBWixDQUFrQ0QsT0FBbEMsQ0FBM0I7QUFDQSxVQUFNTCxVQUF1QixHQUFHLEVBQWhDOztBQUNBLFNBQUssTUFBTUMsaUJBQVgsSUFBZ0NILGtCQUFoQyxFQUFvRDtBQUNoRCxZQUFNSSxTQUFTLEdBQUcsTUFBTSxLQUFLVCxZQUFMLENBQWtCUSxpQkFBbEIsQ0FBeEI7QUFDQSxVQUFJQyxTQUFKLEVBQWVGLFVBQVUsQ0FBQ0csSUFBWCxDQUFnQkQsU0FBaEI7QUFDbEI7O0FBQ0QsV0FBT0YsVUFBUDtBQUNIOztBQUNELFFBQU1PLG1CQUFOLENBQTBCQyxhQUExQixFQUFtRTtBQUMvRCxVQUFNQyxjQUFjLEdBQUcsS0FBS3JCLE1BQUwsQ0FBWXNCLGtCQUFaLENBQStCRixhQUEvQixDQUF2QjtBQUNBLFVBQU1HLE1BQWUsR0FBRyxFQUF4Qjs7QUFDQSxRQUFJRixjQUFKLEVBQW9CO0FBQ2hCLFdBQUssTUFBTUcsYUFBWCxJQUE0QkgsY0FBNUIsRUFBNEM7QUFDeEMsY0FBTUksS0FBSyxHQUFHLE1BQU0sS0FBS25CLFFBQUwsQ0FBY2tCLGFBQWQsQ0FBcEI7QUFDQSxZQUFJQyxLQUFKLEVBQVdGLE1BQU0sQ0FBQ1IsSUFBUCxDQUFZVSxLQUFaO0FBQ2Q7QUFDSjs7QUFDRCxXQUFPRixNQUFQO0FBQ0g7O0FBQ0QsUUFBTUcsb0JBQU4sQ0FBMkJDLGFBQTNCLEVBQW9FO0FBQ2hFLFVBQU1DLGNBQWMsR0FBRyxLQUFLNUIsTUFBTCxDQUFZNkIsaUJBQVosQ0FBOEJGLGFBQTlCLENBQXZCO0FBQ0EsVUFBTUosTUFBZSxHQUFHLEVBQXhCOztBQUNBLFFBQUlLLGNBQUosRUFBb0I7QUFDaEIsV0FBSyxNQUFNSixhQUFYLElBQTRCSSxjQUE1QixFQUE0QztBQUN4QyxjQUFNSCxLQUFLLEdBQUcsTUFBTSxLQUFLbkIsUUFBTCxDQUFja0IsYUFBZCxDQUFwQjtBQUNBLFlBQUlDLEtBQUosRUFBV0YsTUFBTSxDQUFDUixJQUFQLENBQVlVLEtBQVo7QUFDZDtBQUNKOztBQUNELFdBQU9GLE1BQVA7QUFDSDs7QUE1RDRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xhaW1FZGdlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQ2xhaW1FZGdlXCI7XHJcbmltcG9ydCB7IFNjb3JlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvU2NvcmVcIjtcclxuaW1wb3J0IHsgUnNEYXRhIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvUnNEYXRhXCI7XHJcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0FjdGlvblwiO1xyXG5pbXBvcnQgeyBDbGFpbSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0NsYWltXCI7XHJcbmltcG9ydCB7IFNjb3JlVHJlZSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL1Njb3JlVHJlZVwiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBSZXBvc2l0b3J5TG9jYWxCYXNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgcnNEYXRhOiBSc0RhdGEgPSBuZXcgUnNEYXRhKClcclxuICAgICkge1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldENsYWltKGlkOiBzdHJpbmcpOiBQcm9taXNlPENsYWltIHwgdW5kZWZpbmVkPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucnNEYXRhLml0ZW1zW2lkXSBhcyBDbGFpbTtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldENsYWltRWRnZShpZDogc3RyaW5nKTogUHJvbWlzZTxDbGFpbUVkZ2UgfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yc0RhdGEuaXRlbXNbaWRdIGFzIENsYWltRWRnZTtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldFNjb3JlKGlkOiBzdHJpbmcpOiBQcm9taXNlPFNjb3JlIHwgdW5kZWZpbmVkPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucnNEYXRhLml0ZW1zW2lkXSBhcyBTY29yZTtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldFNjb3JlVHJlZShpZDogc3RyaW5nKTogUHJvbWlzZTxTY29yZVRyZWUgfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yc0RhdGEuaXRlbXNbaWRdIGFzIFNjb3JlVHJlZTtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldENsYWltRWRnZXNCeVBhcmVudElkKHBhcmVudElkOiBzdHJpbmcpOiBQcm9taXNlPENsYWltRWRnZVtdPiB7XHJcbiAgICAgICAgY29uc3QgY2xhaW1FZGdlSWRTdHJpbmdzID0gdGhpcy5yc0RhdGEuY2xhaW1FZGdlSWRzQnlQYXJlbnRJZFtwYXJlbnRJZF07XHJcbiAgICAgICAgY29uc3QgY2xhaW1FZGdlczogQ2xhaW1FZGdlW10gPSBbXTtcclxuICAgICAgICBpZiAoY2xhaW1FZGdlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2xhaW1FZGdlSWRTdHJpbmcgb2YgY2xhaW1FZGdlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbGFpbUVkZ2UgPSBhd2FpdCB0aGlzLmdldENsYWltRWRnZShjbGFpbUVkZ2VJZFN0cmluZylcclxuICAgICAgICAgICAgICAgIGlmIChjbGFpbUVkZ2UpIGNsYWltRWRnZXMucHVzaChjbGFpbUVkZ2UpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsYWltRWRnZXNcclxuICAgIH1cclxuICAgIGFzeW5jIGdldENsYWltRWRnZXNCeUNoaWxkSWQoY2hpbGRJZDogc3RyaW5nKTogUHJvbWlzZTxDbGFpbUVkZ2VbXT4ge1xyXG4gICAgICAgIGNvbnN0IGNsYWltRWRnZUlkU3RyaW5ncyA9IHRoaXMucnNEYXRhLmNsYWltRWRnZUlkc0J5Q2hpbGRJZFtjaGlsZElkXTtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VzOiBDbGFpbUVkZ2VbXSA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2xhaW1FZGdlSWRTdHJpbmcgb2YgY2xhaW1FZGdlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsYWltRWRnZSA9IGF3YWl0IHRoaXMuZ2V0Q2xhaW1FZGdlKGNsYWltRWRnZUlkU3RyaW5nKVxyXG4gICAgICAgICAgICBpZiAoY2xhaW1FZGdlKSBjbGFpbUVkZ2VzLnB1c2goY2xhaW1FZGdlKVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2xhaW1FZGdlc1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0U2NvcmVzQnlTb3VyY2VJZChzb3VyY2VDbGFpbUlkOiBzdHJpbmcpOiBQcm9taXNlPFNjb3JlW10+IHtcclxuICAgICAgICBjb25zdCBzY29yZUlkU3RyaW5ncyA9IHRoaXMucnNEYXRhLnNjb3JlSWRzQnlTb3VyY2VJZFtzb3VyY2VDbGFpbUlkXTtcclxuICAgICAgICBjb25zdCBzY29yZXM6IFNjb3JlW10gPSBbXTtcclxuICAgICAgICBpZiAoc2NvcmVJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBzY29yZUlkU3RyaW5nIG9mIHNjb3JlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzY29yZSA9IGF3YWl0IHRoaXMuZ2V0U2NvcmUoc2NvcmVJZFN0cmluZylcclxuICAgICAgICAgICAgICAgIGlmIChzY29yZSkgc2NvcmVzLnB1c2goc2NvcmUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNjb3Jlc1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0Q2hpbGRyZW5CeVNjb3JlSWQocGFyZW50U2NvcmVJZDogc3RyaW5nKTogUHJvbWlzZTxTY29yZVtdPiB7XHJcbiAgICAgICAgY29uc3QgY2hpbGRJZFN0cmluZ3MgPSB0aGlzLnJzRGF0YS5jaGlsZElkc0J5U2NvcmVJZFtwYXJlbnRTY29yZUlkXTtcclxuICAgICAgICBjb25zdCBzY29yZXM6IFNjb3JlW10gPSBbXTtcclxuICAgICAgICBpZiAoY2hpbGRJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBzY29yZUlkU3RyaW5nIG9mIGNoaWxkSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzY29yZSA9IGF3YWl0IHRoaXMuZ2V0U2NvcmUoc2NvcmVJZFN0cmluZylcclxuICAgICAgICAgICAgICAgIGlmIChzY29yZSkgc2NvcmVzLnB1c2goc2NvcmUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNjb3Jlc1xyXG4gICAgfVxyXG4gICAgcHVibGljIHJlYWRvbmx5IGxvZzogQWN0aW9uW11bXSA9IFtdO1xyXG5cclxufSJdfQ==
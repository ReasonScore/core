"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RepositoryLocalBase = void 0;

var _RsData = require("../dataModels/RsData");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RepositoryLocalBase {
  constructor(rsData = new _RsData.RsData()) {
    this.rsData = rsData;

    _defineProperty(this, "log", []);
  }

  async getClaim(id) {
    return this.rsData.items[id];
  }

  async getClaimEdge(id) {
    return this.rsData.items[id];
  }

  async getScore(id) {
    return this.rsData.items[id];
  }

  async getScoreTree(id) {
    return this.rsData.items[id];
  }

  async getClaimEdgesByParentId(parentId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByParentId[parentId];
    const claimEdges = [];

    if (claimEdgeIdStrings) {
      for (const claimEdgeIdString of claimEdgeIdStrings) {
        const claimEdge = await this.getClaimEdge(claimEdgeIdString);
        if (claimEdge) claimEdges.push(claimEdge);
      }
    }

    return claimEdges;
  }

  async getClaimEdgesByChildId(childId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByChildId[childId];
    const claimEdges = [];

    for (const claimEdgeIdString of claimEdgeIdStrings) {
      const claimEdge = await this.getClaimEdge(claimEdgeIdString);
      if (claimEdge) claimEdges.push(claimEdge);
    }

    return claimEdges;
  }

  async getScoresBySourceId(sourceClaimId) {
    const scoreIdStrings = this.rsData.scoreIdsBySourceId[sourceClaimId];
    const scores = [];

    if (scoreIdStrings) {
      for (const scoreIdString of scoreIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

  async getChildrenByScoreId(parentScoreId) {
    const childIdStrings = this.rsData.childIdsByScoreId[parentScoreId];
    const scores = [];

    if (childIdStrings) {
      for (const scoreIdString of childIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

}

exports.RepositoryLocalBase = RepositoryLocalBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBvc2l0b3JpZXMvUmVwb3NpdG9yeUxvY2FsQmFzZS50cyJdLCJuYW1lcyI6WyJSZXBvc2l0b3J5TG9jYWxCYXNlIiwiY29uc3RydWN0b3IiLCJyc0RhdGEiLCJSc0RhdGEiLCJnZXRDbGFpbSIsImlkIiwiaXRlbXMiLCJnZXRDbGFpbUVkZ2UiLCJnZXRTY29yZSIsImdldFNjb3JlVHJlZSIsImdldENsYWltRWRnZXNCeVBhcmVudElkIiwicGFyZW50SWQiLCJjbGFpbUVkZ2VJZFN0cmluZ3MiLCJjbGFpbUVkZ2VJZHNCeVBhcmVudElkIiwiY2xhaW1FZGdlcyIsImNsYWltRWRnZUlkU3RyaW5nIiwiY2xhaW1FZGdlIiwicHVzaCIsImdldENsYWltRWRnZXNCeUNoaWxkSWQiLCJjaGlsZElkIiwiY2xhaW1FZGdlSWRzQnlDaGlsZElkIiwiZ2V0U2NvcmVzQnlTb3VyY2VJZCIsInNvdXJjZUNsYWltSWQiLCJzY29yZUlkU3RyaW5ncyIsInNjb3JlSWRzQnlTb3VyY2VJZCIsInNjb3JlcyIsInNjb3JlSWRTdHJpbmciLCJzY29yZSIsImdldENoaWxkcmVuQnlTY29yZUlkIiwicGFyZW50U2NvcmVJZCIsImNoaWxkSWRTdHJpbmdzIiwiY2hpbGRJZHNCeVNjb3JlSWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7OztBQU1PLE1BQU1BLG1CQUFOLENBQTBCO0FBRTdCQyxFQUFBQSxXQUFXLENBQ0FDLE1BQWMsR0FBRyxJQUFJQyxjQUFKLEVBRGpCLEVBRVQ7QUFBQSxTQURTRCxNQUNULEdBRFNBLE1BQ1Q7O0FBQUEsaUNBeURnQyxFQXpEaEM7QUFDRDs7QUFFYSxRQUFSRSxRQUFRLENBQUNDLEVBQUQsRUFBeUM7QUFDbkQsV0FBTyxLQUFLSCxNQUFMLENBQVlJLEtBQVosQ0FBa0JELEVBQWxCLENBQVA7QUFDSDs7QUFDaUIsUUFBWkUsWUFBWSxDQUFDRixFQUFELEVBQTZDO0FBQzNELFdBQU8sS0FBS0gsTUFBTCxDQUFZSSxLQUFaLENBQWtCRCxFQUFsQixDQUFQO0FBQ0g7O0FBQ2EsUUFBUkcsUUFBUSxDQUFDSCxFQUFELEVBQXlDO0FBQ25ELFdBQU8sS0FBS0gsTUFBTCxDQUFZSSxLQUFaLENBQWtCRCxFQUFsQixDQUFQO0FBQ0g7O0FBQ2lCLFFBQVpJLFlBQVksQ0FBQ0osRUFBRCxFQUE2QztBQUMzRCxXQUFPLEtBQUtILE1BQUwsQ0FBWUksS0FBWixDQUFrQkQsRUFBbEIsQ0FBUDtBQUNIOztBQUM0QixRQUF2QkssdUJBQXVCLENBQUNDLFFBQUQsRUFBeUM7QUFDbEUsVUFBTUMsa0JBQWtCLEdBQUcsS0FBS1YsTUFBTCxDQUFZVyxzQkFBWixDQUFtQ0YsUUFBbkMsQ0FBM0I7QUFDQSxVQUFNRyxVQUF1QixHQUFHLEVBQWhDOztBQUNBLFFBQUlGLGtCQUFKLEVBQXdCO0FBQ3BCLFdBQUssTUFBTUcsaUJBQVgsSUFBZ0NILGtCQUFoQyxFQUFvRDtBQUNoRCxjQUFNSSxTQUFTLEdBQUcsTUFBTSxLQUFLVCxZQUFMLENBQWtCUSxpQkFBbEIsQ0FBeEI7QUFDQSxZQUFJQyxTQUFKLEVBQWVGLFVBQVUsQ0FBQ0csSUFBWCxDQUFnQkQsU0FBaEI7QUFDbEI7QUFDSjs7QUFDRCxXQUFPRixVQUFQO0FBQ0g7O0FBQzJCLFFBQXRCSSxzQkFBc0IsQ0FBQ0MsT0FBRCxFQUF3QztBQUNoRSxVQUFNUCxrQkFBa0IsR0FBRyxLQUFLVixNQUFMLENBQVlrQixxQkFBWixDQUFrQ0QsT0FBbEMsQ0FBM0I7QUFDQSxVQUFNTCxVQUF1QixHQUFHLEVBQWhDOztBQUNBLFNBQUssTUFBTUMsaUJBQVgsSUFBZ0NILGtCQUFoQyxFQUFvRDtBQUNoRCxZQUFNSSxTQUFTLEdBQUcsTUFBTSxLQUFLVCxZQUFMLENBQWtCUSxpQkFBbEIsQ0FBeEI7QUFDQSxVQUFJQyxTQUFKLEVBQWVGLFVBQVUsQ0FBQ0csSUFBWCxDQUFnQkQsU0FBaEI7QUFDbEI7O0FBQ0QsV0FBT0YsVUFBUDtBQUNIOztBQUN3QixRQUFuQk8sbUJBQW1CLENBQUNDLGFBQUQsRUFBMEM7QUFDL0QsVUFBTUMsY0FBYyxHQUFHLEtBQUtyQixNQUFMLENBQVlzQixrQkFBWixDQUErQkYsYUFBL0IsQ0FBdkI7QUFDQSxVQUFNRyxNQUFlLEdBQUcsRUFBeEI7O0FBQ0EsUUFBSUYsY0FBSixFQUFvQjtBQUNoQixXQUFLLE1BQU1HLGFBQVgsSUFBNEJILGNBQTVCLEVBQTRDO0FBQ3hDLGNBQU1JLEtBQUssR0FBRyxNQUFNLEtBQUtuQixRQUFMLENBQWNrQixhQUFkLENBQXBCO0FBQ0EsWUFBSUMsS0FBSixFQUFXRixNQUFNLENBQUNSLElBQVAsQ0FBWVUsS0FBWjtBQUNkO0FBQ0o7O0FBQ0QsV0FBT0YsTUFBUDtBQUNIOztBQUN5QixRQUFwQkcsb0JBQW9CLENBQUNDLGFBQUQsRUFBMEM7QUFDaEUsVUFBTUMsY0FBYyxHQUFHLEtBQUs1QixNQUFMLENBQVk2QixpQkFBWixDQUE4QkYsYUFBOUIsQ0FBdkI7QUFDQSxVQUFNSixNQUFlLEdBQUcsRUFBeEI7O0FBQ0EsUUFBSUssY0FBSixFQUFvQjtBQUNoQixXQUFLLE1BQU1KLGFBQVgsSUFBNEJJLGNBQTVCLEVBQTRDO0FBQ3hDLGNBQU1ILEtBQUssR0FBRyxNQUFNLEtBQUtuQixRQUFMLENBQWNrQixhQUFkLENBQXBCO0FBQ0EsWUFBSUMsS0FBSixFQUFXRixNQUFNLENBQUNSLElBQVAsQ0FBWVUsS0FBWjtBQUNkO0FBQ0o7O0FBQ0QsV0FBT0YsTUFBUDtBQUNIOztBQTVENEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGFpbUVkZ2UgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9DbGFpbUVkZ2VcIjtcclxuaW1wb3J0IHsgU2NvcmUgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9TY29yZVwiO1xyXG5pbXBvcnQgeyBSc0RhdGEgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9Sc0RhdGFcIjtcclxuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQWN0aW9uXCI7XHJcbmltcG9ydCB7IENsYWltIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvQ2xhaW1cIjtcclxuaW1wb3J0IHsgU2NvcmVUcmVlIH0gZnJvbSBcIi4uL2RhdGFNb2RlbHMvU2NvcmVUcmVlXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFJlcG9zaXRvcnlMb2NhbEJhc2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyByc0RhdGE6IFJzRGF0YSA9IG5ldyBSc0RhdGEoKVxyXG4gICAgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0Q2xhaW0oaWQ6IHN0cmluZyk6IFByb21pc2U8Q2xhaW0gfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yc0RhdGEuaXRlbXNbaWRdIGFzIENsYWltO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0Q2xhaW1FZGdlKGlkOiBzdHJpbmcpOiBQcm9taXNlPENsYWltRWRnZSB8IHVuZGVmaW5lZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJzRGF0YS5pdGVtc1tpZF0gYXMgQ2xhaW1FZGdlO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0U2NvcmUoaWQ6IHN0cmluZyk6IFByb21pc2U8U2NvcmUgfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yc0RhdGEuaXRlbXNbaWRdIGFzIFNjb3JlO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0U2NvcmVUcmVlKGlkOiBzdHJpbmcpOiBQcm9taXNlPFNjb3JlVHJlZSB8IHVuZGVmaW5lZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJzRGF0YS5pdGVtc1tpZF0gYXMgU2NvcmVUcmVlO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0Q2xhaW1FZGdlc0J5UGFyZW50SWQocGFyZW50SWQ6IHN0cmluZyk6IFByb21pc2U8Q2xhaW1FZGdlW10+IHtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VJZFN0cmluZ3MgPSB0aGlzLnJzRGF0YS5jbGFpbUVkZ2VJZHNCeVBhcmVudElkW3BhcmVudElkXTtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VzOiBDbGFpbUVkZ2VbXSA9IFtdO1xyXG4gICAgICAgIGlmIChjbGFpbUVkZ2VJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjbGFpbUVkZ2VJZFN0cmluZyBvZiBjbGFpbUVkZ2VJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNsYWltRWRnZSA9IGF3YWl0IHRoaXMuZ2V0Q2xhaW1FZGdlKGNsYWltRWRnZUlkU3RyaW5nKVxyXG4gICAgICAgICAgICAgICAgaWYgKGNsYWltRWRnZSkgY2xhaW1FZGdlcy5wdXNoKGNsYWltRWRnZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2xhaW1FZGdlc1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0Q2xhaW1FZGdlc0J5Q2hpbGRJZChjaGlsZElkOiBzdHJpbmcpOiBQcm9taXNlPENsYWltRWRnZVtdPiB7XHJcbiAgICAgICAgY29uc3QgY2xhaW1FZGdlSWRTdHJpbmdzID0gdGhpcy5yc0RhdGEuY2xhaW1FZGdlSWRzQnlDaGlsZElkW2NoaWxkSWRdO1xyXG4gICAgICAgIGNvbnN0IGNsYWltRWRnZXM6IENsYWltRWRnZVtdID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBjbGFpbUVkZ2VJZFN0cmluZyBvZiBjbGFpbUVkZ2VJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgY29uc3QgY2xhaW1FZGdlID0gYXdhaXQgdGhpcy5nZXRDbGFpbUVkZ2UoY2xhaW1FZGdlSWRTdHJpbmcpXHJcbiAgICAgICAgICAgIGlmIChjbGFpbUVkZ2UpIGNsYWltRWRnZXMucHVzaChjbGFpbUVkZ2UpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjbGFpbUVkZ2VzXHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRTY29yZXNCeVNvdXJjZUlkKHNvdXJjZUNsYWltSWQ6IHN0cmluZyk6IFByb21pc2U8U2NvcmVbXT4ge1xyXG4gICAgICAgIGNvbnN0IHNjb3JlSWRTdHJpbmdzID0gdGhpcy5yc0RhdGEuc2NvcmVJZHNCeVNvdXJjZUlkW3NvdXJjZUNsYWltSWRdO1xyXG4gICAgICAgIGNvbnN0IHNjb3JlczogU2NvcmVbXSA9IFtdO1xyXG4gICAgICAgIGlmIChzY29yZUlkU3RyaW5ncykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNjb3JlSWRTdHJpbmcgb2Ygc2NvcmVJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNjb3JlID0gYXdhaXQgdGhpcy5nZXRTY29yZShzY29yZUlkU3RyaW5nKVxyXG4gICAgICAgICAgICAgICAgaWYgKHNjb3JlKSBzY29yZXMucHVzaChzY29yZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2NvcmVzXHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRDaGlsZHJlbkJ5U2NvcmVJZChwYXJlbnRTY29yZUlkOiBzdHJpbmcpOiBQcm9taXNlPFNjb3JlW10+IHtcclxuICAgICAgICBjb25zdCBjaGlsZElkU3RyaW5ncyA9IHRoaXMucnNEYXRhLmNoaWxkSWRzQnlTY29yZUlkW3BhcmVudFNjb3JlSWRdO1xyXG4gICAgICAgIGNvbnN0IHNjb3JlczogU2NvcmVbXSA9IFtdO1xyXG4gICAgICAgIGlmIChjaGlsZElkU3RyaW5ncykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNjb3JlSWRTdHJpbmcgb2YgY2hpbGRJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNjb3JlID0gYXdhaXQgdGhpcy5nZXRTY29yZShzY29yZUlkU3RyaW5nKVxyXG4gICAgICAgICAgICAgICAgaWYgKHNjb3JlKSBzY29yZXMucHVzaChzY29yZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2NvcmVzXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbG9nOiBBY3Rpb25bXVtdID0gW107XHJcblxyXG59Il19
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RepositoryLocalBase = void 0;

var _RsData = require("../dataModels/RsData");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RepositoryLocalBase {
  constructor(rsData = new _RsData.RsData()) {
    this.rsData = rsData;

    _defineProperty(this, "log", []);
  }

  async getClaim(id) {
    return this.rsData.items[id];
  }

  async getClaimEdge(id) {
    return this.rsData.items[id];
  }

  async getScore(id) {
    return this.rsData.items[id];
  }

  async getClaimEdgesByParentId(parentId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByParentId[parentId];
    const claimEdges = [];

    if (claimEdgeIdStrings) {
      for (const claimEdgeIdString of claimEdgeIdStrings) {
        const claimEdge = await this.getClaimEdge(claimEdgeIdString);
        if (claimEdge) claimEdges.push(claimEdge);
      }
    }

    return claimEdges;
  }

  async getClaimEdgesByChildId(childId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByChildId[childId];
    const claimEdges = [];

    for (const claimEdgeIdString of claimEdgeIdStrings) {
      const claimEdge = await this.getClaimEdge(claimEdgeIdString);
      if (claimEdge) claimEdges.push(claimEdge);
    }

    return claimEdges;
  }

  async getScoresBySourceId(sourceClaimId) {
    const scoreIdStrings = this.rsData.scoreIdsBySourceId[sourceClaimId];
    const scores = [];

    if (scoreIdStrings) {
      for (const scoreIdString of scoreIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

  async getChildrenByScoreId(parentScoreId) {
    const childIdStrings = this.rsData.childIdsByScoreId[parentScoreId];
    const scores = [];

    if (childIdStrings) {
      for (const scoreIdString of childIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

}

exports.RepositoryLocalBase = RepositoryLocalBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBvc2l0b3JpZXMvUmVwb3NpdG9yeUxvY2FsQmFzZS50cyJdLCJuYW1lcyI6WyJSZXBvc2l0b3J5TG9jYWxCYXNlIiwiY29uc3RydWN0b3IiLCJyc0RhdGEiLCJSc0RhdGEiLCJnZXRDbGFpbSIsImlkIiwiaXRlbXMiLCJnZXRDbGFpbUVkZ2UiLCJnZXRTY29yZSIsImdldENsYWltRWRnZXNCeVBhcmVudElkIiwicGFyZW50SWQiLCJjbGFpbUVkZ2VJZFN0cmluZ3MiLCJjbGFpbUVkZ2VJZHNCeVBhcmVudElkIiwiY2xhaW1FZGdlcyIsImNsYWltRWRnZUlkU3RyaW5nIiwiY2xhaW1FZGdlIiwicHVzaCIsImdldENsYWltRWRnZXNCeUNoaWxkSWQiLCJjaGlsZElkIiwiY2xhaW1FZGdlSWRzQnlDaGlsZElkIiwiZ2V0U2NvcmVzQnlTb3VyY2VJZCIsInNvdXJjZUNsYWltSWQiLCJzY29yZUlkU3RyaW5ncyIsInNjb3JlSWRzQnlTb3VyY2VJZCIsInNjb3JlcyIsInNjb3JlSWRTdHJpbmciLCJzY29yZSIsImdldENoaWxkcmVuQnlTY29yZUlkIiwicGFyZW50U2NvcmVJZCIsImNoaWxkSWRTdHJpbmdzIiwiY2hpbGRJZHNCeVNjb3JlSWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7OztBQUtPLE1BQU1BLG1CQUFOLENBQTBCO0FBRTdCQyxFQUFBQSxXQUFXLENBQ0FDLE1BQWUsR0FBRyxJQUFJQyxjQUFKLEVBRGxCLEVBRVQ7QUFBQSxTQURTRCxNQUNULEdBRFNBLE1BQ1Q7O0FBQUEsaUNBc0RpQyxFQXREakM7QUFDRDs7QUFFRCxRQUFNRSxRQUFOLENBQWVDLEVBQWYsRUFBd0Q7QUFDcEQsV0FBTyxLQUFLSCxNQUFMLENBQVlJLEtBQVosQ0FBa0JELEVBQWxCLENBQVA7QUFDSDs7QUFDRCxRQUFNRSxZQUFOLENBQW1CRixFQUFuQixFQUFnRTtBQUM1RCxXQUFPLEtBQUtILE1BQUwsQ0FBWUksS0FBWixDQUFrQkQsRUFBbEIsQ0FBUDtBQUNIOztBQUNELFFBQU1HLFFBQU4sQ0FBZUgsRUFBZixFQUF3RDtBQUNwRCxXQUFPLEtBQUtILE1BQUwsQ0FBWUksS0FBWixDQUFrQkQsRUFBbEIsQ0FBUDtBQUNIOztBQUNELFFBQU1JLHVCQUFOLENBQThCQyxRQUE5QixFQUF1RTtBQUNuRSxVQUFNQyxrQkFBa0IsR0FBRyxLQUFLVCxNQUFMLENBQVlVLHNCQUFaLENBQW1DRixRQUFuQyxDQUEzQjtBQUNBLFVBQU1HLFVBQXdCLEdBQUcsRUFBakM7O0FBQ0EsUUFBSUYsa0JBQUosRUFBd0I7QUFDcEIsV0FBSyxNQUFNRyxpQkFBWCxJQUFnQ0gsa0JBQWhDLEVBQW9EO0FBQ2hELGNBQU1JLFNBQVMsR0FBRyxNQUFNLEtBQUtSLFlBQUwsQ0FBa0JPLGlCQUFsQixDQUF4QjtBQUNBLFlBQUlDLFNBQUosRUFBZUYsVUFBVSxDQUFDRyxJQUFYLENBQWdCRCxTQUFoQjtBQUNsQjtBQUNKOztBQUNELFdBQU9GLFVBQVA7QUFDSDs7QUFDRCxRQUFNSSxzQkFBTixDQUE2QkMsT0FBN0IsRUFBcUU7QUFDakUsVUFBTVAsa0JBQWtCLEdBQUcsS0FBS1QsTUFBTCxDQUFZaUIscUJBQVosQ0FBa0NELE9BQWxDLENBQTNCO0FBQ0EsVUFBTUwsVUFBd0IsR0FBRyxFQUFqQzs7QUFDQSxTQUFLLE1BQU1DLGlCQUFYLElBQWdDSCxrQkFBaEMsRUFBb0Q7QUFDaEQsWUFBTUksU0FBUyxHQUFHLE1BQU0sS0FBS1IsWUFBTCxDQUFrQk8saUJBQWxCLENBQXhCO0FBQ0EsVUFBSUMsU0FBSixFQUFlRixVQUFVLENBQUNHLElBQVgsQ0FBZ0JELFNBQWhCO0FBQ2xCOztBQUNELFdBQU9GLFVBQVA7QUFDSDs7QUFDRCxRQUFNTyxtQkFBTixDQUEwQkMsYUFBMUIsRUFBb0U7QUFDaEUsVUFBTUMsY0FBYyxHQUFHLEtBQUtwQixNQUFMLENBQVlxQixrQkFBWixDQUErQkYsYUFBL0IsQ0FBdkI7QUFDQSxVQUFNRyxNQUFnQixHQUFHLEVBQXpCOztBQUNBLFFBQUlGLGNBQUosRUFBb0I7QUFDaEIsV0FBSyxNQUFNRyxhQUFYLElBQTRCSCxjQUE1QixFQUE0QztBQUN4QyxjQUFNSSxLQUFLLEdBQUcsTUFBTSxLQUFLbEIsUUFBTCxDQUFjaUIsYUFBZCxDQUFwQjtBQUNBLFlBQUlDLEtBQUosRUFBV0YsTUFBTSxDQUFDUixJQUFQLENBQVlVLEtBQVo7QUFDZDtBQUNKOztBQUNELFdBQU9GLE1BQVA7QUFDSDs7QUFDRCxRQUFNRyxvQkFBTixDQUEyQkMsYUFBM0IsRUFBcUU7QUFDakUsVUFBTUMsY0FBYyxHQUFHLEtBQUszQixNQUFMLENBQVk0QixpQkFBWixDQUE4QkYsYUFBOUIsQ0FBdkI7QUFDQSxVQUFNSixNQUFnQixHQUFHLEVBQXpCOztBQUNBLFFBQUlLLGNBQUosRUFBb0I7QUFDaEIsV0FBSyxNQUFNSixhQUFYLElBQTRCSSxjQUE1QixFQUE0QztBQUN4QyxjQUFNSCxLQUFLLEdBQUcsTUFBTSxLQUFLbEIsUUFBTCxDQUFjaUIsYUFBZCxDQUFwQjtBQUNBLFlBQUlDLEtBQUosRUFBV0YsTUFBTSxDQUFDUixJQUFQLENBQVlVLEtBQVo7QUFDZDtBQUNKOztBQUNELFdBQU9GLE1BQVA7QUFDSDs7QUF6RDRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaUNsYWltRWRnZSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0NsYWltRWRnZVwiO1xyXG5pbXBvcnQgeyBpU2NvcmUgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9TY29yZVwiO1xyXG5pbXBvcnQgeyBSc0RhdGEsIGlSc0RhdGEgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9Sc0RhdGFcIjtcclxuaW1wb3J0IHsgaUFjdGlvbiB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0FjdGlvblwiO1xyXG5pbXBvcnQgeyBpQ2xhaW0gfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9DbGFpbVwiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBSZXBvc2l0b3J5TG9jYWxCYXNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgcnNEYXRhOiBpUnNEYXRhID0gbmV3IFJzRGF0YSgpXHJcbiAgICApIHtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRDbGFpbShpZDogc3RyaW5nKTogUHJvbWlzZTxpQ2xhaW0gfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yc0RhdGEuaXRlbXNbaWRdIGFzIGlDbGFpbTtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldENsYWltRWRnZShpZDogc3RyaW5nKTogUHJvbWlzZTxpQ2xhaW1FZGdlIHwgdW5kZWZpbmVkPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucnNEYXRhLml0ZW1zW2lkXSBhcyBpQ2xhaW1FZGdlO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0U2NvcmUoaWQ6IHN0cmluZyk6IFByb21pc2U8aVNjb3JlIHwgdW5kZWZpbmVkPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucnNEYXRhLml0ZW1zW2lkXSBhcyBpU2NvcmU7XHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRDbGFpbUVkZ2VzQnlQYXJlbnRJZChwYXJlbnRJZDogc3RyaW5nKTogUHJvbWlzZTxpQ2xhaW1FZGdlW10+IHtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VJZFN0cmluZ3MgPSB0aGlzLnJzRGF0YS5jbGFpbUVkZ2VJZHNCeVBhcmVudElkW3BhcmVudElkXTtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VzOiBpQ2xhaW1FZGdlW10gPSBbXTtcclxuICAgICAgICBpZiAoY2xhaW1FZGdlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2xhaW1FZGdlSWRTdHJpbmcgb2YgY2xhaW1FZGdlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbGFpbUVkZ2UgPSBhd2FpdCB0aGlzLmdldENsYWltRWRnZShjbGFpbUVkZ2VJZFN0cmluZylcclxuICAgICAgICAgICAgICAgIGlmIChjbGFpbUVkZ2UpIGNsYWltRWRnZXMucHVzaChjbGFpbUVkZ2UpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsYWltRWRnZXNcclxuICAgIH1cclxuICAgIGFzeW5jIGdldENsYWltRWRnZXNCeUNoaWxkSWQoY2hpbGRJZDogc3RyaW5nKTogUHJvbWlzZTxpQ2xhaW1FZGdlW10+IHtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VJZFN0cmluZ3MgPSB0aGlzLnJzRGF0YS5jbGFpbUVkZ2VJZHNCeUNoaWxkSWRbY2hpbGRJZF07XHJcbiAgICAgICAgY29uc3QgY2xhaW1FZGdlczogaUNsYWltRWRnZVtdID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBjbGFpbUVkZ2VJZFN0cmluZyBvZiBjbGFpbUVkZ2VJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgY29uc3QgY2xhaW1FZGdlID0gYXdhaXQgdGhpcy5nZXRDbGFpbUVkZ2UoY2xhaW1FZGdlSWRTdHJpbmcpXHJcbiAgICAgICAgICAgIGlmIChjbGFpbUVkZ2UpIGNsYWltRWRnZXMucHVzaChjbGFpbUVkZ2UpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjbGFpbUVkZ2VzXHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRTY29yZXNCeVNvdXJjZUlkKHNvdXJjZUNsYWltSWQ6IHN0cmluZyk6IFByb21pc2U8aVNjb3JlW10+IHtcclxuICAgICAgICBjb25zdCBzY29yZUlkU3RyaW5ncyA9IHRoaXMucnNEYXRhLnNjb3JlSWRzQnlTb3VyY2VJZFtzb3VyY2VDbGFpbUlkXTtcclxuICAgICAgICBjb25zdCBzY29yZXM6IGlTY29yZVtdID0gW107XHJcbiAgICAgICAgaWYgKHNjb3JlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2NvcmVJZFN0cmluZyBvZiBzY29yZUlkU3RyaW5ncykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NvcmUgPSBhd2FpdCB0aGlzLmdldFNjb3JlKHNjb3JlSWRTdHJpbmcpXHJcbiAgICAgICAgICAgICAgICBpZiAoc2NvcmUpIHNjb3Jlcy5wdXNoKHNjb3JlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzY29yZXNcclxuICAgIH1cclxuICAgIGFzeW5jIGdldENoaWxkcmVuQnlTY29yZUlkKHBhcmVudFNjb3JlSWQ6IHN0cmluZyk6IFByb21pc2U8aVNjb3JlW10+IHtcclxuICAgICAgICBjb25zdCBjaGlsZElkU3RyaW5ncyA9IHRoaXMucnNEYXRhLmNoaWxkSWRzQnlTY29yZUlkW3BhcmVudFNjb3JlSWRdO1xyXG4gICAgICAgIGNvbnN0IHNjb3JlczogaVNjb3JlW10gPSBbXTtcclxuICAgICAgICBpZiAoY2hpbGRJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBzY29yZUlkU3RyaW5nIG9mIGNoaWxkSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzY29yZSA9IGF3YWl0IHRoaXMuZ2V0U2NvcmUoc2NvcmVJZFN0cmluZylcclxuICAgICAgICAgICAgICAgIGlmIChzY29yZSkgc2NvcmVzLnB1c2goc2NvcmUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNjb3Jlc1xyXG4gICAgfVxyXG4gICAgcHVibGljIHJlYWRvbmx5IGxvZzogaUFjdGlvbltdW10gPSBbXTtcclxuXHJcbn0iXX0=
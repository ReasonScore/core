"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RepositoryLocalBase = void 0;

var _RsData = require("../dataModels/RsData");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RepositoryLocalBase {
  constructor(rsData = new _RsData.RsData()) {
    this.rsData = rsData;

    _defineProperty(this, "log", []);
  }

  async getClaim(id) {
    return this.rsData.claims[id];
  }

  async getClaimEdge(id) {
    return this.rsData.claimEdges[id];
  }

  async getScore(id) {
    return this.rsData.scores[id];
  }

  async getClaimEdgesByParentId(parentId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByParentId[parentId];
    const claimEdges = [];

    if (claimEdgeIdStrings) {
      for (const claimEdgeIdString of claimEdgeIdStrings) {
        const claimEdge = await this.getClaimEdge(claimEdgeIdString);
        if (claimEdge) claimEdges.push(claimEdge);
      }
    }

    return claimEdges;
  }

  async getClaimEdgesByChildId(childId) {
    const claimEdgeIdStrings = this.rsData.claimEdgeIdsByChildId[childId];
    const claimEdges = [];

    for (const claimEdgeIdString of claimEdgeIdStrings) {
      const claimEdge = await this.getClaimEdge(claimEdgeIdString);
      if (claimEdge) claimEdges.push(claimEdge);
    }

    return claimEdges;
  }

  async getScoresByClaimId(sourceClaimId) {
    const scoreIdStrings = this.rsData.scoreIdsByClaimId[sourceClaimId];
    const scores = [];

    if (scoreIdStrings) {
      for (const scoreIdString of scoreIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

  async getChildrenByScoreId(parentScoreId) {
    const childIdStrings = this.rsData.childIdsByScoreId[parentScoreId];
    const scores = [];

    if (childIdStrings) {
      for (const scoreIdString of childIdStrings) {
        const score = await this.getScore(scoreIdString);
        if (score) scores.push(score);
      }
    }

    return scores;
  }

}

exports.RepositoryLocalBase = RepositoryLocalBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBvc2l0b3JpZXMvUmVwb3NpdG9yeUxvY2FsQmFzZS50cyJdLCJuYW1lcyI6WyJSZXBvc2l0b3J5TG9jYWxCYXNlIiwiY29uc3RydWN0b3IiLCJyc0RhdGEiLCJSc0RhdGEiLCJnZXRDbGFpbSIsImlkIiwiY2xhaW1zIiwiZ2V0Q2xhaW1FZGdlIiwiY2xhaW1FZGdlcyIsImdldFNjb3JlIiwic2NvcmVzIiwiZ2V0Q2xhaW1FZGdlc0J5UGFyZW50SWQiLCJwYXJlbnRJZCIsImNsYWltRWRnZUlkU3RyaW5ncyIsImNsYWltRWRnZUlkc0J5UGFyZW50SWQiLCJjbGFpbUVkZ2VJZFN0cmluZyIsImNsYWltRWRnZSIsInB1c2giLCJnZXRDbGFpbUVkZ2VzQnlDaGlsZElkIiwiY2hpbGRJZCIsImNsYWltRWRnZUlkc0J5Q2hpbGRJZCIsImdldFNjb3Jlc0J5Q2xhaW1JZCIsInNvdXJjZUNsYWltSWQiLCJzY29yZUlkU3RyaW5ncyIsInNjb3JlSWRzQnlDbGFpbUlkIiwic2NvcmVJZFN0cmluZyIsInNjb3JlIiwiZ2V0Q2hpbGRyZW5CeVNjb3JlSWQiLCJwYXJlbnRTY29yZUlkIiwiY2hpbGRJZFN0cmluZ3MiLCJjaGlsZElkc0J5U2NvcmVJZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOzs7O0FBS08sTUFBTUEsbUJBQU4sQ0FBMEI7QUFFN0JDLEVBQUFBLFdBQVcsQ0FDQUMsTUFBZSxHQUFHLElBQUlDLGNBQUosRUFEbEIsRUFFVDtBQUFBLFNBRFNELE1BQ1QsR0FEU0EsTUFDVDs7QUFBQSxpQ0FzRGlDLEVBdERqQztBQUNEOztBQUVELFFBQU1FLFFBQU4sQ0FBZUMsRUFBZixFQUF3RDtBQUNwRCxXQUFPLEtBQUtILE1BQUwsQ0FBWUksTUFBWixDQUFtQkQsRUFBbkIsQ0FBUDtBQUNIOztBQUNELFFBQU1FLFlBQU4sQ0FBbUJGLEVBQW5CLEVBQWdFO0FBQzVELFdBQU8sS0FBS0gsTUFBTCxDQUFZTSxVQUFaLENBQXVCSCxFQUF2QixDQUFQO0FBQ0g7O0FBQ0QsUUFBTUksUUFBTixDQUFlSixFQUFmLEVBQXdEO0FBQ3BELFdBQU8sS0FBS0gsTUFBTCxDQUFZUSxNQUFaLENBQW1CTCxFQUFuQixDQUFQO0FBQ0g7O0FBQ0QsUUFBTU0sdUJBQU4sQ0FBOEJDLFFBQTlCLEVBQXVFO0FBQ25FLFVBQU1DLGtCQUFrQixHQUFHLEtBQUtYLE1BQUwsQ0FBWVksc0JBQVosQ0FBbUNGLFFBQW5DLENBQTNCO0FBQ0EsVUFBTUosVUFBd0IsR0FBRyxFQUFqQzs7QUFDQSxRQUFJSyxrQkFBSixFQUF3QjtBQUNwQixXQUFLLE1BQU1FLGlCQUFYLElBQWdDRixrQkFBaEMsRUFBb0Q7QUFDaEQsY0FBTUcsU0FBUyxHQUFHLE1BQU0sS0FBS1QsWUFBTCxDQUFrQlEsaUJBQWxCLENBQXhCO0FBQ0EsWUFBSUMsU0FBSixFQUFlUixVQUFVLENBQUNTLElBQVgsQ0FBZ0JELFNBQWhCO0FBQ2xCO0FBQ0o7O0FBQ0QsV0FBT1IsVUFBUDtBQUNIOztBQUNELFFBQU1VLHNCQUFOLENBQTZCQyxPQUE3QixFQUFxRTtBQUNqRSxVQUFNTixrQkFBa0IsR0FBRyxLQUFLWCxNQUFMLENBQVlrQixxQkFBWixDQUFrQ0QsT0FBbEMsQ0FBM0I7QUFDQSxVQUFNWCxVQUF3QixHQUFHLEVBQWpDOztBQUNBLFNBQUssTUFBTU8saUJBQVgsSUFBZ0NGLGtCQUFoQyxFQUFvRDtBQUNoRCxZQUFNRyxTQUFTLEdBQUcsTUFBTSxLQUFLVCxZQUFMLENBQWtCUSxpQkFBbEIsQ0FBeEI7QUFDQSxVQUFJQyxTQUFKLEVBQWVSLFVBQVUsQ0FBQ1MsSUFBWCxDQUFnQkQsU0FBaEI7QUFDbEI7O0FBQ0QsV0FBT1IsVUFBUDtBQUNIOztBQUNELFFBQU1hLGtCQUFOLENBQXlCQyxhQUF6QixFQUFtRTtBQUMvRCxVQUFNQyxjQUFjLEdBQUcsS0FBS3JCLE1BQUwsQ0FBWXNCLGlCQUFaLENBQThCRixhQUE5QixDQUF2QjtBQUNBLFVBQU1aLE1BQWdCLEdBQUcsRUFBekI7O0FBQ0EsUUFBSWEsY0FBSixFQUFvQjtBQUNoQixXQUFLLE1BQU1FLGFBQVgsSUFBNEJGLGNBQTVCLEVBQTRDO0FBQ3hDLGNBQU1HLEtBQUssR0FBRyxNQUFNLEtBQUtqQixRQUFMLENBQWNnQixhQUFkLENBQXBCO0FBQ0EsWUFBSUMsS0FBSixFQUFXaEIsTUFBTSxDQUFDTyxJQUFQLENBQVlTLEtBQVo7QUFDZDtBQUNKOztBQUNELFdBQU9oQixNQUFQO0FBQ0g7O0FBQ0QsUUFBTWlCLG9CQUFOLENBQTJCQyxhQUEzQixFQUFxRTtBQUNqRSxVQUFNQyxjQUFjLEdBQUcsS0FBSzNCLE1BQUwsQ0FBWTRCLGlCQUFaLENBQThCRixhQUE5QixDQUF2QjtBQUNBLFVBQU1sQixNQUFnQixHQUFHLEVBQXpCOztBQUNBLFFBQUltQixjQUFKLEVBQW9CO0FBQ2hCLFdBQUssTUFBTUosYUFBWCxJQUE0QkksY0FBNUIsRUFBNEM7QUFDeEMsY0FBTUgsS0FBSyxHQUFHLE1BQU0sS0FBS2pCLFFBQUwsQ0FBY2dCLGFBQWQsQ0FBcEI7QUFDQSxZQUFJQyxLQUFKLEVBQVdoQixNQUFNLENBQUNPLElBQVAsQ0FBWVMsS0FBWjtBQUNkO0FBQ0o7O0FBQ0QsV0FBT2hCLE1BQVA7QUFDSDs7QUF6RDRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaUNsYWltRWRnZSB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0NsYWltRWRnZVwiO1xyXG5pbXBvcnQgeyBpU2NvcmUgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9TY29yZVwiO1xyXG5pbXBvcnQgeyBSc0RhdGEsIGlSc0RhdGEgfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9Sc0RhdGFcIjtcclxuaW1wb3J0IHsgaUFjdGlvbiB9IGZyb20gXCIuLi9kYXRhTW9kZWxzL0FjdGlvblwiO1xyXG5pbXBvcnQgeyBpQ2xhaW0gfSBmcm9tIFwiLi4vZGF0YU1vZGVscy9DbGFpbVwiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBSZXBvc2l0b3J5TG9jYWxCYXNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgcnNEYXRhOiBpUnNEYXRhID0gbmV3IFJzRGF0YSgpXHJcbiAgICApIHtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRDbGFpbShpZDogc3RyaW5nKTogUHJvbWlzZTxpQ2xhaW0gfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yc0RhdGEuY2xhaW1zW2lkXTtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldENsYWltRWRnZShpZDogc3RyaW5nKTogUHJvbWlzZTxpQ2xhaW1FZGdlIHwgdW5kZWZpbmVkPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucnNEYXRhLmNsYWltRWRnZXNbaWRdO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0U2NvcmUoaWQ6IHN0cmluZyk6IFByb21pc2U8aVNjb3JlIHwgdW5kZWZpbmVkPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucnNEYXRhLnNjb3Jlc1tpZF07XHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRDbGFpbUVkZ2VzQnlQYXJlbnRJZChwYXJlbnRJZDogc3RyaW5nKTogUHJvbWlzZTxpQ2xhaW1FZGdlW10+IHtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VJZFN0cmluZ3MgPSB0aGlzLnJzRGF0YS5jbGFpbUVkZ2VJZHNCeVBhcmVudElkW3BhcmVudElkXTtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VzOiBpQ2xhaW1FZGdlW10gPSBbXTtcclxuICAgICAgICBpZiAoY2xhaW1FZGdlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2xhaW1FZGdlSWRTdHJpbmcgb2YgY2xhaW1FZGdlSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbGFpbUVkZ2UgPSBhd2FpdCB0aGlzLmdldENsYWltRWRnZShjbGFpbUVkZ2VJZFN0cmluZylcclxuICAgICAgICAgICAgICAgIGlmIChjbGFpbUVkZ2UpIGNsYWltRWRnZXMucHVzaChjbGFpbUVkZ2UpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsYWltRWRnZXNcclxuICAgIH1cclxuICAgIGFzeW5jIGdldENsYWltRWRnZXNCeUNoaWxkSWQoY2hpbGRJZDogc3RyaW5nKTogUHJvbWlzZTxpQ2xhaW1FZGdlW10+IHtcclxuICAgICAgICBjb25zdCBjbGFpbUVkZ2VJZFN0cmluZ3MgPSB0aGlzLnJzRGF0YS5jbGFpbUVkZ2VJZHNCeUNoaWxkSWRbY2hpbGRJZF07XHJcbiAgICAgICAgY29uc3QgY2xhaW1FZGdlczogaUNsYWltRWRnZVtdID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBjbGFpbUVkZ2VJZFN0cmluZyBvZiBjbGFpbUVkZ2VJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgY29uc3QgY2xhaW1FZGdlID0gYXdhaXQgdGhpcy5nZXRDbGFpbUVkZ2UoY2xhaW1FZGdlSWRTdHJpbmcpXHJcbiAgICAgICAgICAgIGlmIChjbGFpbUVkZ2UpIGNsYWltRWRnZXMucHVzaChjbGFpbUVkZ2UpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjbGFpbUVkZ2VzXHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRTY29yZXNCeUNsYWltSWQoc291cmNlQ2xhaW1JZDogc3RyaW5nKTogUHJvbWlzZTxpU2NvcmVbXT4ge1xyXG4gICAgICAgIGNvbnN0IHNjb3JlSWRTdHJpbmdzID0gdGhpcy5yc0RhdGEuc2NvcmVJZHNCeUNsYWltSWRbc291cmNlQ2xhaW1JZF07XHJcbiAgICAgICAgY29uc3Qgc2NvcmVzOiBpU2NvcmVbXSA9IFtdO1xyXG4gICAgICAgIGlmIChzY29yZUlkU3RyaW5ncykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNjb3JlSWRTdHJpbmcgb2Ygc2NvcmVJZFN0cmluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNjb3JlID0gYXdhaXQgdGhpcy5nZXRTY29yZShzY29yZUlkU3RyaW5nKVxyXG4gICAgICAgICAgICAgICAgaWYgKHNjb3JlKSBzY29yZXMucHVzaChzY29yZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2NvcmVzXHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRDaGlsZHJlbkJ5U2NvcmVJZChwYXJlbnRTY29yZUlkOiBzdHJpbmcpOiBQcm9taXNlPGlTY29yZVtdPiB7XHJcbiAgICAgICAgY29uc3QgY2hpbGRJZFN0cmluZ3MgPSB0aGlzLnJzRGF0YS5jaGlsZElkc0J5U2NvcmVJZFtwYXJlbnRTY29yZUlkXTtcclxuICAgICAgICBjb25zdCBzY29yZXM6IGlTY29yZVtdID0gW107XHJcbiAgICAgICAgaWYgKGNoaWxkSWRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2NvcmVJZFN0cmluZyBvZiBjaGlsZElkU3RyaW5ncykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NvcmUgPSBhd2FpdCB0aGlzLmdldFNjb3JlKHNjb3JlSWRTdHJpbmcpXHJcbiAgICAgICAgICAgICAgICBpZiAoc2NvcmUpIHNjb3Jlcy5wdXNoKHNjb3JlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzY29yZXNcclxuICAgIH1cclxuICAgIHB1YmxpYyByZWFkb25seSBsb2c6IGlBY3Rpb25bXVtdID0gW107XHJcblxyXG59Il19